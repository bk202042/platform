Directory structure:
└── bk202042-platform/
    ├── README.md
    ├── components.json
    ├── eslint.config.mjs
    ├── google-auth-integration-with-supabase.md
    ├── middleware.ts
    ├── next.config.mjs
    ├── package.json
    ├── postcss.config.mjs
    ├── PROJECT_ANALYSIS.md
    ├── research.md
    ├── researchstack.md
    ├── shadcn.json
    ├── tsconfig.json
    ├── .clineignore
    ├── .env.example
    ├── app/
    │   ├── globals.css
    │   ├── head.tsx
    │   ├── layout.tsx
    │   ├── page.tsx
    │   ├── (main)/
    │   │   ├── layout.tsx
    │   │   ├── loading.tsx
    │   │   ├── properties/
    │   │   │   ├── page.tsx
    │   │   │   └── [id]/
    │   │   │       ├── error.tsx
    │   │   │       ├── not-found.tsx
    │   │   │       ├── page.tsx
    │   │   │       └── _components/
    │   │   │           ├── PropertyCosts.tsx
    │   │   │           ├── PropertyDetail.tsx
    │   │   │           ├── PropertyFeatures.tsx
    │   │   │           ├── PropertyGallery.tsx
    │   │   │           └── RequestInfoForm.tsx
    │   │   └── search/
    │   │       ├── page.tsx
    │   │       └── _components/
    │   │           ├── SearchForm.tsx
    │   │           └── SearchResults.tsx
    │   ├── about/
    │   │   └── page.tsx
    │   ├── admin/
    │   │   ├── layout.tsx
    │   │   ├── page.tsx
    │   │   ├── _components/
    │   │   │   └── AdminSidebar.tsx
    │   │   ├── profile/
    │   │   │   ├── page.tsx
    │   │   │   └── _components/
    │   │   │       ├── ProfileDetails.tsx
    │   │   │       └── ProfileDropdown.tsx
    │   │   ├── properties/
    │   │   │   └── page.tsx
    │   │   ├── saved-homes/
    │   │   │   └── page.tsx
    │   │   └── users/
    │   │       └── page.tsx
    │   ├── api/
    │   │   ├── agents/
    │   │   │   └── register/
    │   │   │       └── route.ts
    │   │   ├── properties/
    │   │   │   ├── route.ts
    │   │   │   ├── [id]/
    │   │   │   │   ├── route.ts
    │   │   │   │   └── delete/
    │   │   │   │       └── route.ts
    │   │   │   ├── create/
    │   │   │   │   └── route.ts
    │   │   │   ├── nearby/
    │   │   │   │   └── route.ts
    │   │   │   ├── search/
    │   │   │   │   └── route.ts
    │   │   │   └── stats/
    │   │   │       └── route.ts
    │   │   ├── request-info/
    │   │   │   └── route.ts
    │   │   └── test-db/
    │   │       └── route.ts
    │   ├── auth/
    │   │   ├── callback/
    │   │   │   └── route.ts
    │   │   ├── confirm/
    │   │   │   └── route.ts
    │   │   ├── error/
    │   │   │   └── page.tsx
    │   │   ├── forgot-password/
    │   │   │   └── page.tsx
    │   │   ├── reset-password/
    │   │   │   └── route.ts
    │   │   ├── sign-in/
    │   │   │   ├── page.tsx
    │   │   │   └── _components/
    │   │   │       └── SignInForm.tsx
    │   │   ├── sign-up/
    │   │   │   ├── page.tsx
    │   │   │   └── _components/
    │   │   │       └── SignUpForm.tsx
    │   │   ├── sign-up-success/
    │   │   │   └── page.tsx
    │   │   └── update-password/
    │   │       └── page.tsx
    │   ├── emails/
    │   │   ├── AgentRegistrationEmail.tsx
    │   │   ├── RequestInfoEmail.tsx
    │   │   └── .eslintrc.js
    │   ├── join-as-agent/
    │   │   ├── layout.tsx
    │   │   ├── page.tsx
    │   │   ├── _components/
    │   │   │   └── AgentRegistrationForm.tsx
    │   │   └── success/
    │   │       └── page.tsx
    │   ├── privacy-policy/
    │   │   └── page.tsx
    │   ├── profile/
    │   │   └── page.tsx
    │   └── terms-of-use/
    │       └── page.tsx
    ├── components/
    │   ├── auth/
    │   │   └── GoogleSignInButton.tsx
    │   ├── error/
    │   │   └── ErrorBoundary.tsx
    │   ├── featured/
    │   │   └── FeaturedPropertiesClient.tsx
    │   ├── layout/
    │   │   ├── Container.tsx
    │   │   ├── Footer.tsx
    │   │   └── Header.tsx
    │   ├── property/
    │   │   ├── FeaturedPropertyTabs.tsx
    │   │   ├── PropertyCard.tsx
    │   │   ├── PropertyCardSkeleton.tsx
    │   │   ├── PropertyContact.tsx
    │   │   ├── PropertyFeatures.tsx
    │   │   ├── PropertyImageGallery.tsx
    │   │   ├── PropertyListings.tsx
    │   │   ├── PropertyLocation.tsx
    │   │   ├── PropertyStatistics.tsx
    │   │   ├── PropertyTypeSelector.tsx
    │   │   ├── PropertyTypeTabs.tsx
    │   │   └── SimilarProperties.tsx
    │   ├── providers/
    │   │   └── PropertyDataProvider.tsx
    │   ├── sections/
    │   │   ├── ExploreSection.tsx
    │   │   ├── FeaturedPropertiesSection.tsx
    │   │   ├── FeatureHighlightsSection.tsx
    │   │   ├── HeroSection.tsx
    │   │   └── KoreanExpatriatesSection.tsx
    │   ├── stagewise/
    │   │   └── StagewiseToolbarLoader.tsx
    │   └── ui/
    │       ├── alert.tsx
    │       ├── button.tsx
    │       ├── card.tsx
    │       ├── carousel.tsx
    │       ├── checkbox.tsx
    │       ├── dialog.tsx
    │       ├── dropdown-menu.tsx
    │       ├── form.tsx
    │       ├── input.tsx
    │       ├── label.tsx
    │       ├── select.tsx
    │       ├── separator.tsx
    │       ├── sonner.tsx
    │       └── textarea.tsx
    ├── lib/
    │   ├── utils.ts
    │   ├── data/
    │   │   ├── agent.ts
    │   │   └── property.ts
    │   ├── supabase/
    │   │   ├── client.ts
    │   │   ├── server-anon.ts
    │   │   ├── server-api.ts
    │   │   └── server.ts
    │   ├── types/
    │   │   └── database.ts
    │   └── validation/
    │       ├── agent-registration.ts
    │       ├── agent.ts
    │       ├── property.ts
    │       └── request-info.ts
    ├── public/
    │   └── manifest.webmanifest
    ├── supabase/
    │   └── migrations/
    │       ├── 20240320000001_create_property_images.sql
    │       ├── 20250425061530_fix_property_images_fk.sql
    │       ├── 20250511081938_create_agent_registrations.sql
    │       ├── 20250709043041_create_user_profile_on_signup.sql
    │       ├── 20250709050800_drop_public_users_table.sql
    │       └── 20250709051700_create_search_properties_within_radius_function.sql
    └── types/
        ├── agent.ts
        ├── property.ts
        └── supabase.ts

================================================
FILE: README.md
================================================
# Vietnam Property Platform

A property listing platform designed for Korean expatriates in Vietnam.

## Features

- [Next.js](https://nextjs.org) with App Router
- [TypeScript](https://www.typescriptlang.org/) for type safety
- [Tailwind CSS v4.1.4](https://tailwindcss.com/) for styling
- [shadcn/ui](https://ui.shadcn.com/) for beautiful, accessible components
- [Supabase](https://supabase.com/) for backend services
- Feature-based project structure
- Dark mode support
- Performance-optimized

## Getting Started

1. Clone this repository
2. Install dependencies:

```bash
npm install
# or
yarn install
# or
pnpm install
```

3. Run the development server:

```bash
npm run dev
# or
yarn dev
# or
pnpm dev
```

4. Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

## Project Structure

The project follows a feature-based structure with the Next.js App Router:

```
/app
  /(main)                     # Route group for main public pages
    /layout.tsx               # Layout for main pages
    /page.tsx                 # Home page
    /properties               # Properties feature
      /[id]                   # Property detail page
        /_components          # Property detail components
          /PropertyDetail.tsx
          /PropertyGallery.tsx
        /page.tsx
      /page.tsx               # Properties listing page
    /search                   # Search feature
      /_components            # Search-specific components
        /SearchForm.tsx
        /SearchResults.tsx
      /page.tsx
  /api                        # API routes
    /properties               # Properties API
      /[id]                   # Property by ID
        /route.ts
      /search                 # Search endpoint
        /route.ts
      /route.ts               # List properties
/components                   # Shared components
  /ui                         # UI primitives
    /button.tsx
    /card.tsx
    /input.tsx
    /select.tsx
  /layout                     # Layout components
    /Container.tsx
  /providers                  # Context providers
    /PropertyDataProvider.tsx
/lib                          # Shared utilities
  /data                       # Data Access Layer
    /property.ts              # Property data functions
  /supabase                   # Supabase client
    /client.ts
    /server.ts
  /utils.ts                   # Utility functions
/types                        # TypeScript types
  /property.ts
  /supabase.ts
```

## Core Features

1. **Property Search**: Search for properties by various criteria including location, price, and property type.
2. **Property Listings**: Browse all available properties with filtering options.
3. **Property Details**: View detailed information about a specific property.

## Technology Stack

- **Frontend**: Next.js with App Router, React, Tailwind CSS v4.1.4, shadcn/ui
- **Backend**: Supabase (PostgreSQL, PostGIS, Authentication)
- **Styling**: Tailwind CSS v4.1.4 with zinc color theme

## Data Access Layer

The project uses a data access layer to abstract database operations:

- `lib/data/property.ts`: Functions for property data operations
- API routes use the data access layer instead of direct database access

## API Routes

- `GET /api/properties`: List properties with filtering options
- `GET /api/properties/[id]`: Get a specific property by ID
- `PATCH /api/properties/[id]`: Update a property
- `DELETE /api/properties/[id]/delete`: Delete a property

## Project Philosophy

- **Simplicity**: Focus on core features only (search, list, detail)
- **Performance**: Optimize for speed throughout development
- **Minimal Dependencies**: Use built-in Next.js capabilities whenever possible

## Learn More

- [Next.js Documentation](https://nextjs.org/docs)
- [Supabase Documentation](https://supabase.com/docs)
- [Tailwind CSS Documentation](https://tailwindcss.com/docs)
- [shadcn/ui Documentation](https://ui.shadcn.com/docs)



================================================
FILE: components.json
================================================
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "new-york",
  "rsc": true,
  "tsx": true,
  "tailwind": {
    "config": "tailwind.config.js",
    "css": "app/globals.css",
    "baseColor": "zinc",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/lib",
    "hooks": "@/hooks"
  },
  "iconLibrary": "lucide"
}



================================================
FILE: eslint.config.mjs
================================================
import { dirname } from "path";
import { fileURLToPath } from "url";
import { FlatCompat } from "@eslint/eslintrc";

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const compat = new FlatCompat({
  baseDirectory: __dirname,
});

const eslintConfig = [
  ...compat.extends("next/core-web-vitals", "next/typescript"),
  {
    files: ["app/emails/**/*.tsx", "app/emails/**/*.ts"],
    rules: {
      "react/no-inline-styles": "off",
    },
  },
];

export default eslintConfig;



================================================
FILE: google-auth-integration-with-supabase.md
================================================
Here’s a clear, step-by-step plan to add Google Auth to your Next.js (App Router) + Supabase app, strictly following your coding philosophy and the latest official documentation (Context7, Supabase docs):

---

## 1. Research & Documentation

- **Research**: Gather all relevant, up-to-date information from Context7 MCP and Supabase docs about Google Auth integration.
- **Document**: Summarize findings, code snippets, and configuration steps in research.md (or update if it exists).

---

## 2. Google Cloud Console Setup

- **Create/Select Project**: Go to Google Cloud Console, create or select a project.
- **Configure OAuth Consent Screen**: Set up the consent screen, add privacy policy and terms links.
- **Create OAuth Credentials**:
  - Application type: Web application.
  - Add Authorized JavaScript origins (your site URL, e.g., http://localhost:3000 for local dev).
  - Add Authorized redirect URIs (from Supabase dashboard).
- **Copy Client ID and Secret**: Save these for Supabase configuration.

---

## 3. Supabase Dashboard Configuration

- **Enable Google Provider**: In Supabase dashboard, go to Authentication > Providers > Google.
- **Paste Client ID and Secret**: Enter the values from Google Cloud.
- **Save**: Confirm and save the provider settings.

---

## 4. Environment Variables

- **Check/Update**:
  - NEXT_PUBLIC_SUPABASE_URL
  - NEXT_PUBLIC_SUPABASE_ANON_KEY
- **(If needed)**: Add any Google-specific env vars (rare, usually not needed for Supabase).

---

## 5. UI/UX Planning

- **Sign In Button**: Decide where the “Sign in with Google” button will appear (e.g., sign-in page).
- **Button Implementation**: Plan to use your own button (with supabase-js) or Google’s pre-built button (for One Tap, etc.).
- **Redirect Handling**: Plan for post-login redirect (e.g., to dashboard or previous page).

---

## 6. Client-Side Integration

- **Choose Method**:
  - Use supabase-js’s signInWithOAuth({ provider: 'google' }) for a simple redirect flow.
  - (Optional) For advanced use, consider Google’s pre-built button and handle tokens manually.
- **Session Handling**: Plan how to handle the returned session (store, check auth state, etc.).

---

## 7. Server-Side Considerations

- **SSR/SSG**: Ensure correct use of @supabase/ssr for server-side session handling.
- **API Routes**: No direct changes needed unless you want to restrict access to authenticated users.

---

## 8. Testing

- **Local Testing**: Ensure localhost is in Google’s allowed origins.
- **Production Testing**: Add production URL to Google Cloud and Supabase settings.

---

## 9. Documentation & Code Quality

- **Update research.md**: Document every step, code snippet, and config.
- **Follow Coding Rules**: KISS, clean code, functional patterns, no classes, etc.

---

## 10. Pre-Implementation Checklist

- [ ] All research documented in research.md
- [ ] Google Cloud project and OAuth credentials ready
- [ ] Supabase provider configured
- [ ] Env vars set
- [ ] UI/UX flow mapped
- [ ] Integration approach chosen (supabase-js or Google button)
- [ ] Testing plan in place

---



================================================
FILE: middleware.ts
================================================
import { createServerClient } from '@supabase/ssr';
import { NextResponse, type NextRequest } from 'next/server';

export async function middleware(request: NextRequest) {
  const response = NextResponse.next({
    request,
  });

  const supabase = createServerClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
    {
      cookies: {
        getAll() {
          return request.cookies.getAll();
        },
        setAll(cookiesToSet) {
          cookiesToSet.forEach(({ name, value, options }) => {
            response.cookies.set(name, value, options);
          });
        },
      },
    }
  );

  const {
    data: { user },
  } = await supabase.auth.getUser();

  // Define public paths that don't require authentication
  const publicPaths = [
    '/',
    '/search',
    '/properties',
    '/auth/sign-in',
    '/auth/sign-up',
    '/auth/callback',
    '/auth/confirm',
    '/auth/reset-password',
    '/auth/error',
  ];

  const isPublicPath = publicPaths.some((path) => {
    if (path === '/') {
      return request.nextUrl.pathname === '/';
    }
    return request.nextUrl.pathname.startsWith(path);
  });

  // If the user is not logged in and trying to access a protected route, redirect to sign-in
  if (!user && !isPublicPath) {
    const url = request.nextUrl.clone();
    url.pathname = '/auth/sign-in';
    return NextResponse.redirect(url);
  }

  // If the user is logged in and tries to access the sign-in page, redirect to the homepage
  if (user && request.nextUrl.pathname.startsWith('/auth/sign-in')) {
    const url = request.nextUrl.clone();
    url.pathname = '/';
    return NextResponse.redirect(url);
  }

  return response;
}

// Apply middleware to all routes except static files and authentication callback routes
export const config = {
  matcher: [
    "/((?!_next/static|_next/image|favicon.ico|.*\\.(?:svg|png|jpg|jpeg|gif|webp)$).*)",
  ],
};



================================================
FILE: next.config.mjs
================================================
/** @type {import('next').NextConfig} */
const nextConfig = {
  images: {
    remotePatterns: [
      {
        protocol: "https",
        hostname: "images.unsplash.com",
      },
      {
        protocol: "https",
        hostname: "khtcoztdkxhhrudwhhjv.supabase.co",
      },
    ],
  },
};

export default nextConfig;



================================================
FILE: package.json
================================================
{
  "name": "platform",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint",
    "load-data": "tsx scripts/load-property-data.ts"
  },
  "dependencies": {
    "@hookform/resolvers": "^5.0.1",
    "@radix-ui/react-checkbox": "^1.2.2",
    "@radix-ui/react-dialog": "^1.1.10",
    "@radix-ui/react-dropdown-menu": "^2.1.12",
    "@radix-ui/react-icons": "^1.3.2",
    "@radix-ui/react-label": "^2.1.6",
    "@radix-ui/react-select": "^2.2.2",
    "@radix-ui/react-separator": "^1.1.4",
    "@radix-ui/react-slot": "^1.2.2",
    "@stagewise/toolbar-next": "^0.1.2",
    "@supabase/ssr": "^0.6.1",
    "@supabase/supabase-js": "^2.39.8",
    "class-variance-authority": "^0.7.0",
    "clsx": "^2.1.0",
    "embla-carousel-react": "^8.6.0",
    "lucide-react": "^0.488.0",
    "next": "^15.3.1",
    "next-themes": "^0.4.6",
    "react": "^19.0.0",
    "react-dom": "^19.0.0",
    "react-hook-form": "^7.56.3",
    "resend": "^4.5.0",
    "sonner": "^2.0.3",
    "tailwind-merge": "^2.2.2",
    "zod": "^3.24.4"
  },
  "devDependencies": {
    "@tailwindcss/cli": "^4.1.4",
    "@tailwindcss/postcss": "^4.1.4",
    "@types/node": "^20",
    "@types/react": "^19",
    "@types/react-dom": "^19",
    "dotenv": "^16.3.1",
    "eslint": "^9",
    "eslint-config-next": "15.3.0",
    "tailwindcss": "^4.1.4",
    "tsx": "^4.7.0",
    "typescript": "^5.8.3"
  },
  "type": "module"
}



================================================
FILE: postcss.config.mjs
================================================
const config = {
  plugins: ["@tailwindcss/postcss"],
};

export default config;



================================================
FILE: PROJECT_ANALYSIS.md
================================================
# Project Analysis

This document provides a comprehensive analysis of the platform project from three key perspectives: Software Architect, Software Developer, and Product Manager.

## 1. Software Architect's Perspective

From a software architect's point of view, the project is a well-structured and modern web application built on a solid foundation of popular and effective technologies.

### 1.1. Technology Stack

The technology stack is a modern and robust combination of technologies that are well-suited for building a scalable and maintainable web application.

*   **Framework:** Next.js 15 (React)
*   **Language:** TypeScript
*   **Styling:** Tailwind CSS 4 with shadcn/ui components
*   **Backend:** Next.js API Routes with Supabase (PostgreSQL) for the database
*   **Authentication:** Supabase Auth

### 1.2. Architecture

The application follows a classic client-server architecture, with the Next.js frontend communicating with the Next.js backend via API routes. The backend, in turn, interacts with the Supabase database.

```mermaid
graph TD
    A[Client (Next.js Frontend)] --> B(Next.js API Routes);
    B --> C(Supabase);
    C --> B;
```

### 1.3. Data Model

The data model is centered around two main entities: `property_listings` and `agent_registrations`.

```mermaid
erDiagram
    property_listings {
        string id
        string title
        string description
        string price
        string property_type
        int bedrooms
        int bathrooms
        string square_footage
        string address
        json features
        string created_by
        datetime created_at
        datetime updated_at
    }

    agent_registrations {
        string id
        string first_name
        string last_name
        string email
        string phone
        string sales_volume
        string zip_code
        string status
        string notes
        datetime created_at
        datetime updated_at
        datetime processed_at
    }

    property_listings }|..|{ users : "created_by"
```

### 1.4. Scalability and Performance

The use of Next.js and Supabase provides a good foundation for scalability. Next.js's server-side rendering and static site generation capabilities can be leveraged to improve performance, while Supabase's managed database and authentication services can handle a growing number of users and data.

### 1.5. Security

The application uses Supabase Auth for authentication, which is a secure and reliable solution. The use of middleware to protect routes ensures that only authenticated users can access sensitive information.

## 2. Software Developer's Perspective

From a software developer's perspective, the project is well-organized and easy to work with. The codebase is clean, consistent, and well-documented.

### 2.1. Codebase Structure

The codebase is organized into a logical and intuitive directory structure.

*   `app/`: Contains the application's pages and API routes.
*   `components/`: Contains reusable React components.
*   `lib/`: Contains shared libraries and utilities, including data access, Supabase clients, and validation schemas.
*   `supabase/`: Contains database migrations.
*   `types/`: Contains TypeScript type definitions.

### 2.2. Development Experience

The development experience is enhanced by the use of modern tools and technologies.

*   **TypeScript:** Provides type safety and improved code quality.
*   **ESLint:** Enforces a consistent coding style.
*   **Next.js:** Offers a fast and efficient development server with hot reloading.
*   **shadcn/ui:** Provides a set of accessible and customizable UI components.

### 2.3. Testing

While there are no dedicated test files in the repository, the project is set up in a way that makes it easy to add unit and integration tests. The clear separation of concerns between the UI, business logic, and data access layers makes it straightforward to test individual components and functions in isolation.

## 3. Product Manager's Perspective

From a product manager's perspective, the project is a promising real estate platform with a clear value proposition.

### 3.1. Core Features

The application provides a solid set of core features for a real estate platform.

*   **Property Listings:** Users can browse, search, and view detailed information about property listings.
*   **Agent Registration:** Real estate agents can register to be listed on the platform.
*   **User Authentication:** Users can create accounts and sign in to access personalized features.
*   **Request Information:** Users can contact agents to request more information about properties.

### 3.2. Target Audience

The target audience for the platform appears to be homebuyers, sellers, and real estate agents in the Korean market, as evidenced by the use of the Korean language in the UI and the "Korean Expatriates" section.

### 3.3. Potential for Growth

The platform has significant potential for growth. Here are some potential new features and improvements that could be considered:

*   **Advanced Search Filters:** Add more advanced search filters, such as price range, number of bedrooms, and property type.
*   **Saved Searches and Favorites:** Allow users to save their searches and mark properties as favorites.
*   **Agent Profiles:** Create detailed profiles for real estate agents, including their listings, sales history, and reviews.
*   **Mortgage Calculator:** Integrate a mortgage calculator to help users estimate their monthly payments.
*   **Map View:** Display property listings on a map to help users visualize their location.

---

# DeepWiki Platform Documentation Summary

# VinaHome Platform – DeepWiki Project Summary

## 1. Platform Overview

VinaHome is a Next.js-based real estate platform serving Korean expatriates in Vietnam. It provides property search, listing management, and agent onboarding with full Korean language and cultural support.

**Key Features:**
- Korean language interface (`Noto_Sans_KR` font)
- Properties near Korean communities, schools, and amenities
- Agent registration with email notifications
- Advanced property search with geo-filtering
- Korean-focused content and UX

**Tech Stack:**
| Technology      | Version   | Purpose                        |
|----------------|-----------|--------------------------------|
| Next.js        | 15.3.1    | React framework, App Router    |
| TypeScript     | 5.8.3     | Type safety                    |
| Tailwind CSS   | 4.1.4     | Styling                        |
| Supabase       | 2.39.8    | DB, Auth, Storage              |
| React          | 19.0.0    | UI library                     |
| Zod            | 3.24.4    | Schema validation              |
| React Hook Form| 7.56.3    | Form management                |
| Resend         | 4.5.0     | Email service                  |
| Sonner         | 2.0.3     | Toast notifications            |

## 2. System Architecture

- **Full-stack Next.js 14+ App Router**
- **Supabase** for backend (PostgreSQL, Auth, Storage)
- **SSR/CSR**: Server and client components, dual Supabase client (server: `lib/supabase/server.ts`, client: `lib/supabase/client.ts`)
- **Authentication Middleware**: Route protection, session validation, cookie management (`middleware.ts`)
- **UI Layer**: shadcn/ui, Radix UI, Tailwind CSS, Sonner for notifications

**Architecture Diagram:**
- UI Component System
- Next.js App Layer
- Supabase Integration Layer
- External Services (Resend, CDN)

## 3. User Authentication System

- **Supabase Auth**: Email-based registration, verification, sign-in, session management
- **Middleware**: Protects routes, validates sessions, redirects unauthenticated users
- **Session Management**: Cookie-based, SSR/CSR split
- **Email Verification**: Token-based, handled via `/auth/confirm` route
- **Password Reset**: Self-service via email, `/auth/forgot-password` and `/auth/update-password`
- **Protected Routes**: `/admin/*`, `/profile/*`, `/saved-homes` require authentication

**Key Code Patterns:**
```ts
// Server-side Supabase client
export async function createClient() {
  const cookieStore = await cookies();
  return createServerClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
    { cookies: { get, set } }
  );
}
```

## 4. Agent Registration System

- **Multi-step registration** for real estate agents
- **Korean-language UI** and contextual onboarding
- **Form validation**: Zod schemas, both client and server
- **API endpoint**: `/api/agents/register` handles validation, DB insert, and email notification
- **Email notifications**: Resend service, React email templates, non-blocking delivery
- **Success page**: Clear next steps, timeline, and navigation

**Validation Schema Example:**
```ts
agentRegistrationSchema = z.object({
  firstName: z.string().min(2),
  lastName: z.string().min(1),
  email: z.string().email(),
  phone: z.string().min(10),
  salesVolume: z.string().nonempty(),
  zipCode: z.string().min(5),
});
```

## 5. Property Management System

- **Layered architecture**: Data, business logic, API, presentation
- **Property search**: Multi-criteria filtering (price, type, location, amenities)
- **Geographical search**: PostGIS for geo-filtering
- **Data access**: Cached server functions, public API endpoints
- **Image management**: Supabase Storage, DB records, public URLs
- **API**: `/api/properties` for search, filtering, and pagination
- **Database schema**: `property_listings`, `property_images`, features as JSONB
- **Caching**: Next.js `unstable_cache` for listings and details

**Property Features Example:**
```ts
interface PropertyFeatures {
  parking?: boolean;
  airConditioning?: boolean;
  elevator?: boolean;
  pool?: boolean;
  gym?: boolean;
  furnished?: boolean;
  koreanCommunity?: boolean;
  koreanRestaurants?: boolean;
  internationalSchool?: boolean;
  koreanSchool?: boolean;
  koreanSupermarket?: boolean;
}
```

## 6. User Interface Components

- **Component system**: shadcn/ui, Radix UI, Tailwind CSS
- **Layout**: Header, Footer, StagewiseToolbarLoader (dev only), Sonner Toaster
- **Korean Expatriates Section**: Targeted content for Korean users
- **Search and Listing**: Responsive grid, filter sidebar, paginated results
- **PropertyCard**: Consistent display of property info, price formatting, distance calculation
- **Featured Properties**: Carousel and tab-based display for rent/buy

## 7. Placeholders for Unavailable Sections

Some documentation sections could not be scraped due to rate limits (HTTP 429). Please refer to DeepWiki for:
- Property Detail Pages
- Property Data Layer & API
- User Interface Components (full details)
- Layout Components
- Section Components & Content Areas

---

**Sources:**
- [DeepWiki VinaHome Platform Overview](https://deepwiki.com/bk202042/platform/1-vinahome-platform-overview)
- [System Architecture](https://deepwiki.com/bk202042/platform/2-system-architecture)
- [User Authentication System](https://deepwiki.com/bk202042/platform/3-user-authentication-system)
- [Authentication Flow & Components](https://deepwiki.com/bk202042/platform/3.1-authentication-flow-and-components)
- [Authentication Middleware & Session Management](https://deepwiki.com/bk202042/platform/3.2-authentication-middleware-and-session-management)
- [Agent Registration System](https://deepwiki.com/bk202042/platform/4-agent-registration-system)
- [Agent Registration Pages & Layout](https://deepwiki.com/bk202042/platform/4.1-agent-registration-pages-and-layout)
- [Property Management System](https://deepwiki.com/bk202042/platform/5-property-management-system)
- [Property Search & Filtering](https://deepwiki.com/bk202042/platform/5.1-property-search-and-filtering)
- [Property Listings & Home Page](https://deepwiki.com/bk202042/platform/5.2-property-listings-and-home-page)

For full details and updates, visit the [DeepWiki project](https://deepwiki.com/bk202042/platform/1-vinahome-platform-overview).



================================================
FILE: research.md
================================================
# Google Authentication with Supabase and Next.js

This document outlines the steps to integrate Google Authentication into the existing Next.js application using Supabase.

## 1. Configuration

### Google Cloud Platform
- **Project:** A Google Cloud project must be set up.
- **OAuth Consent Screen:**
    - Authorized Domain: `[YOUR_SUPABASE_PROJECT_ID].supabase.co`
    - Scopes: `.../auth/userinfo.email`, `.../auth/userinfo.profile`, `openid`
- **Credentials:**
    - Type: OAuth Client ID for a Web application.
    - Authorized JavaScript origins: `http://localhost:3000` and production URL.
    - Authorized redirect URLs: The callback URL from the Supabase dashboard.
- **Output:** Client ID and Client Secret.

### Supabase
- **Provider:** Enable the Google provider in the Supabase dashboard.
- **Credentials:** Add the Client ID and Client Secret from GCP.

## 2. Application Implementation Plan

### a. Create a Sign-In UI
- A new component will be created, `components/auth/GoogleSignInButton.tsx`.
- This component will contain a button that, when clicked, initiates the Google sign-in process.

### b. Implement Client-Side Logic
- The `onClick` event of the sign-in button will trigger the `handleSignIn` function.
- The `handleSignIn` function will use the client-side Supabase instance.
- It will call `supabase.auth.signInWithOAuth` with the following configuration:
  ```typescript
  await supabase.auth.signInWithOAuth({
    provider: 'google',
    options: {
      redirectTo: `${location.origin}/auth/callback`,
    },
  });
  ```

### c. Handle the OAuth Callback
- The existing route handler at `app/auth/callback/route.ts` will manage the server-side part of the flow.
- It will exchange the authorization code for a user session using `supabase.auth.exchangeCodeForSession(code)`.
- Upon success, it redirects the user to the application's home page.

### d. Integrate the Sign-In Button
- The `GoogleSignInButton` will be added to the sign-in page at `app/auth/sign-in/page.tsx`.



================================================
FILE: researchstack.md
================================================
# researchstack.md

## 1. 기술 스택 및 버전 (context7 기준)

- **프론트엔드**: Next.js (App Router)
- **타입 안전성**: TypeScript
- **스타일링**: Tailwind CSS v4.1.4 ([공식 가이드](https://tailwindcss.com/))
- **UI 컴포넌트**: shadcn/ui
- **백엔드**: Supabase (PostgreSQL, PostGIS, Authentication)
- **데이터 접근 계층**: lib/data/property.ts 등에서 추상화
- **알림**: Sonner (toast)
- **폼**: React Hook Form + Zod
- **이메일**: Resend, React Email

## 2. 주요 의존성 및 설치 명령어 (README 및 context7 기준)

```bash
npm install

```

## 3. Tailwind CSS v4.1.4 (context7: .clinerules/tailwind-css-v4.md)

- **설정**: CSS-first, `@import "tailwindcss";`
- **테마**: 모든 토큰은 CSS 변수(`--color-blue-500` 등), `var()`로 접근
- **신규 기능**: 컨테이너 쿼리, 3D 변환, 그라디언트, 그림자, 다양한 유틸리티
- **브레이킹 체인지**: `bg-opacity-*`, `text-opacity-*` 제거, `/` 사용(`bg-black/50`)
- **플러그인**: `@plugin "@tailwindcss/typography";`
- **고급 설정**: `@config "../../tailwind.config.js";`, 다크모드 variant, 컨테이너 커스텀 등

## 4. Supabase 연동 (context7: .clinerules/next-js-supabase.md)

### 필수 패키지

- `@supabase/supabase-js`
- `@supabase/ssr`

### 환경 변수

- `NEXT_PUBLIC_SUPABASE_URL`
- `NEXT_PUBLIC_SUPABASE_ANON_KEY`

### 서버 클라이언트 (Server Components, Route Handlers, Server Actions)

```typescript
import { createServerClient } from "@supabase/ssr";
import { cookies } from "next/headers";

export async function createClient() {
  const cookieStore = cookies();
  return createServerClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
    {
      cookies: {
        getAll() {
          return cookieStore.getAll();
        },
        setAll(cookiesToSet) {
          try {
            cookiesToSet.forEach(({ name, value, options }) =>
              cookieStore.set(name, value, options),
            );
          } catch {
            // Server Component에서 setAll 호출 시 무시 가능
          }
        },
      },
    },
  );
}
```

### 브라우저 클라이언트 (Client Components)

```typescript
import { createBrowserClient } from "@supabase/ssr";

export function createClient() {
  return createBrowserClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
  );
}
```

### 금지 사항

- `@supabase/auth-helpers-nextjs` 사용 금지
- cookie handler에 `get`, `set`, `remove` 메서드 사용 금지 (반드시 `getAll`, `setAll`만 사용)

## 5. Next.js API Route (App Router 기준, context7: .clinerules/APIs- with-Nextjs.md)

- `app/api/your-route/route.ts`에 HTTP 메서드별 함수(`GET`, `POST` 등) export
- 표준 Web API (`Request`, `Response`) 사용
- 쿼리 파라미터: `request.nextUrl.searchParams.get("query")`
- 헤더/쿠키: `next/headers`의 `cookies()`, `headers()` 사용
- 동적 라우트: `app/api/users/[id]/route.ts` → `params.id` 활용
- 미들웨어/공통 래퍼: 인증 등은 `lib/with-auth.ts` 등에서 래퍼 함수로 구현

## 6. Tailwind CSS v4.1.4 주요 코드 스니펫

```css
@import "tailwindcss";
@theme {
  --font-display: "Satoshi";
}
```

```css
@utility tab-4 {
  tab-size: 4;
}
@variant pointer-coarse (@media (pointer: coarse));
@plugin "@tailwindcss/typography";
```

## 7. Sonner (Toast) 글로벌 설정 (context7)

- `components/ui/sonner.tsx`에서 `<Toaster />` 컴포넌트 구현
- 루트 레이아웃(`app/layout.tsx`) 또는 provider에서 `<Toaster />`를 반드시 렌더링

## 8. 기타

- **프로젝트 구조**: feature-based, App Router 중심
- **데이터 접근**: API Route → Data Access Layer → DB
- **서버/클라이언트 구분**: 서버 전용 코드는 Server Component/Route Handler에, 클라이언트 전용 코드는 반드시 `"use client"` 선언 후 작성

---

> 본 문서는 context7(프로젝트 내 .clinerules, .windsurf, README 등)에서 명시된 최신 가이드, 버전, 코드, 명령어만을 엄격히 반영하였음. 임의의 추론이나 외부 정보는 일절 포함하지 않음.



================================================
FILE: shadcn.json
================================================
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "default",
  "rsc": true,
  "tsx": true,
  "tailwind": {
    "config": "tailwind.config.js",
    "css": "app/globals.css",
    "baseColor": "neutral",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils"
  }
}



================================================
FILE: tsconfig.json
================================================
{
  "compilerOptions": {
    "target": "ES2017",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "forceConsistentCasingInFileNames": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}



================================================
FILE: .clineignore
================================================
# Dependencies
node_modules/
**/node_modules/
.pnp
.pnp.js

# Build outputs
/build/
/dist/
/.next/
/out/

# Testing
/coverage/

# Environment variables
.env.local
.env.development.local
.env.test.local
.env.production.local

# Rules
.cursor/rules/
.cursor/

.github/
.github/prompts/



================================================
FILE: .env.example
================================================
# Supabase Configuration
NEXT_PUBLIC_SUPABASE_URL=your-project-url.supabase.co
NEXT_PUBLIC_SUPABASE_ANON_KEY=your-anon-key
SUPABASE_SERVICE_ROLE_KEY=your-service-role-key
SUPABASE_STORAGE_BUCKET=platform

# Next.js Configuration
NEXT_PUBLIC_SITE_URL=http://localhost:3000

# Application Settings
NODE_ENV=development



================================================
FILE: app/globals.css
================================================
@import "tailwindcss";

:root {
  --background: #ffffff;
  --foreground: #171717;

  --card: #ffffff;
  --card-foreground: #171717;

  --popover: #ffffff;
  --popover-foreground: #171717;

  --primary: #171717;
  --primary-foreground: #ffffff;

  --secondary: #f5f5f5;
  --secondary-foreground: #171717;

  --muted: #f5f5f5;
  --muted-foreground: #737373;

  --accent: #f5f5f5;
  --accent-foreground: #171717;

  --destructive: #ef4444;
  --destructive-foreground: #ffffff;

  --border: #e5e5e5;
  --input: #e5e5e5;
  --ring: #171717;

  --radius: 0.5rem;
}

@theme inline {
  --color-background: var(--background);
  --color-foreground: var(--foreground);
  --color-card: var(--card);
  --color-card-foreground: var(--card-foreground);
  --color-popover: var(--popover);
  --color-popover-foreground: var(--popover-foreground);
  --color-primary: var(--primary);
  --color-primary-foreground: var(--primary-foreground);
  --color-secondary: var(--secondary);
  --color-secondary-foreground: var(--secondary-foreground);
  --color-muted: var(--muted);
  --color-muted-foreground: var(--muted-foreground);
  --color-accent: var(--accent);
  --color-accent-foreground: var(--accent-foreground);
  --color-destructive: var(--destructive);
  --color-destructive-foreground: var(--destructive-foreground);
  --color-border: var(--border);
  --color-input: var(--input);
  --color-ring: var(--ring);
  --radius: var(--radius);

  /* Define the default sans-serif font family */
  --font-family-sans:
    var(--font-noto-sans-kr), /* System UI fonts as fallbacks */ system-ui,
    -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto,
    /* More fallbacks including common Korean system fonts */
      "Apple SD Gothic Neo",
    "Malgun Gothic", "Nanum Gothic", /* Generic fallback */ sans-serif;
}

@media (prefers-color-scheme: dark) {
  :root {
    --background: #0a0a0a;
    --foreground: #ededed;

    --card: #0a0a0a;
    --card-foreground: #ededed;

    --popover: #0a0a0a;
    --popover-foreground: #ededed;

    --primary: #ededed;
    --primary-foreground: #0a0a0a;

    --secondary: #1a1a1a;
    --secondary-foreground: #ededed;

    --muted: #1a1a1a;
    --muted-foreground: #a3a3a3;

    --accent: #1a1a1a;
    --accent-foreground: #ededed;

    --destructive: #7f1d1d;
    --destructive-foreground: #ededed;

    --border: #262626;
    --input: #262626;
    --ring: #ededed;
  }
}

/* Custom animations */
@keyframes spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

@keyframes ping {
  75%,
  100% {
    transform: scale(2);
    opacity: 0;
  }
}

@keyframes pulse {
  50% {
    opacity: 0.5;
  }
}

@keyframes bounce {
  0%,
  100% {
    transform: translateY(-25%);
    animation-timing-function: cubic-bezier(0.8, 0, 1, 1);
  }
  50% {
    transform: none;
    animation-timing-function: cubic-bezier(0, 0, 0.2, 1);
  }
}

@layer utilities {
  .animate-spin {
    animation: spin 1s linear infinite;
  }
  .animate-ping {
    animation: ping 1s cubic-bezier(0, 0, 0.2, 1) infinite;
  }
  .animate-pulse {
    animation: pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;
  }
  .animate-bounce {
    animation: bounce 1s infinite;
  }
}

body {
  background: var(--background);
  color: var(--foreground);
  font-family: var(--font-family-sans); /* Use the CSS variable directly */
}



================================================
FILE: app/head.tsx
================================================
export default function Head() {
  return (
    <>
      <title>Vinahome:Vietnam Property Platform | Find Your Perfect Home</title>
      <meta
        name="description"
        content="Discover properties tailored for Korean expatriates in Vietnam's most popular locations"
      />
      <link rel="icon" href="/favicon.png" type="image/png" />
    </>
  );
}



================================================
FILE: app/layout.tsx
================================================
import type { Metadata } from "next";
import "./globals.css";
import { Header } from "@/components/layout/Header";
import Footer from "@/components/layout/Footer";
import { Toaster } from "@/components/ui/sonner"; // Import Toaster component for notifications
import { Noto_Sans_KR } from "next/font/google";
import StagewiseToolbarLoader from "@/components/stagewise/StagewiseToolbarLoader";

const notoSansKR = Noto_Sans_KR({
  // @ts-expect-error // Allow 'korean' subset, expect a type error here which we are overriding.
  subsets: ["korean"],
  weight: ["400", "700"],
  display: "swap",
  variable: "--font-noto-sans-kr",
  preload: false, // Good practice for CJK fonts
});

export const metadata: Metadata = {
  title: "하노이 호치민 다낭 부동산 플랫폼 | 완벽한 집 찾기",
  description:
    "하노이 호치민 다낭 부동산 플랫폼은 베트남의 한국인 거주자를 위한 맞춤형 부동산을 찾아보세요",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="ko" className={`${notoSansKR.variable} antialiased`}>
      <head>
        <link rel="icon" href="/favicon.png" type="image/png" />
      </head>
      <body
        suppressHydrationWarning
        className="bg-background text-foreground" // Use theme variables. Font is now on HTML tag.
      >
        <div className="relative flex min-h-screen flex-col bg-background">
          <StagewiseToolbarLoader />
          <Header />
          <main className="flex-1">{children}</main>
          <Toaster />
          <Footer /> {/* Add the Footer component */}
        </div>
      </body>
    </html>
  );
}



================================================
FILE: app/page.tsx
================================================
import { getPropertyListings } from "@/lib/data/property";
import { KoreanExpatriatesSection } from "@/components/sections/KoreanExpatriatesSection";
import { HeroSection } from "@/components/sections/HeroSection";
import { FeatureHighlightsSection } from "@/components/sections/FeatureHighlightsSection";
import { ExploreSection } from "@/components/sections/ExploreSection";
import { FeaturedPropertiesClient } from "@/components/featured/FeaturedPropertiesClient";

// Direct implementation at root level to avoid route group client reference issues
export default async function Home() {
  // Fetch featured properties on the server
  const rentResult = await getPropertyListings({
    propertyType: "월세",
    limit: 3,
  });
  const buyResult = await getPropertyListings({
    propertyType: "매매",
    limit: 3,
  });

  // Get total properties count on the server
  const allPropertiesResult = await getPropertyListings({ limit: 1 });

  return (
    <div className="flex flex-col w-full">
      {/* Hero Section (Server Component) */}
      <HeroSection />

      {/* Explore Section (Server Component) */}
      <ExploreSection />

      {/* Featured Properties Section (Client Component, receives server-fetched data) */}
      <FeaturedPropertiesClient
        rentProperties={rentResult.data || []}
        buyProperties={buyResult.data || []}
        totalProperties={allPropertiesResult.total || 0}
      />

      {/* Feature Highlights Section (Client Component) */}
      <FeatureHighlightsSection />

      {/* For Korean Expatriates Section (Server Component) */}
      <KoreanExpatriatesSection />
    </div>
  );
}



================================================
FILE: app/(main)/layout.tsx
================================================
import Container from "@/components/layout/Container";

export default function MainLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return <Container>{children}</Container>;
}



================================================
FILE: app/(main)/loading.tsx
================================================
import { PropertyCardSkeleton } from "@/components/property/PropertyCardSkeleton";
import { Card } from "@/components/ui/card";

export default function Loading() {
  return (
    <div className="flex flex-col w-full">
      {/* Hero Section Skeleton */}
      <section className="relative w-full min-h-[600px] rounded-lg overflow-hidden mb-16 bg-muted animate-pulse">
        <div className="relative z-20 container mx-auto px-4 py-16 flex flex-col items-center justify-center min-h-[600px]">
          <div className="h-16 bg-muted-foreground/20 rounded-lg w-3/4 max-w-2xl mb-8"></div>
          <div className="h-12 bg-muted-foreground/20 rounded-lg w-1/2 max-w-xl mb-8"></div>
          <div className="h-14 bg-muted-foreground/20 rounded-lg w-full max-w-2xl"></div>
        </div>
      </section>

      {/* Explore Section Skeleton */}
      <section className="container mx-auto px-4 mb-16">
        <div className="mb-8">
          <div className="h-10 bg-muted rounded-md w-1/3 animate-pulse mb-4"></div>
          <div className="h-6 bg-muted rounded-md w-1/2 animate-pulse"></div>
        </div>

        {/* City Cards Skeleton */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-16">
          {Array.from({ length: 6 }).map((_, index) => (
            <div
              key={index}
              className="h-[240px] bg-muted rounded-lg animate-pulse"
            ></div>
          ))}
        </div>
      </section>

      {/* Featured Properties Section Skeleton */}
      <section className="container mx-auto px-4 mb-16">
        <div className="mb-8">
          <div className="h-10 bg-muted rounded-md w-1/3 animate-pulse mb-4"></div>
          <div className="h-6 bg-muted rounded-md w-1/2 animate-pulse"></div>
        </div>

        <div className="mb-8">
          <div className="h-10 bg-muted rounded-md w-full animate-pulse"></div>
        </div>

        {/* Property Cards Skeleton */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-8">
          {Array.from({ length: 3 }).map((_, index) => (
            <PropertyCardSkeleton key={index} />
          ))}
        </div>

        {/* Property Statistics Skeleton */}
        <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
          {Array.from({ length: 3 }).map((_, index) => (
            <Card key={index} className="p-6 flex items-center animate-pulse">
              <div className="h-12 w-12 bg-muted rounded-full mr-4"></div>
              <div>
                <div className="h-8 bg-muted rounded-md w-16 mb-2"></div>
                <div className="h-4 bg-muted rounded-md w-24"></div>
              </div>
            </Card>
          ))}
        </div>
      </section>

      {/* Korean Expatriates Section Skeleton */}
      <section className="bg-muted py-12 px-4 rounded-lg mb-16">
        <div className="container mx-auto">
          <div className="h-8 bg-muted-foreground/20 rounded-md w-1/3 mx-auto mb-4"></div>
          <div className="h-4 bg-muted-foreground/20 rounded-md w-1/2 mx-auto mb-6"></div>
          <div className="h-10 bg-muted-foreground/20 rounded-md w-32 mx-auto"></div>
        </div>
      </section>
    </div>
  );
}



================================================
FILE: app/(main)/properties/page.tsx
================================================
import { getPropertyListings } from "@/lib/data/property";
import Link from "next/link";
import { Button } from "@/components/ui/button";
import {
  Card,
  CardContent,
  CardHeader,
  CardTitle,
  CardDescription,
  CardFooter,
} from "@/components/ui/card";

export const metadata = {
  title: "모든 매물 | VinaHome 부동산 플랫폼",
  description: "베트남의 모든 매물을 둘러보세요",
};

export default async function PropertiesPage() {
  const result = await getPropertyListings({ limit: 12 });

  // Format price based on property type
  const formatPrice = (price: number, type: string) => {
    if (type === "월세") {
      return `$${price.toLocaleString()}/월`;
    } else {
      return `$${price.toLocaleString()}`;
    }
  };

  return (
    <div className="py-8">
      <div className="flex justify-between items-center mb-8">
        <h1 className="text-3xl font-bold">모든 매물</h1>
        <Link href="/search">
          <Button>상세 검색</Button>
        </Link>
      </div>

      {result.data.length === 0 ? (
        <div className="text-center py-12">
          <p className="text-muted-foreground">매물을 찾을 수 없습니다.</p>
        </div>
      ) : (
        <>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-8">
            {result.data.map((property) => (
              <Card key={property.id} className="h-full flex flex-col">
                <CardHeader className="pb-2">
                  <CardTitle className="text-lg line-clamp-2">
                    {property.title}
                  </CardTitle>
                  <CardDescription>{property.address}</CardDescription>
                </CardHeader>
                <CardContent className="py-2 flex-grow">
                  <div className="space-y-2">
                    <p className="font-semibold text-lg">
                      {formatPrice(property.price, property.property_type)}
                      <span className="ml-2 text-sm font-normal text-muted-foreground">
                        {property.property_type === "월세" ? "월세" : "매매"}
                      </span>
                    </p>
                    <div className="flex space-x-4 text-sm">
                      <div>
                        {property.bedrooms}{" "}
                        <span className="text-muted-foreground">침실</span>
                      </div>
                      <div>
                        {property.bathrooms}{" "}
                        <span className="text-muted-foreground">욕실</span>
                      </div>
                      <div>
                        {property.square_footage}{" "}
                        <span className="text-muted-foreground">평방피트</span>
                      </div>
                    </div>
                    <p className="text-sm line-clamp-3 text-muted-foreground">
                      {property.description}
                    </p>
                  </div>
                </CardContent>
                <CardFooter className="pt-2">
                  <Link href={`/properties/${property.id}`} className="w-full">
                    <Button variant="outline" className="w-full">
                      상세 보기
                    </Button>
                  </Link>
                </CardFooter>
              </Card>
            ))}
          </div>

          {result.hasMore && (
            <div className="flex justify-center">
              <Link href="/search">
                <Button variant="outline">더 많은 매물 보기</Button>
              </Link>
            </div>
          )}
        </>
      )}
    </div>
  );
}



================================================
FILE: app/(main)/properties/[id]/error.tsx
================================================
"use client";

import { useEffect } from "react";
import { Button } from "@/components/ui/button";
import Link from "next/link";

interface ErrorProps {
  error: Error;
  reset: () => void;
}

export default function Error({ error, reset }: ErrorProps) {
  useEffect(() => {
    // Log the error to an error reporting service
    console.error("Property page error:", error);
  }, [error]);

  return (
    <div className="flex flex-col items-center justify-center min-h-[50vh] text-center px-4">
      <h2 className="text-2xl font-bold mb-4">Something went wrong</h2>
      <p className="text-muted-foreground mb-6">
        We encountered an error while loading this property.
      </p>
      <div className="flex flex-col sm:flex-row gap-4">
        <Button onClick={reset} variant="outline">
          Try again
        </Button>
        <Link href="/properties">
          <Button>View all properties</Button>
        </Link>
      </div>
    </div>
  );
}



================================================
FILE: app/(main)/properties/[id]/not-found.tsx
================================================
import { Button } from "@/components/ui/button";
import Link from "next/link";

export default function NotFound() {
  return (
    <div className="flex flex-col items-center justify-center min-h-[50vh] text-center px-4">
      <h2 className="text-2xl font-bold mb-4">Property Not Found</h2>
      <p className="text-muted-foreground mb-6">
        The property you are looking for does not exist or has been removed.
      </p>
      <div className="flex flex-col sm:flex-row gap-4">
        <Link href="/properties">
          <Button variant="outline">View all properties</Button>
        </Link>
        <Link href="/search">
          <Button>Search properties</Button>
        </Link>
      </div>
    </div>
  );
}



================================================
FILE: app/(main)/properties/[id]/page.tsx
================================================
import { notFound } from "next/navigation";
import { Button } from "@/components/ui/button";
import { Card } from "@/components/ui/card";
import Link from "next/link";
import PropertyDetail from "./_components/PropertyDetail";
import PropertyGallery from "./_components/PropertyGallery";
import PropertyFeatures from "./_components/PropertyFeatures";
import PropertyCosts from "./_components/PropertyCosts";
import RequestInfoForm from "./_components/RequestInfoForm";
import { getPropertyById, getPropertyListings } from "@/lib/data/property";

// Generate metadata for the property page
export async function generateMetadata({
  params,
}: {
  params: Promise<{ id: string }>;
}) {
  // Await the params Promise to get the ID
  const resolvedParams = await params;
  const property = await getPropertyById(resolvedParams.id);

  if (!property) {
    return {
      title: "매물을 찾을 수 없습니다",
      description: "요청하신 매물을 찾을 수 없습니다.",
    };
  }

  return {
    title: `${property.title} | VinaHome 부동산 플랫폼`,
    description:
      property.description?.substring(0, 160) ||
      `${property.address}에 위치한 ${property.title}의 상세 정보 보기`,
  };
}

export default async function PropertyPage({
  params,
}: {
  params: Promise<{ id: string }>;
}) {
  // Await the params Promise to get the ID
  const resolvedParams = await params;

  // Fetch the property data using the ID from URL params
  const property = await getPropertyById(resolvedParams.id);

  // If property is not found, trigger the not-found page
  if (!property) {
    notFound();
  }

  // Fetch similar properties (optional) - using same property type with different ID
  // Only fetch properties of the same type, and we'll filter out the current one client-side
  const similarPropertiesResult = await getPropertyListings({
    propertyType: property.property_type,
    limit: 4, // Request one extra since we'll filter one out
  });

  // Filter out the current property from the results and limit to 3 max
  const similarProperties = (similarPropertiesResult.data || [])
    .filter((p) => p.id !== property.id)
    .slice(0, 3);

  return (
    <div className="min-h-screen bg-[#f7f9fa]">
      <div className="container mx-auto py-10">
        {/* Back button */}
        <div className="mb-6">
          <Link href="/">
            <Button
              variant="outline"
              size="sm"
              className="rounded-full border-gray-300 bg-white shadow-sm hover:bg-gray-50"
            >
              ← 홈으로 돌아가기
            </Button>
          </Link>
        </div>
        {/* Main content */}
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-10">
          {/* Left column - Main content */}
          <div className="lg:col-span-2 space-y-8">
            {/* Gallery */}
            <div className="bg-white border border-gray-200 rounded-2xl shadow-lg p-4 sm:p-6">
              <PropertyGallery property={property} />
            </div>
            {/* Property details */}
            <div className="bg-white border border-gray-200 rounded-2xl shadow-lg p-6">
              <PropertyDetail property={property} />
            </div>
            {/* Features */}
            <div className="bg-white border border-gray-200 rounded-2xl shadow-lg p-6">
              <h2 className="text-2xl font-semibold mb-6">매물 특징</h2>
              <PropertyFeatures property={property} />
            </div>
          </div>
          {/* Right column - Sticky sidebar */}
          <div className="lg:col-span-1">
            <div className="sticky top-8 space-y-8">
              {/* Request Info card */}
              <Card className="p-6 border border-gray-200 rounded-2xl shadow-lg bg-white">
                <RequestInfoForm property={property} />
              </Card>
              {/* Costs breakdown */}
              <div className="bg-white border border-gray-200 rounded-2xl shadow-lg p-6">
                <PropertyCosts property={property} />
              </div>
              {/* Similar properties */}
              {similarProperties.length > 0 && (
                <Card className="p-6 border border-gray-200 rounded-2xl shadow-lg bg-white">
                  <h3 className="text-lg font-semibold mb-4">유사한 매물</h3>
                  <div className="space-y-4">
                    {similarProperties.map((similarProperty) => (
                      <Link
                        key={similarProperty.id}
                        href={`/properties/${similarProperty.id}`}
                        className="block"
                      >
                        <div className="border border-gray-200 rounded-lg p-4 hover:bg-muted transition-colors">
                          <h4 className="font-medium line-clamp-1">
                            {similarProperty.title}
                          </h4>
                          <p className="text-sm text-muted-foreground line-clamp-1">
                            {similarProperty.address}
                          </p>
                          <p className="font-medium mt-2">
                            ${similarProperty.price.toLocaleString()}
                            {similarProperty.property_type === "월세"
                              ? " /월"
                              : ""}
                          </p>
                        </div>
                      </Link>
                    ))}
                  </div>
                </Card>
              )}
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}



================================================
FILE: app/(main)/properties/[id]/_components/PropertyCosts.tsx
================================================
"use client";

import { PropertyListing } from "@/types/property";
import { Separator } from "@/components/ui/separator";

interface PropertyCostsProps {
  property: PropertyListing;
}

export default function PropertyCosts({ property }: PropertyCostsProps) {
  const monthlyCosts = [
    { label: "기본 임대료", amount: property.price },
    { label: "주차비", amount: 5 },
    { label: "반려동물 요금 (해당 시)", amount: 40 },
  ];

  const oneTimeCosts = [
    { label: "보증금", amount: property.price * 2 },
    { label: "신청비", amount: 50 },
    { label: "관리비", amount: 300 },
    { label: "반려동물 보증금 (해당 시)", amount: 500 },
  ];

  const formatCurrency = (amount: number) => {
    return new Intl.NumberFormat("en-US", {
      style: "currency",
      currency: "USD",
    }).format(amount);
  };

  const totalMonthlyCosts = monthlyCosts.reduce(
    (acc, cost) => acc + cost.amount,
    0,
  );

  return (
    <div className="bg-white border border-gray-200 rounded-2xl shadow-lg p-6">
      <div className="mb-6">
        <h2 className="text-xl font-bold text-gray-900">비용 및 수수료</h2>
      </div>
      {/* Monthly Costs */}
      <div className="mb-6">
        <h4 className="font-semibold mb-3 text-gray-800">월간 비용</h4>
        <div className="space-y-2">
          {monthlyCosts.map((cost) => (
            <div key={cost.label} className="flex justify-between text-sm">
              <span className="text-muted-foreground">{cost.label}</span>
              <span>{formatCurrency(cost.amount)}</span>
            </div>
          ))}
          <Separator className="my-2" />
          <div className="flex justify-between font-semibold text-gray-900">
            <span>총 월간 비용</span>
            <span>{formatCurrency(totalMonthlyCosts)}</span>
          </div>
        </div>
      </div>
      {/* One-time Costs */}
      <div className="mb-6">
        <h4 className="font-semibold mb-3 text-gray-800">일회성 비용</h4>
        <div className="space-y-2">
          {oneTimeCosts.map((cost) => (
            <div key={cost.label} className="flex justify-between text-sm">
              <span className="text-muted-foreground">{cost.label}</span>
              <span>{formatCurrency(cost.amount)}</span>
            </div>
          ))}
        </div>
      </div>
      <div className="text-xs text-muted-foreground">
        <p>
          * 표시된 가격은 예상 금액이며, 추가 비용 및 수수료가 발생할 수
          있습니다.
        </p>
        <p>* 반려동물 요금 및 보증금은 반려동물 소유자에게만 적용됩니다.</p>
        <p>* 보증금은 일반적으로 2개월치 임대료입니다.</p>
      </div>
    </div>
  );
}



================================================
FILE: app/(main)/properties/[id]/_components/PropertyDetail.tsx
================================================
"use client";

import { PropertyListing } from "@/types/property";
import { Heart, MapPin, BedDouble, Bath, Maximize2 } from "lucide-react";

interface PropertyDetailProps {
  property: PropertyListing;
}

export default function PropertyDetail({ property }: PropertyDetailProps) {
  // Format price based on property type
  const formatPrice = (price: number, type: string) => {
    if (type === "월세") {
      return `$${price.toLocaleString()}/월`;
    } else {
      return `$${price.toLocaleString()}`;
    }
  };

  return (
    <div className="bg-white border border-gray-200 rounded-2xl shadow-lg p-6 space-y-6">
      <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4">
        <div className="flex items-center gap-3">
          <h1 className="text-3xl font-bold text-gray-900 leading-tight">
            {property.title}
          </h1>
          <button
            className="ml-2 p-2 rounded-full border border-gray-200 bg-white hover:bg-gray-100 text-[#007882] shadow-sm transition-colors"
            aria-label="매물 저장"
          >
            <Heart className="h-5 w-5" />
          </button>
        </div>
        <div className="flex items-center gap-2">
          <span className="text-2xl font-bold text-[#E94F1D]">
            {formatPrice(property.price, property.property_type)}
          </span>
          <span className="ml-2 text-sm text-muted-foreground font-medium">
            {property.property_type === "월세" ? "월세" : "매매"}
          </span>
        </div>
      </div>
      <div className="flex flex-wrap items-center gap-4 text-sm text-muted-foreground mt-2">
        <span className="flex items-center gap-1">
          <MapPin className="h-4 w-4" />
          {property.address}
        </span>
        <span className="flex items-center gap-1">
          <BedDouble className="h-4 w-4" />
          {property.bedrooms} 침실
        </span>
        <span className="flex items-center gap-1">
          <Bath className="h-4 w-4" />
          {property.bathrooms} 욕실
        </span>
        <span className="flex items-center gap-1">
          <Maximize2 className="h-4 w-4" />
          {property.square_footage} 평방피트
        </span>
      </div>
      <div>
        <h3 className="text-lg font-semibold mb-2">설명</h3>
        <p className="text-gray-700 whitespace-pre-line leading-relaxed">
          {property.description}
        </p>
      </div>
      {/* Features (legacy, keep for compatibility) */}
      {Array.isArray(property.features) && property.features.length > 0 && (
        <div>
          <h3 className="text-xl font-semibold mb-2">특징</h3>
          <ul className="grid grid-cols-1 md:grid-cols-2 gap-2">
            {property.features.map((feature: string, index: number) => (
              <li key={index} className="flex items-center">
                <span className="mr-2">•</span>
                {feature}
              </li>
            ))}
          </ul>
        </div>
      )}
    </div>
  );
}



================================================
FILE: app/(main)/properties/[id]/_components/PropertyFeatures.tsx
================================================
"use client";

import { PropertyListing } from "@/types/property";
import { CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Bath, BedDouble, Home, Maximize, Wifi } from "lucide-react";

interface PropertyFeaturesProps {
  property: PropertyListing;
}

export default function PropertyFeatures({ property }: PropertyFeaturesProps) {
  const featureSections = {
    interior: [
      { icon: BedDouble, label: `${property.bedrooms} 침실` },
      { icon: Bath, label: `${property.bathrooms} 욕실` },
      { icon: Maximize, label: `${property.square_footage} 평방피트` },
      { icon: Home, label: "현대식 주방" },
      { icon: Wifi, label: "초고속 인터넷" },
    ],
    building: [
      "엘리베이터 이용 가능",
      "헬스장",
      "택배 수령 서비스",
      "보안 시스템",
      "주차 가능",
    ],
    exterior: [
      "개인 발코니",
      "정원 이용 가능",
      "BBQ 공간",
      "수영장",
      "어린이 놀이터",
    ],
    additional: [
      "24시간 보안",
      "반려동물 동반 가능",
      "대중교통 인접",
      "국제학교 인근",
      "쇼핑센터 인근",
    ],
  };

  return (
    <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
      {/* Interior Features */}
      <div className="bg-white border border-gray-200 rounded-2xl shadow-lg">
        <CardHeader>
          <CardTitle className="text-lg font-semibold">내부 특징</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="space-y-4">
            {featureSections.interior.map(({ icon: Icon, label }) => (
              <div key={label} className="flex items-center gap-3">
                <Icon className="h-5 w-5 text-muted-foreground" />
                <span>{label}</span>
              </div>
            ))}
          </div>
        </CardContent>
      </div>
      {/* Building Amenities */}
      <div className="bg-white border border-gray-200 rounded-2xl shadow-lg">
        <CardHeader>
          <CardTitle className="text-lg font-semibold">건물 편의시설</CardTitle>
        </CardHeader>
        <CardContent>
          <ul className="space-y-2">
            {featureSections.building.map((feature) => (
              <li key={feature} className="flex items-center gap-2">
                <span className="h-1.5 w-1.5 rounded-full bg-primary" />
                {feature}
              </li>
            ))}
          </ul>
        </CardContent>
      </div>
      {/* Exterior Features */}
      <div className="bg-white border border-gray-200 rounded-2xl shadow-lg">
        <CardHeader>
          <CardTitle className="text-lg font-semibold">외부 특징</CardTitle>
        </CardHeader>
        <CardContent>
          <ul className="space-y-2">
            {featureSections.exterior.map((feature) => (
              <li key={feature} className="flex items-center gap-2">
                <span className="h-1.5 w-1.5 rounded-full bg-primary" />
                {feature}
              </li>
            ))}
          </ul>
        </CardContent>
      </div>
      {/* Additional Information */}
      <div className="bg-white border border-gray-200 rounded-2xl shadow-lg">
        <CardHeader>
          <CardTitle className="text-lg font-semibold">추가 정보</CardTitle>
        </CardHeader>
        <CardContent>
          <ul className="space-y-2">
            {featureSections.additional.map((feature) => (
              <li key={feature} className="flex items-center gap-2">
                <span className="h-1.5 w-1.5 rounded-full bg-primary" />
                {feature}
              </li>
            ))}
          </ul>
        </CardContent>
      </div>
    </div>
  );
}



================================================
FILE: app/(main)/properties/[id]/_components/PropertyGallery.tsx
================================================
"use client";

import { useState } from "react";
import Image from "next/image";
import { PropertyListing, PropertyImage } from "@/types/property"; // Import PropertyImage
import { Dialog, DialogContent } from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { ChevronLeft, ChevronRight, Expand, X } from "lucide-react";

interface PropertyGalleryProps {
  // Expect the property object which includes the processed property_images array
  property: PropertyListing & {
    property_images?: (PropertyImage & { publicUrl: string | null })[];
  };
}

export default function PropertyGallery({ property }: PropertyGalleryProps) {
  const [currentImageIndex, setCurrentImageIndex] = useState(0);
  const [isFullscreen, setIsFullscreen] = useState(false);

  // Use the processed property_images array
  const images = property.property_images?.length
    ? property.property_images
    : // Provide a default structure if no images exist
      [
        {
          storage_path: "",
          publicUrl: "/assets/images/property-placeholder.jpg",
        } as PropertyImage,
      ];

  const nextImage = () => {
    setCurrentImageIndex((prev) => (prev + 1) % images.length);
  };

  const previousImage = () => {
    setCurrentImageIndex((prev) => (prev - 1 + images.length) % images.length);
  };

  // Ensure images array is not empty before accessing index
  const currentImageUrl =
    images[currentImageIndex]?.publicUrl ||
    "/assets/images/property-placeholder.jpg";
  const currentImageAlt =
    images[currentImageIndex]?.alt_text ||
    `매물 이미지 ${currentImageIndex + 1}`;

  return (
    <div className="relative bg-white border border-gray-200 rounded-2xl shadow-lg p-2 sm:p-4">
      {/* Price badge (example, can be replaced with dynamic value) */}
      <div className="absolute top-4 left-4 z-10">
        <span className="inline-block bg-[#eaf6f3] text-[#007882] text-sm font-semibold px-4 py-1 rounded-full shadow-sm border border-[#b2e2d6]">
          판매 중
        </span>
      </div>
      {/* Main Image */}
      <div className="relative aspect-[16/9] w-full overflow-hidden rounded-xl border border-gray-100">
        <Image
          src={currentImageUrl}
          alt={currentImageAlt}
          fill
          className="object-cover"
          priority={currentImageIndex === 0}
          sizes="100vw"
        />
        <Button
          variant="ghost"
          size="icon"
          className="absolute top-4 right-4 bg-white/80 hover:bg-white text-[#007882] border border-gray-200 shadow-sm"
          onClick={() => setIsFullscreen(true)}
          aria-label="전체 화면으로 보기"
        >
          <Expand className="h-5 w-5" />
        </Button>
        {images.length > 1 && (
          <>
            <Button
              variant="ghost"
              size="icon"
              className="absolute left-4 top-1/2 -translate-y-1/2 bg-white/80 hover:bg-white text-[#007882] border border-gray-200 shadow-sm"
              onClick={previousImage}
              aria-label="이전 이미지"
            >
              <ChevronLeft className="h-6 w-6" />
            </Button>
            <Button
              variant="ghost"
              size="icon"
              className="absolute right-4 top-1/2 -translate-y-1/2 bg-white/80 hover:bg-white text-[#007882] border border-gray-200 shadow-sm"
              onClick={nextImage}
              aria-label="다음 이미지"
            >
              <ChevronRight className="h-6 w-6" />
            </Button>
          </>
        )}
        <div className="absolute bottom-4 right-4 bg-white/80 px-3 py-1 rounded-full text-[#007882] text-sm border border-gray-200 shadow-sm">
          {currentImageIndex + 1} / {images.length}
        </div>
      </div>
      {/* Thumbnail Strip */}
      {images.length > 1 && (
        <div className="flex gap-2 mt-4 overflow-x-auto pb-2">
          {images.map((image, index) => (
            <button
              key={image.id || `thumb-${index}`}
              onClick={() => setCurrentImageIndex(index)}
              className={`relative w-20 h-20 flex-shrink-0 rounded-md overflow-hidden border-2 ${currentImageIndex === index ? "border-[#007882]" : "border-gray-200"}`}
              aria-label={`이미지 ${index + 1} 보기`}
            >
              <Image
                src={
                  image.publicUrl || "/assets/images/property-placeholder.jpg"
                }
                alt={image.alt_text || `썸네일 ${index + 1}`}
                fill
                className="object-cover"
                sizes="80px"
              />
            </button>
          ))}
        </div>
      )}
      {/* Fullscreen Dialog */}
      <Dialog open={isFullscreen} onOpenChange={setIsFullscreen}>
        <DialogContent className="max-w-7xl w-full h-[90vh] p-0">
          <div className="relative w-full h-full bg-white rounded-2xl">
            <Image
              src={currentImageUrl}
              alt={currentImageAlt}
              fill
              className="object-contain rounded-2xl"
              sizes="100vw"
            />
            <Button
              variant="ghost"
              size="icon"
              className="absolute top-4 right-4 bg-white/80 hover:bg-white text-[#007882] border border-gray-200 shadow-sm"
              onClick={() => setIsFullscreen(false)}
              aria-label="전체 화면 닫기"
            >
              <X className="h-5 w-5" />
            </Button>
            {images.length > 1 && (
              <>
                <Button
                  variant="ghost"
                  size="icon"
                  className="absolute left-4 top-1/2 -translate-y-1/2 bg-white/80 hover:bg-white text-[#007882] border border-gray-200 shadow-sm"
                  onClick={previousImage}
                  aria-label="이전 이미지"
                >
                  <ChevronLeft className="h-6 w-6" />
                </Button>
                <Button
                  variant="ghost"
                  size="icon"
                  className="absolute right-4 top-1/2 -translate-y-1/2 bg-white/80 hover:bg-white text-[#007882] border border-gray-200 shadow-sm"
                  onClick={nextImage}
                  aria-label="다음 이미지"
                >
                  <ChevronRight className="h-6 w-6" />
                </Button>
              </>
            )}
            <div className="absolute bottom-4 right-4 bg-white/80 px-3 py-1 rounded-full text-[#007882] text-sm border border-gray-200 shadow-sm">
              {currentImageIndex + 1} / {images.length}
            </div>
          </div>
        </DialogContent>
      </Dialog>
    </div>
  );
}



================================================
FILE: app/(main)/properties/[id]/_components/RequestInfoForm.tsx
================================================
"use client";

import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { RequestInfoSchema, RequestInfo } from "@/lib/validation/request-info";
import { toast } from "sonner";
import type { PropertyListing } from "@/types/property";

export default function RequestInfoForm({
  property,
}: {
  property: PropertyListing;
}) {
  const {
    register,
    handleSubmit,
    reset,
    formState: { errors, isSubmitting },
  } = useForm<RequestInfo>({
    resolver: zodResolver(RequestInfoSchema),
    defaultValues: {
      name: "",
      phone: "",
      email: "",
      message: `${property.title} (${property.address} 소재)에 관심이 있습니다`,
    },
  });

  const onSubmit = async (data: RequestInfo) => {
    try {
      const res = await fetch("/api/request-info", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(data),
      });
      if (!res.ok) {
        const errorData = await res.json();
        throw new Error(errorData.error || "요청을 보내지 못했습니다");
      }
      toast.success("요청이 전송되었습니다! 곧 연락드리겠습니다.");
      reset();
    } catch (err) {
      toast.error(err instanceof Error ? err.message : "문제가 발생했습니다.");
    }
  };

  return (
    <form className="space-y-4" onSubmit={handleSubmit(onSubmit)} noValidate>
      <div className="flex gap-2">
        <div className="flex-1">
          <label
            htmlFor="request-name"
            className="block text-sm font-semibold text-gray-700 mb-1"
          >
            이름
          </label>
          <input
            id="request-name"
            type="text"
            {...register("name")}
            className="w-full rounded-md border border-gray-300 px-3 py-2 bg-gray-50 focus:outline-none focus:ring-2 focus:ring-[#007882]"
            disabled={isSubmitting}
          />
          {errors.name && (
            <p className="ml-1 mt-1 text-xs text-rose-500">
              {errors.name.message}
            </p>
          )}
        </div>
        <div className="flex-1">
          <label
            htmlFor="request-phone"
            className="block text-sm font-semibold text-gray-700 mb-1"
          >
            전화번호
          </label>
          <input
            id="request-phone"
            type="tel"
            {...register("phone")}
            className="w-full rounded-md border border-gray-300 px-3 py-2 bg-gray-50 focus:outline-none focus:ring-2 focus:ring-[#007882]"
            disabled={isSubmitting}
          />
          {errors.phone && (
            <p className="ml-1 mt-1 text-xs text-rose-500">
              {errors.phone.message}
            </p>
          )}
        </div>
      </div>
      <div>
        <label
          htmlFor="request-email"
          className="block text-sm font-semibold text-gray-700 mb-1"
        >
          이메일
        </label>
        <input
          id="request-email"
          type="email"
          {...register("email")}
          className="w-full rounded-md border border-gray-300 px-3 py-2 bg-gray-50 focus:outline-none focus:ring-2 focus:ring-[#007882]"
          disabled={isSubmitting}
        />
        {errors.email && (
          <p className="ml-1 mt-1 text-xs text-rose-500">
            {errors.email.message}
          </p>
        )}
      </div>
      <div>
        <label
          htmlFor="request-message"
          className="block text-sm font-semibold text-gray-700 mb-1"
        >
          메시지
        </label>
        <textarea
          id="request-message"
          rows={4}
          {...register("message")}
          className="w-full rounded-md border border-gray-300 px-3 py-2 bg-gray-50 focus:outline-none focus:ring-2 focus:ring-[#007882]"
          disabled={isSubmitting}
        />
        {errors.message && (
          <p className="ml-1 mt-1 text-xs text-rose-500">
            {errors.message.message}
          </p>
        )}
      </div>
      <button
        type="submit"
        className="w-full bg-[#007882] hover:bg-[#006670] text-white py-3 px-6 rounded-lg font-semibold transition-colors disabled:opacity-70"
        disabled={isSubmitting}
      >
        {isSubmitting ? "전송 중..." : "정보 요청"}
      </button>
    </form>
  );
}



================================================
FILE: app/(main)/search/page.tsx
================================================
import { Suspense } from "react";
import SearchForm from "./_components/SearchForm";
import SearchResults from "./_components/SearchResults";
import { PropertyDataProvider } from "@/components/providers/PropertyDataProvider";

export const metadata = {
  title: "매물 검색 | VinaHome 부동산 플랫폼",
  description: "조건에 맞는 베트남 매물 검색",
};

// In Next.js 15.3.1, searchParams must be a Promise type
export default async function SearchPage({
  searchParams,
}: {
  searchParams: Promise<{ [key: string]: string | string[] | undefined }>;
}) {
  // Await the searchParams Promise to access its values
  const resolvedSearchParams = await searchParams;

  return (
    <PropertyDataProvider>
      <div className="py-10 bg-[#f7f9fa] min-h-screen">
        <div className="container mx-auto px-4">
          <h1 className="text-2xl font-semibold mb-8 text-center">매물 검색</h1>

          <div className="grid grid-cols-1 lg:grid-cols-4 gap-8">
            <div className="lg:col-span-1">
              <div className="bg-white border border-gray-200 rounded-2xl shadow-lg p-6">
                <SearchForm />
              </div>
            </div>

            <div className="lg:col-span-3">
              <div className="bg-white border border-gray-200 rounded-2xl shadow-lg p-6">
                <Suspense
                  fallback={
                    <div className="py-20 text-center text-muted-foreground">
                      매물 로딩 중...
                    </div>
                  }
                >
                  <SearchResults
                    searchParams={Object.fromEntries(
                      Object.entries(resolvedSearchParams).map(
                        ([key, value]) => [
                          key,
                          Array.isArray(value)
                            ? (value[0] ?? "")
                            : (value ?? ""),
                        ],
                      ),
                    )}
                  />
                </Suspense>
              </div>
            </div>
          </div>
        </div>
      </div>
    </PropertyDataProvider>
  );
}



================================================
FILE: app/(main)/search/_components/SearchForm.tsx
================================================
"use client";

import { useState, useTransition } from "react";
import { PropertyType } from "@/types/property";
import { usePropertyData } from "@/components/providers/PropertyDataProvider";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import {
  Card,
  CardContent,
  CardHeader,
  CardTitle,
  CardDescription,
  CardFooter,
} from "@/components/ui/card";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Checkbox } from "@/components/ui/checkbox"; // Import Checkbox
import { Label } from "@/components/ui/label"; // Import Label

interface SearchFormProps {
  className?: string;
  onSearch?: (searchParams: Record<string, string>) => void;
}

export default function SearchForm({ className, onSearch }: SearchFormProps) {
  const { searchParams, updateSearchParams, resetSearchParams } =
    usePropertyData();
  const [, startTransition] = useTransition();

  // Initialize form state from URL search params
  const [searchText, setSearchText] = useState(searchParams.search || "");
  const [minPrice, setMinPrice] = useState(searchParams.minPrice || "");
  const [maxPrice, setMaxPrice] = useState(searchParams.maxPrice || "");
  const [propertyType, setPropertyType] = useState<PropertyType | "any">(
    (searchParams.propertyType as PropertyType) || "any",
  );
  const [minBedrooms, setMinBedrooms] = useState(
    searchParams.minBedrooms || "",
  );
  const [minBathrooms, setMinBathrooms] = useState(
    searchParams.minBathrooms || "",
  );
  const [lat, setLat] = useState(searchParams.lat || "");
  const [lng, setLng] = useState(searchParams.lng || "");
  const [radiusMeters, setRadiusMeters] = useState(
    searchParams.radiusMeters || "5000",
  );
  // Add state for features
  const [features, setFeatures] = useState<Record<string, boolean>>({
    parking: searchParams.parking === "true",
    pool: searchParams.pool === "true",
    gym: searchParams.gym === "true",
    furnished: searchParams.furnished === "true",
  });

  // Form validation
  const [errors, setErrors] = useState<Record<string, string>>({});

  const validateForm = () => {
    const newErrors: Record<string, string> = {};

    // Validate numeric fields
    if (minPrice && isNaN(Number(minPrice))) {
      newErrors.minPrice = "유효한 숫자여야 합니다";
    }

    if (maxPrice && isNaN(Number(maxPrice))) {
      newErrors.maxPrice = "유효한 숫자여야 합니다";
    }

    if (minBedrooms && isNaN(Number(minBedrooms))) {
      newErrors.minBedrooms = "유효한 숫자여야 합니다";
    }

    if (minBathrooms && isNaN(Number(minBathrooms))) {
      newErrors.minBathrooms = "유효한 숫자여야 합니다";
    }

    if ((lat && !lng) || (!lat && lng)) {
      newErrors.location = "위도와 경도 모두 필요합니다";
    }

    if (lat && isNaN(Number(lat))) {
      newErrors.lat = "유효한 숫자여야 합니다";
    }

    if (lng && isNaN(Number(lng))) {
      newErrors.lng = "유효한 숫자여야 합니다";
    }

    if (radiusMeters && isNaN(Number(radiusMeters))) {
      newErrors.radiusMeters = "유효한 숫자여야 합니다";
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();

    if (!validateForm()) {
      return;
    }

    // Build search params
    const params: Record<string, string> = {};

    if (searchText) params.search = searchText;
    if (minPrice) params.minPrice = minPrice;
    if (maxPrice) params.maxPrice = maxPrice;
    if (propertyType && propertyType !== "any")
      params.propertyType = propertyType;
    if (minBedrooms) params.minBedrooms = minBedrooms;
    if (minBathrooms) params.minBathrooms = minBathrooms;
    if (lat && lng) {
      params.lat = lat;
      params.lng = lng;
      params.radiusMeters = radiusMeters;
    }
    // Add features to params if true
    Object.entries(features).forEach(([key, value]) => {
      if (value) {
        params[key] = "true";
      }
    });

    // If onSearch prop is provided, call it with the search params
    if (onSearch) {
      onSearch(params);
    } else {
      // Otherwise, update the search params using the provider
      startTransition(() => {
        updateSearchParams(params);
      });
    }
  };

  const handleReset = () => {
    setSearchText("");
    setMinPrice("");
    setMaxPrice("");
    setPropertyType("any");
    setMinBedrooms("");
    setMinBathrooms("");
    setLat("");
    setLng("");
    setRadiusMeters("5000");
    // Reset features state
    setFeatures({
      parking: false,
      pool: false,
      gym: false,
      furnished: false,
    });
    setErrors({});

    // Reset search params in the URL
    startTransition(() => {
      resetSearchParams();
    });
  };

  return (
    <Card className={`${className} border-gray-200 rounded-xl shadow-none`}>
      <CardHeader className="pb-2">
        <CardTitle className="text-xl font-semibold">매물 찾기</CardTitle>
        <CardDescription>조건에 맞는 베트남 매물 검색</CardDescription>
      </CardHeader>
      <CardContent>
        <form className="space-y-5" onSubmit={handleSubmit}>
          {/* Search Text */}
          <div className="space-y-2">
            <label htmlFor="search" className="text-sm font-medium">
              검색
            </label>
            <Input
              id="search"
              placeholder="키워드 입력..."
              value={searchText}
              onChange={(e) => setSearchText(e.target.value)}
            />
          </div>

          {/* Property Type */}
          <div className="space-y-2">
            <label htmlFor="propertyType" className="text-sm font-medium">
              매물 유형
            </label>
            <Select
              value={propertyType}
              onValueChange={(value) =>
                setPropertyType(value as PropertyType | "any")
              }
            >
              <SelectTrigger id="propertyType">
                <SelectValue placeholder="매물 유형 선택" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="any">모든 매물 유형</SelectItem>
                <SelectItem value="월세">월세</SelectItem>
                <SelectItem value="매매">매매</SelectItem>
              </SelectContent>
            </Select>
          </div>

          {/* Min Price */}
          <div className="space-y-2">
            <label htmlFor="minPrice" className="text-sm font-medium">
              최소 가격
            </label>
            <Input
              id="minPrice"
              placeholder="예: 50000"
              value={minPrice}
              onChange={(e) => setMinPrice(e.target.value)}
            />
            {errors.minPrice && (
              <p className="text-red-500 text-xs">{errors.minPrice}</p>
            )}
          </div>

          {/* Max Price */}
          <div className="space-y-2">
            <label htmlFor="maxPrice" className="text-sm font-medium">
              최대 가격
            </label>
            <Input
              id="maxPrice"
              placeholder="예: 100000"
              value={maxPrice}
              onChange={(e) => setMaxPrice(e.target.value)}
            />
            {errors.maxPrice && (
              <p className="text-red-500 text-xs">{errors.maxPrice}</p>
            )}
          </div>

          {/* Min Bedrooms */}
          <div className="space-y-2">
            <label htmlFor="minBedrooms" className="text-sm font-medium">
              최소 침실 수
            </label>
            <Input
              id="minBedrooms"
              placeholder="예: 2"
              value={minBedrooms}
              onChange={(e) => setMinBedrooms(e.target.value)}
            />
            {errors.minBedrooms && (
              <p className="text-red-500 text-xs">{errors.minBedrooms}</p>
            )}
          </div>

          {/* Min Bathrooms */}
          <div className="space-y-2">
            <label htmlFor="minBathrooms" className="text-sm font-medium">
              최소 욕실 수
            </label>
            <Input
              id="minBathrooms"
              placeholder="예: 1"
              value={minBathrooms}
              onChange={(e) => setMinBathrooms(e.target.value)}
            />
            {errors.minBathrooms && (
              <p className="text-red-500 text-xs">{errors.minBathrooms}</p>
            )}
          </div>

          {/* Location (Latitude) */}
          <div className="space-y-2">
            <label htmlFor="lat" className="text-sm font-medium">
              위치 (위도)
            </label>
            <Input
              id="lat"
              placeholder="예: 10.7769"
              value={lat}
              onChange={(e) => setLat(e.target.value)}
            />
            {errors.lat && <p className="text-red-500 text-xs">{errors.lat}</p>}
          </div>

          {/* Location (Longitude) */}
          <div className="space-y-2">
            <label htmlFor="lng" className="text-sm font-medium">
              위치 (경도)
            </label>
            <Input
              id="lng"
              placeholder="예: 106.7009"
              value={lng}
              onChange={(e) => setLng(e.target.value)}
            />
            {errors.lng && <p className="text-red-500 text-xs">{errors.lng}</p>}
          </div>
          {errors.location && (
            <p className="text-red-500 text-xs">{errors.location}</p>
          )}

          {/* Radius (meters) */}
          <div className="space-y-2">
            <label htmlFor="radiusMeters" className="text-sm font-medium">
              반경 (미터)
            </label>
            <Input
              id="radiusMeters"
              placeholder="예: 5000"
              value={radiusMeters}
              onChange={(e) => setRadiusMeters(e.target.value)}
            />
            {errors.radiusMeters && (
              <p className="text-red-500 text-xs">{errors.radiusMeters}</p>
            )}
          </div>

          {/* Features */}
          <div className="space-y-2">
            <label className="text-sm font-medium">시설</label>
            <div className="space-y-2 pt-1">
              {(Object.keys(features) as Array<keyof typeof features>).map(
                (featureKey) => (
                  <div key={featureKey} className="flex items-center space-x-2">
                    <Checkbox
                      id={featureKey}
                      checked={features[featureKey]}
                      onCheckedChange={(checked) =>
                        setFeatures((prev) => ({
                          ...prev,
                          [featureKey]: !!checked,
                        }))
                      }
                    />
                    <Label htmlFor={featureKey} className="font-normal">
                      {featureKey === "parking"
                        ? "주차"
                        : featureKey === "pool"
                          ? "수영장"
                          : featureKey === "gym"
                            ? "헬스장"
                            : featureKey === "furnished"
                              ? "가구 포함"
                              : featureKey}
                    </Label>
                  </div>
                ),
              )}
            </div>
          </div>

          <CardFooter className="flex flex-col sm:flex-row justify-between p-0 pt-4 space-y-2 sm:space-y-0 sm:space-x-2">
            <Button type="submit" className="w-full sm:w-auto">
              필터 적용
            </Button>
            <Button
              type="button"
              variant="outline"
              onClick={handleReset}
              className="w-full sm:w-auto"
            >
              필터 초기화
            </Button>
          </CardFooter>
        </form>
      </CardContent>
    </Card>
  );
}



================================================
FILE: app/(main)/search/_components/SearchResults.tsx
================================================
"use client";

import { useState, useEffect } from "react";
import { PropertyListing } from "@/types/property";
import { Card, CardContent } from "@/components/ui/card"; // Removed unused Card parts
import { Button } from "@/components/ui/button";
// Removed unused Link import
import { PropertyCard } from "@/components/property/PropertyCard"; // Corrected to named import

interface SearchResultsProps {
  searchParams: Record<string, string>;
  className?: string;
}

interface SearchResponse {
  success: boolean;
  data: PropertyListing[];
  pagination: {
    total: number;
    limit: number;
    offset: number;
    hasMore: boolean;
  };
}

export default function SearchResults({
  searchParams,
  className,
}: SearchResultsProps) {
  const [results, setResults] = useState<PropertyListing[]>([]);
  const [pagination, setPagination] = useState({
    total: 0,
    limit: 10,
    offset: 0,
    hasMore: false,
  });
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  const fetchResults = async (params: Record<string, string>) => {
    try {
      setLoading(true);
      setError(null);

      // Build query string
      const queryString = new URLSearchParams(params).toString();
      const response = await fetch(`/api/properties?${queryString}`);

      if (!response.ok) {
        throw new Error("매물을 가져오는데 실패했습니다");
      }

      const data: SearchResponse = await response.json();

      if (!data.success) {
        // Throw a generic error as 'message' might not exist on the response
        throw new Error("API에서 성공적이지 않은 상태를 반환했습니다");
      }

      setResults(data.data);
      setPagination(data.pagination);
    } catch (err) {
      console.error("Error fetching properties:", err);
      setError(
        err instanceof Error ? err.message : "알 수 없는 오류가 발생했습니다",
      );
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchResults(searchParams);
  }, [searchParams]);

  const loadMore = () => {
    const newOffset = pagination.offset + pagination.limit;
    const newParams = {
      ...searchParams,
      offset: newOffset.toString(),
    };

    fetchResults(newParams);
  };

  if (loading && results.length === 0) {
    return (
      <Card className={className}>
        <CardContent className="pt-6">
          <div className="flex justify-center items-center h-40">
            <div className="animate-spin h-8 w-8 border-4 border-primary border-t-transparent rounded-full"></div>
          </div>
        </CardContent>
      </Card>
    );
  }

  if (error) {
    return (
      <Card className={className}>
        <CardContent className="pt-6">
          <div className="text-center text-red-500">
            <p>오류: {error}</p>
          </div>
        </CardContent>
      </Card>
    );
  }

  if (results.length === 0) {
    return (
      <Card className={className}>
        <CardContent className="pt-6">
          <div className="text-center">
            <p className="text-muted-foreground">
              조건에 맞는 매물을 찾을 수 없습니다.
            </p>
          </div>
        </CardContent>
      </Card>
    );
  }

  return (
    <div className={className}>
      <div className="mb-4">
        <h2 className="text-xl font-semibold">
          총 ${pagination.total}개의 매물을 찾았습니다.
        </h2>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {results.map((property) => (
          <PropertyCard key={property.id} property={property} />
        ))}
      </div>

      {pagination.hasMore && (
        <div className="mt-8 flex justify-center">
          <Button onClick={loadMore} variant="outline">
            더 불러오기
          </Button>
        </div>
      )}
    </div>
  );
}

// Removed the internal PropertyCard definition



================================================
FILE: app/about/page.tsx
================================================
import { Lightbulb, MessagesSquare } from "lucide-react";

export default function AboutPage() {
  const pageContent = {
    mainHeading:
      "VinaHome은 베트남에서 당신의 꿈이 현실이 되는 완벽한 공간을 찾아드리는 프리미엄 부동산 플랫폼입니다.",
    introParagraph:
      "호치민, 하노이, 다낭 등 베트남 주요 도시의 아파트, 주택, 빌라부터 상업용 부동산에 이르기까지 엄선된 최신 매물 정보를 폭넓게 제공하며 각 지역의 생생한 생활 정보와 전문가의 깊이 있는 분석을 더해 최적의 선택을 돕습니다.",
    sections: [
      {
        icon: MessagesSquare,
        title: "건강한 부동산 생태계 조성",
        text: "VinaHome은 단순한 거래 중개를 넘어, 고객, 파트너 그리고 지역사회와 함께 성장하고 가치를 공유하는 건강한 부동산 생태계를 만들어가는 것을 핵심 철학으로 삼고 있습니다.",
      },
      {
        icon: Lightbulb,
        title: "신뢰와 혁신으로 성공적인 여정",
        text: "신뢰와 혁신을 바탕으로 VinaHome과 함께라면 베트남에서의 부동산 여정이 더욱 풍요롭고 성공적으로 펼쳐질 것입니다.",
      },
    ],
  };

  return (
    <div className="container mx-auto px-4 py-12 md:py-20 bg-white">
      <header className="text-left max-w-3xl mx-auto mb-10">
        <h1 className="text-3xl md:text-4xl text-gray-800 mb-6 text-left">
          {pageContent.mainHeading}
        </h1>
        <p className="text-gray-700 text-base md:text-lg leading-relaxed text-left">
          {pageContent.introParagraph}
        </p>
      </header>

      <div className="mx-auto my-6 flex justify-center mb-8">
        <svg
          width="60"
          height="60"
          viewBox="0 0 100 100"
          xmlns="http://www.w3.org/2000/svg"
        >
          <line
            x1="20"
            y1="80"
            x2="80"
            y2="20"
            stroke="currentColor"
            strokeWidth="2"
            className="text-gray-500"
          />
        </svg>
      </div>

      <hr className="border-gray-200 max-w-4xl mx-auto mb-8 mt-8" />

      <div className="grid md:grid-cols-2 gap-x-12 gap-y-10 max-w-4xl mx-auto items-start">
        {pageContent.sections.map((section, index) => (
          <div key={index} className="flex flex-col items-start text-left">
            <div className="mb-4">
              <section.icon className="w-10 h-10 text-neutral-600" />
            </div>
            <h2 className="text-xl font-semibold text-gray-800 mb-3">
              {section.title}
            </h2>
            <p className="text-gray-700 leading-relaxed">{section.text}</p>
          </div>
        ))}
      </div>
    </div>
  );
}



================================================
FILE: app/admin/layout.tsx
================================================
import { createClient } from "@/lib/supabase/server";
import { redirect } from "next/navigation";
import AdminSidebar from "./_components/AdminSidebar";

export const metadata = {
  title: "Admin Dashboard | Vietnam Property Platform",
  description: "Admin dashboard for managing properties and users",
};

export default async function AdminLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  const supabase = await createClient();
  const {
    data: { session },
  } = await supabase.auth.getSession();

  if (!session) {
    redirect("/auth/sign-in");
  }

  return (
    <div className="flex min-h-screen bg-gray-50">
      <AdminSidebar user={session.user} />
      <main className="flex-1 p-6 overflow-auto">{children}</main>
    </div>
  );
}



================================================
FILE: app/admin/page.tsx
================================================
import { createClient } from "@/lib/supabase/server";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";

export default async function AdminDashboardPage() {
  const supabase = await createClient();

  // Fetch basic stats for the dashboard
  const { count: propertyCount, error: propertyError } = await supabase
    .from("property_listings")
    .select("*", { count: "exact", head: true });

  // You would need to have a users table to count users
  // This is a placeholder that can be updated once that table exists
  const userCount = 0;

  return (
    <div className="space-y-6">
      <h1 className="text-3xl font-bold">Admin Dashboard</h1>

      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        <Card>
          <CardHeader className="pb-2">
            <CardTitle className="text-lg">Total Properties</CardTitle>
          </CardHeader>
          <CardContent>
            <p className="text-3xl font-bold">
              {propertyError ? "—" : propertyCount || 0}
            </p>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="pb-2">
            <CardTitle className="text-lg">Total Users</CardTitle>
          </CardHeader>
          <CardContent>
            <p className="text-3xl font-bold">{userCount}</p>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="pb-2">
            <CardTitle className="text-lg">Admin Actions</CardTitle>
          </CardHeader>
          <CardContent className="space-y-2">
            <p className="text-sm text-gray-500">
              Quick access to common tasks
            </p>
            <div className="flex flex-col space-y-2">
              <a
                href="/admin/properties"
                className="text-sm text-blue-600 hover:underline"
              >
                Manage Properties
              </a>
              <a
                href="/admin/users"
                className="text-sm text-blue-600 hover:underline"
              >
                Manage Users
              </a>
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  );
}



================================================
FILE: app/admin/_components/AdminSidebar.tsx
================================================
"use client";

import Link from "next/link";
import { User, Heart } from "lucide-react";

interface AdminSidebarProps {
  user: {
    email?: string;
    user_metadata?: {
      full_name?: string;
    };
  };
}

export default function AdminSidebar({ user }: AdminSidebarProps) {
  const fullName = user?.user_metadata?.full_name || user?.email || "User";

  return (
    <aside className="w-56 border-r bg-white h-full sticky top-0 flex flex-col items-center py-8">
      <div className="flex flex-col items-center mb-8">
        <div className="w-16 h-16 rounded-full bg-gray-200 flex items-center justify-center text-2xl font-bold text-gray-600 mb-2">
          {fullName[0]}
        </div>
        <div className="font-semibold text-base text-center break-all">
          {fullName}
        </div>
      </div>
      <nav className="w-full">
        <ul className="space-y-2">
          <li>
            <Link
              href="/admin/profile"
              className="flex items-center p-3 rounded-lg transition-colors text-gray-700 hover:bg-gray-100 w-full"
            >
              <User className="h-5 w-5 mr-3" />
              Edit Profile
            </Link>
          </li>
          <li>
            <Link
              href="/admin/saved-homes"
              className="flex items-center p-3 rounded-lg transition-colors text-gray-700 hover:bg-gray-100 w-full"
            >
              <Heart className="h-5 w-5 mr-3" />
              Saved Homes
            </Link>
          </li>
        </ul>
      </nav>
    </aside>
  );
}



================================================
FILE: app/admin/profile/page.tsx
================================================
import { createClient } from "@/lib/supabase/server";
import { redirect } from "next/navigation";
import ProfileDetails from "./_components/ProfileDetails";

export const metadata = {
  title: "관리자 프로필 | Vietnam Property Platform",
  description: "관리자 계정 정보 관리 및 설정",
};

export default async function AdminProfilePage() {
  const supabase = await createClient();

  // Check if user is authenticated
  const {
    data: { session },
  } = await supabase.auth.getSession();

  if (!session) {
    redirect("/auth/sign-in");
  }

  const user = session.user;
  const fullName = user.user_metadata?.full_name || user.email;
  const role = user.user_metadata?.role || "Admin";

  return (
    <div className="min-h-screen bg-gray-50 flex flex-col items-center justify-center px-2 sm:px-4 py-8">
      <div className="w-full max-w-2xl bg-white rounded-lg shadow p-4 sm:p-8 flex flex-col items-center">
        <div className="flex flex-col items-center mb-6 sm:mb-8 w-full">
          <div className="w-16 h-16 sm:w-20 sm:h-20 rounded-full bg-gray-200 flex items-center justify-center text-2xl sm:text-3xl font-bold text-gray-600 mb-2">
            {fullName ? fullName[0] : "?"}
          </div>
          <div className="font-semibold text-base sm:text-lg text-center break-all">
            {fullName}
          </div>
          <div className="text-gray-500 text-sm text-center">{role}</div>
        </div>
        <h1 className="text-xl sm:text-2xl font-bold mb-4 sm:mb-6 text-center w-full">
          Edit Profile
        </h1>
        <div className="w-full">
          <ProfileDetails user={user} />
        </div>
      </div>
    </div>
  );
}



================================================
FILE: app/admin/profile/_components/ProfileDetails.tsx
================================================
"use client";

import { useState } from "react";
import { Button } from "@/components/ui/button";
import { createClient } from "@/lib/supabase/client";
import { useRouter } from "next/navigation";
import { Dialog } from "@/components/ui/dialog";

interface ProfileDetailsProps {
  user: {
    id: string;
    email?: string;
    user_metadata?: {
      full_name?: string;
      phone?: string;
      role?: string;
    };
    last_sign_in_at?: string;
  };
}

export default function ProfileDetails({ user }: ProfileDetailsProps) {
  const router = useRouter();
  const supabase = createClient();
  const [isLoading, setIsLoading] = useState(false);
  const [statusMessage, setStatusMessage] = useState<{
    type: "success" | "error";
    text: string;
  } | null>(null);
  const [showEmailModal, setShowEmailModal] = useState(false);
  const [showPasswordModal, setShowPasswordModal] = useState(false);
  const [newEmail, setNewEmail] = useState(user.email || "");
  const [emailStatus, setEmailStatus] = useState<string | null>(null);
  const [passwordFields, setPasswordFields] = useState({
    current: "",
    new: "",
  });
  const [passwordStatus, setPasswordStatus] = useState<string | null>(null);

  const [formData, setFormData] = useState({
    fullName: user.user_metadata?.full_name || "",
    phone: user.user_metadata?.phone || "",
  });

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    setFormData((prev) => ({ ...prev, [name]: value }));
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setIsLoading(true);
    setStatusMessage(null);

    try {
      const { error } = await supabase.auth.updateUser({
        data: {
          full_name: formData.fullName,
          phone: formData.phone,
        },
      });

      if (error) throw error;

      setStatusMessage({
        type: "success",
        text: "프로필이 성공적으로 업데이트되었습니다.",
      });

      router.refresh();
    } catch (error) {
      setStatusMessage({
        type: "error",
        text:
          "프로필 업데이트 중 오류가 발생했습니다: " + (error as Error).message,
      });
    } finally {
      setIsLoading(false);
    }
  };

  const handleEmailSave = async (e: React.FormEvent) => {
    e.preventDefault();
    setEmailStatus(null);
    try {
      const { error } = await supabase.auth.updateUser({ email: newEmail });
      if (error) throw error;
      setEmailStatus("A confirmation email has been sent to your new address.");
      setShowEmailModal(false);
      router.refresh();
    } catch (err) {
      setEmailStatus("Failed to update email: " + (err as Error).message);
    }
  };

  const handlePasswordSave = async (e: React.FormEvent) => {
    e.preventDefault();
    setPasswordStatus(null);
    try {
      const { error } = await supabase.auth.updateUser({
        password: passwordFields.new,
      });
      if (error) throw error;
      setPasswordStatus("Password updated successfully.");
      setShowPasswordModal(false);
      setPasswordFields({ current: "", new: "" });
    } catch (err) {
      setPasswordStatus("Failed to update password: " + (err as Error).message);
    }
  };

  return (
    <>
      {/* Email Edit Modal */}
      {showEmailModal && (
        <Dialog open={showEmailModal} onOpenChange={setShowEmailModal}>
          <div className="fixed inset-0 z-50 flex items-center justify-center bg-black/30">
            <div className="bg-white rounded-lg shadow-lg p-6 w-full max-w-sm">
              <h2 className="text-lg font-bold mb-4">Edit Email</h2>
              <form onSubmit={handleEmailSave} className="space-y-4">
                <input
                  type="email"
                  className="w-full rounded-md border border-gray-300 px-3 py-2 bg-gray-50 focus:outline-none focus:ring-2 focus:ring-[#007882]"
                  value={newEmail}
                  onChange={(e) => setNewEmail(e.target.value)}
                  required
                  autoFocus
                  placeholder="Enter new email"
                  title="New email address"
                />
                {emailStatus && (
                  <div className="text-sm text-red-600">{emailStatus}</div>
                )}
                <div className="flex justify-end gap-2">
                  <Button
                    type="button"
                    variant="outline"
                    onClick={() => setShowEmailModal(false)}
                  >
                    Cancel
                  </Button>
                  <Button
                    type="submit"
                    className="bg-[#007882] hover:bg-[#005F67] text-white"
                  >
                    Save
                  </Button>
                </div>
              </form>
            </div>
          </div>
        </Dialog>
      )}
      {/* Password Edit Modal */}
      {showPasswordModal && (
        <Dialog open={showPasswordModal} onOpenChange={setShowPasswordModal}>
          <div className="fixed inset-0 z-50 flex items-center justify-center bg-black/30">
            <div className="bg-white rounded-lg shadow-lg p-6 w-full max-w-sm">
              <h2 className="text-lg font-bold mb-4">Change Password</h2>
              <form onSubmit={handlePasswordSave} className="space-y-4">
                <input
                  type="password"
                  className="w-full rounded-md border border-gray-300 px-3 py-2 bg-gray-50 focus:outline-none focus:ring-2 focus:ring-[#007882]"
                  value={passwordFields.current}
                  onChange={(e) =>
                    setPasswordFields((f) => ({
                      ...f,
                      current: e.target.value,
                    }))
                  }
                  placeholder="Current Password"
                  title="Current password"
                  autoFocus
                />
                <input
                  type="password"
                  className="w-full rounded-md border border-gray-300 px-3 py-2 bg-gray-50 focus:outline-none focus:ring-2 focus:ring-[#007882]"
                  value={passwordFields.new}
                  onChange={(e) =>
                    setPasswordFields((f) => ({ ...f, new: e.target.value }))
                  }
                  placeholder="New Password"
                  title="New password"
                  required
                />
                {passwordStatus && (
                  <div className="text-sm text-red-600">{passwordStatus}</div>
                )}
                <div className="flex justify-end gap-2">
                  <Button
                    type="button"
                    variant="outline"
                    onClick={() => setShowPasswordModal(false)}
                  >
                    Cancel
                  </Button>
                  <Button
                    type="submit"
                    className="bg-[#007882] hover:bg-[#005F67] text-white"
                  >
                    Save
                  </Button>
                </div>
              </form>
            </div>
          </div>
        </Dialog>
      )}
      <form
        onSubmit={handleSubmit}
        className="max-w-lg w-full space-y-10 bg-white border border-gray-200 rounded-xl shadow-sm p-6 sm:p-8"
        aria-label="Edit Profile Form"
      >
        {/* Email & Password */}
        <div className="space-y-6">
          <div className="flex items-center justify-between">
            <div>
              <label
                htmlFor="profile-email"
                className="block text-sm font-semibold text-gray-700"
              >
                Email
              </label>
              <div id="profile-email" className="text-gray-900 text-base">
                {user.email}
              </div>
            </div>
            <button
              type="button"
              className="text-blue-600 text-sm font-semibold hover:underline focus:underline focus:outline-none transition-colors duration-150"
              onClick={() => setShowEmailModal(true)}
              aria-label="Edit Email"
            >
              Edit
            </button>
          </div>
          <div className="flex items-center justify-between">
            <div>
              <label
                htmlFor="profile-password"
                className="block text-sm font-semibold text-gray-700"
              >
                Password
              </label>
              <div id="profile-password" className="text-gray-900 text-base">
                ********
              </div>
            </div>
            <button
              type="button"
              className="text-blue-600 text-sm font-semibold hover:underline focus:underline focus:outline-none transition-colors duration-150"
              onClick={() => setShowPasswordModal(true)}
              aria-label="Edit Password"
            >
              Edit
            </button>
          </div>
        </div>
        {/* Editable Fields */}
        <div className="space-y-6">
          <div>
            <label
              htmlFor="profile-fullname"
              className="block text-sm font-semibold text-gray-700 mb-1"
            >
              Full Name
            </label>
            <input
              id="profile-fullname"
              type="text"
              name="fullName"
              className="w-full rounded-md border border-gray-300 px-3 py-2 bg-gray-50 focus:outline-none focus:ring-2 focus:ring-[#007882] transition-colors duration-150"
              value={formData.fullName}
              onChange={handleInputChange}
              placeholder="Enter your name"
              autoComplete="name"
              aria-required="true"
            />
          </div>
          <div>
            <label
              htmlFor="profile-phone"
              className="block text-sm font-semibold text-gray-700 mb-1"
            >
              Phone
            </label>
            <input
              id="profile-phone"
              type="tel"
              name="phone"
              className="w-full rounded-md border border-gray-300 px-3 py-2 bg-gray-50 focus:outline-none focus:ring-2 focus:ring-[#007882] transition-colors duration-150"
              value={formData.phone}
              onChange={handleInputChange}
              placeholder="Enter your phone number"
              autoComplete="tel"
              aria-required="false"
            />
          </div>
        </div>
        {/* Feedback */}
        {statusMessage && (
          <div
            className={`rounded-md p-4 mt-2 text-sm ${
              statusMessage.type === "success"
                ? "bg-green-50 text-green-700"
                : "bg-red-50 text-red-700"
            }`}
            aria-live="polite"
            role="alert"
            tabIndex={-1}
          >
            {statusMessage.text}
          </div>
        )}
        {/* Save Button */}
        <div className="flex justify-end">
          <Button
            type="submit"
            className="bg-[#007882] hover:bg-[#005F67] min-w-[140px] focus:outline-none focus:ring-2 focus:ring-[#007882] focus:ring-offset-2 transition-colors duration-150 shadow-sm"
            disabled={isLoading}
            aria-label="Save Changes"
          >
            {isLoading ? "저장 중..." : "Save Changes"}
          </Button>
        </div>
      </form>
    </>
  );
}



================================================
FILE: app/admin/profile/_components/ProfileDropdown.tsx
================================================
"use client";

import { User } from "@supabase/supabase-js";
import { createClient } from "@/lib/supabase/client";
import { useRouter } from "next/navigation";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import { Button } from "@/components/ui/button";
import { LogOut, User as UserIcon } from "lucide-react";

interface ProfileDropdownProps {
  user: User;
}

export default function ProfileDropdown({ user }: ProfileDropdownProps) {
  const router = useRouter();
  const supabase = createClient();

  const handleSignOut = async () => {
    await supabase.auth.signOut();
    router.refresh();
    router.push("/");
  };

  return (
    <DropdownMenu>
      <DropdownMenuTrigger asChild>
        <Button
          variant="ghost"
          className="rounded-full h-9 w-9 p-0 overflow-hidden"
        >
          <UserIcon className="h-5 w-5" />
          <span className="sr-only">프로필</span>
        </Button>
      </DropdownMenuTrigger>
      <DropdownMenuContent align="end" className="w-56">
        <div className="px-2 py-1.5 text-sm font-medium">{user.email}</div>
        <DropdownMenuSeparator />
        <DropdownMenuItem
          className="cursor-pointer"
          onClick={() => router.push("/admin/profile")}
        >
          <UserIcon className="mr-2 h-4 w-4" />
          <span>내 프로필</span>
        </DropdownMenuItem>

        <DropdownMenuSeparator />
        <DropdownMenuItem
          className="cursor-pointer text-red-600"
          onClick={handleSignOut}
        >
          <LogOut className="mr-2 h-4 w-4" />
          <span>로그아웃</span>
        </DropdownMenuItem>
      </DropdownMenuContent>
    </DropdownMenu>
  );
}



================================================
FILE: app/admin/properties/page.tsx
================================================
import { createClient } from "@/lib/supabase/server";
import { Button } from "@/components/ui/button";
import Link from "next/link";

export const metadata = {
  title: "Property Management | Admin Dashboard",
  description: "Manage property listings on the Vietnam Property Platform",
};

export default async function AdminPropertiesPage() {
  const supabase = await createClient();

  // Fetch the latest properties with pagination
  const { data: properties, error } = await supabase
    .from("property_listings")
    .select("id, title, price, property_type, created_at")
    .order("created_at", { ascending: false })
    .limit(10);

  return (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <h1 className="text-3xl font-bold">Property Management</h1>
        <Button className="bg-[#007882] hover:bg-[#005F67]">
          Add New Property
        </Button>
      </div>

      {error ? (
        <div className="rounded-md bg-red-50 p-4">
          <p className="text-sm text-red-700">
            Error loading properties: {error.message}
          </p>
        </div>
      ) : properties && properties.length > 0 ? (
        <div className="bg-white overflow-hidden shadow rounded-lg">
          <div className="overflow-x-auto">
            <table className="min-w-full divide-y divide-gray-200">
              <thead className="bg-gray-50">
                <tr>
                  <th
                    scope="col"
                    className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
                  >
                    Title
                  </th>
                  <th
                    scope="col"
                    className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
                  >
                    Price
                  </th>
                  <th
                    scope="col"
                    className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
                  >
                    Type
                  </th>
                  <th
                    scope="col"
                    className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
                  >
                    Created
                  </th>
                  <th
                    scope="col"
                    className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider"
                  >
                    Actions
                  </th>
                </tr>
              </thead>
              <tbody className="bg-white divide-y divide-gray-200">
                {properties.map((property) => (
                  <tr key={property.id}>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <div className="text-sm font-medium text-gray-900 truncate max-w-xs">
                        {property.title}
                      </div>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <div className="text-sm text-gray-900">
                        ${property.price.toLocaleString()}
                      </div>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <span className="inline-flex text-xs leading-5 font-semibold rounded-full bg-green-100 px-2 py-1 text-green-800">
                        {property.property_type === "월세"
                          ? "Monthly Rent"
                          : "Purchase"}
                      </span>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                      {new Date(property.created_at).toLocaleDateString()}
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                      <Link
                        href={`/properties/${property.id}`}
                        className="text-blue-600 hover:text-blue-900 mr-4"
                      >
                        View
                      </Link>
                      <Link
                        href={`/admin/properties/edit/${property.id}`}
                        className="text-indigo-600 hover:text-indigo-900 mr-4"
                      >
                        Edit
                      </Link>
                      <button className="text-red-600 hover:text-red-900">
                        Delete
                      </button>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </div>
      ) : (
        <div className="bg-white rounded-lg shadow p-6 text-center">
          <p className="text-gray-500 mb-4">No properties found</p>
          <Button className="bg-[#007882] hover:bg-[#005F67]">
            Create Your First Property
          </Button>
        </div>
      )}
    </div>
  );
}



================================================
FILE: app/admin/saved-homes/page.tsx
================================================
import Link from "next/link";

export const metadata = {
  title: "Saved Homes | Vietnam Property Platform",
  description: "View and manage your saved homes",
};

export default function SavedHomesPage() {
  return (
    <div className="min-h-screen bg-white flex flex-col lg:flex-row px-0">
      <div className="hidden lg:flex w-1/3 flex-col items-end pt-16 pr-8">
        <h1 className="text-4xl font-bold text-gray-800">Saved Homes</h1>
      </div>
      <div className="flex-1 flex flex-col lg:flex-row items-start justify-start bg-white pt-16">
        <h1 className="text-3xl font-bold text-gray-800 mb-8 block lg:hidden w-full text-left px-4">
          Saved Homes
        </h1>
        <div className="flex flex-col items-center lg:items-start justify-start max-w-xl w-full px-4 lg:px-0">
          <p className="text-xl text-gray-700 mb-2 text-center lg:text-left">
            You haven&apos;t added any homes yet.
          </p>
          <p className="text-xl text-gray-700 mb-8 text-center lg:text-left">
            Start searching for properties to add now.
          </p>
          <Link
            href="/search"
            className="bg-[#E94F1D] hover:bg-[#c43e13] text-white font-semibold py-3 px-8 rounded-lg text-lg transition-colors"
          >
            Search Homes
          </Link>
        </div>
      </div>
    </div>
  );
}



================================================
FILE: app/admin/users/page.tsx
================================================
import { createClient } from "@/lib/supabase/server";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";

export const metadata = {
  title: "User Management | Admin Dashboard",
  description: "Manage users on the Vietnam Property Platform",
};

export default async function AdminUsersPage() {
  const supabase = await createClient();

  // Fetch users from Supabase Auth - this is a placeholder approach
  // In production, you might want to store additional user data in a users table
  const { data: authUsers, error } = await supabase.auth.admin
    .listUsers({
      page: 1,
      perPage: 10,
    })
    .catch((err) => {
      // Auth admin API might not be available in all environments
      console.error("Error accessing auth admin API:", err);
      return { data: null, error: err };
    });

  return (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <h1 className="text-3xl font-bold">User Management</h1>
        <Button className="bg-[#007882] hover:bg-[#005F67]">Invite User</Button>
      </div>

      {error ? (
        <Card>
          <CardHeader>
            <CardTitle className="text-red-600">Error Loading Users</CardTitle>
          </CardHeader>
          <CardContent>
            <p className="text-sm text-gray-600">
              Admin API access is limited in some environments. Please check
              your Supabase configuration.
            </p>
            <p className="text-sm text-gray-500 mt-2">
              Error details: {error.message || "Unknown error"}
            </p>
          </CardContent>
        </Card>
      ) : authUsers?.users && authUsers.users.length > 0 ? (
        <div className="bg-white overflow-hidden shadow rounded-lg">
          <div className="overflow-x-auto">
            <table className="min-w-full divide-y divide-gray-200">
              <thead className="bg-gray-50">
                <tr>
                  <th
                    scope="col"
                    className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
                  >
                    Email
                  </th>
                  <th
                    scope="col"
                    className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
                  >
                    Status
                  </th>
                  <th
                    scope="col"
                    className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
                  >
                    Created
                  </th>
                  <th
                    scope="col"
                    className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
                  >
                    Last Sign In
                  </th>
                  <th
                    scope="col"
                    className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider"
                  >
                    Actions
                  </th>
                </tr>
              </thead>
              <tbody className="bg-white divide-y divide-gray-200">
                {authUsers.users.map((user) => (
                  <tr key={user.id}>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <div className="text-sm font-medium text-gray-900">
                        {user.email}
                      </div>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      {user.confirmed_at ? (
                        <span className="inline-flex text-xs leading-5 font-semibold rounded-full bg-green-100 px-2 py-1 text-green-800">
                          Active
                        </span>
                      ) : (
                        <span className="inline-flex text-xs leading-5 font-semibold rounded-full bg-yellow-100 px-2 py-1 text-yellow-800">
                          Pending
                        </span>
                      )}
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                      {user.created_at
                        ? new Date(user.created_at).toLocaleDateString()
                        : "N/A"}
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                      {user.last_sign_in_at
                        ? new Date(user.last_sign_in_at).toLocaleDateString()
                        : "Never"}
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                      <button className="text-indigo-600 hover:text-indigo-900 mr-4">
                        Edit
                      </button>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </div>
      ) : (
        <Card>
          <CardHeader>
            <CardTitle>User Management</CardTitle>
          </CardHeader>
          <CardContent className="text-center">
            <p className="text-gray-500 mb-4">
              No users found or limited admin API access
            </p>
            <p className="text-sm text-gray-400 mb-6">
              You might need to set up a users table to store additional user
              data beyond authentication.
            </p>
            <Button className="bg-[#007882] hover:bg-[#005F67]">
              Invite First User
            </Button>
          </CardContent>
        </Card>
      )}
    </div>
  );
}



================================================
FILE: app/api/agents/register/route.ts
================================================
import { NextRequest, NextResponse } from "next/server";
import { Resend } from "resend";
import { validateAgentRegistration } from "@/lib/validation/agent";
import { registerAgent } from "@/lib/data/agent";
import AgentRegistrationEmail from "@/app/emails/AgentRegistrationEmail";
import "server-only";

// Check if RESEND_API_KEY is properly set
if (!process.env.RESEND_API_KEY) {
  console.error('RESEND_API_KEY environment variable is not set');
}

const resend = new Resend(process.env.RESEND_API_KEY);

export async function POST(request: NextRequest) {
  try {
    // Parse and validate the request body
    const body = await request.json();

    // Log the incoming request body for debugging
    console.log('Agent registration request body:', {
      ...body,
      email: body.email ? `${body.email.substring(0, 3)}***@***` : undefined, // Mask email for privacy
    });

    const validationResult = validateAgentRegistration(body);

    if (!validationResult.success) {
      console.error('Validation errors:', validationResult.error.format());
      return NextResponse.json(
        {
          success: false,
          message: "Validation failed",
          errors: validationResult.error.errors,
        },
        { status: 400 },
      );
    }

    const agentData = validationResult.data;

    try {
      // Use the data access layer to register the agent
      await registerAgent(agentData);
    } catch (error) {
      console.error("Error submitting agent registration:", error);

      // Check for unique constraint violation (email already registered)
      const errorMessage =
        error instanceof Error ? error.message : String(error);
      if (
        errorMessage.includes("duplicate key") &&
        errorMessage.includes("email")
      ) {
        return NextResponse.json(
          {
            success: false,
            message:
              "This email address is already registered. Please use a different email.",
          },
          { status: 409 },
        );
      }

      return NextResponse.json(
        {
          success: false,
          message: "Failed to submit registration",
        },
        { status: 500 },
      );
    }

    // Send email notification
    try {
      // Validate required email fields
      const adminEmail = process.env.ADMIN_EMAIL || "admin@bkmind.com";
      const fromEmail = process.env.FROM_EMAIL || "admin@bkmind.com";

      console.log('Sending email notification to:', adminEmail);

      const emailResponse = await resend.emails.send({
        from: `VinaHome <${fromEmail}>`,
        to: [adminEmail],
        cc: [agentData.email],
        subject: "New Agent Registration",
        react: AgentRegistrationEmail(agentData),
      });

      if (emailResponse.error) {
        throw new Error(`Resend API error: ${emailResponse.error.message}`);
      }

      console.log('Email sent successfully. ID:', emailResponse.data?.id);
    } catch (emailError) {
      console.error("Error sending email notification:", emailError);
      // Log detailed error information for debugging
      if (emailError instanceof Error) {
        console.error('Error details:', emailError.message);
        console.error('Error stack:', emailError.stack);
      }
      // Continue with success response even if email fails
    }

    // Registration successful
    return NextResponse.json(
      {
        success: true,
        message: "Agent registration submitted successfully",
      },
      { status: 201 },
    );
  } catch (error) {
    console.error("Unexpected error during agent registration:", error);
    return NextResponse.json(
      {
        success: false,
        message: "An unexpected error occurred",
      },
      { status: 500 },
    );
  }
}



================================================
FILE: app/api/properties/route.ts
================================================
import { NextRequest, NextResponse } from "next/server";
import { getPropertyListings, PropertySearchParams } from "@/lib/data/property";
import { PropertyType } from "@/types/property";

/**
 * GET handler for property listings
 * Supports various search and filter parameters
 */
export async function GET(request: NextRequest) {
  try {
    const searchParams = request.nextUrl.searchParams;

    // Parse search parameters
    const searchText = searchParams.get("search") || undefined;
    const minPrice = searchParams.get("minPrice")
      ? Number(searchParams.get("minPrice"))
      : undefined;
    const maxPrice = searchParams.get("maxPrice")
      ? Number(searchParams.get("maxPrice"))
      : undefined;
    const propertyType = searchParams.get("propertyType") as
      | PropertyType
      | undefined;
    const minBedrooms = searchParams.get("minBedrooms")
      ? Number(searchParams.get("minBedrooms"))
      : undefined;
    const minBathrooms = searchParams.get("minBathrooms")
      ? Number(searchParams.get("minBathrooms"))
      : undefined;
    const lat = searchParams.get("lat")
      ? Number(searchParams.get("lat"))
      : undefined;
    const lng = searchParams.get("lng")
      ? Number(searchParams.get("lng"))
      : undefined;
    const radiusMeters = searchParams.get("radiusMeters")
      ? Number(searchParams.get("radiusMeters"))
      : undefined;
    const limit = searchParams.get("limit")
      ? Number(searchParams.get("limit"))
      : 10;
    const offset = searchParams.get("offset")
      ? Number(searchParams.get("offset"))
      : 0;

    // Validate numeric parameters
    if (
      (minPrice !== undefined && isNaN(minPrice)) ||
      (maxPrice !== undefined && isNaN(maxPrice)) ||
      (minBedrooms !== undefined && isNaN(minBedrooms)) ||
      (minBathrooms !== undefined && isNaN(minBathrooms)) ||
      (lat !== undefined && isNaN(lat)) ||
      (lng !== undefined && isNaN(lng)) ||
      (radiusMeters !== undefined && isNaN(radiusMeters)) ||
      isNaN(limit) ||
      isNaN(offset)
    ) {
      return NextResponse.json(
        { success: false, message: "Invalid numeric parameter" },
        { status: 400 },
      );
    }

    // Validate property type
    if (propertyType && !["월세", "매매"].includes(propertyType)) {
      return NextResponse.json(
        { success: false, message: "Invalid property type" },
        { status: 400 },
      );
    }

    // Use the data access layer to get property listings
    const params: PropertySearchParams = {
      searchText,
      minPrice,
      maxPrice,
      propertyType,
      minBedrooms,
      minBathrooms,
      lat,
      lng,
      radiusMeters,
      limit,
      offset,
    };

    const result = await getPropertyListings(params);

    return NextResponse.json({
      success: true,
      data: result.data,
      pagination: {
        total: result.total,
        limit,
        offset,
        hasMore: result.hasMore,
      },
    });
  } catch (error) {
    console.error("Error fetching properties:", error);
    return NextResponse.json(
      { success: false, message: "Failed to fetch properties", error },
      { status: 500 },
    );
  }
}



================================================
FILE: app/api/properties/[id]/route.ts
================================================
import { NextRequest, NextResponse } from "next/server";
import { getPropertyById, updateProperty } from "@/lib/data/property";

// Updated for Next.js 15.3.1 - params must be a Promise
interface RouteParams {
  params: Promise<{
    id: string;
  }>;
}

/**
 * GET handler for retrieving a single property by ID
 */
export async function GET(request: NextRequest, { params }: RouteParams) {
  try {
    // Await the params Promise
    const resolvedParams = await params;
    const { id } = resolvedParams;

    // Validate UUID format
    const uuidRegex =
      /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;
    if (!uuidRegex.test(id)) {
      return NextResponse.json(
        { success: false, message: "Invalid property ID format" },
        { status: 400 },
      );
    }

    // Use the data access layer to get property by ID
    const data = await getPropertyById(id);

    if (!data) {
      return NextResponse.json(
        { success: false, message: "Property not found" },
        { status: 404 },
      );
    }

    return NextResponse.json({
      success: true,
      data,
    });
  } catch (error) {
    console.error("Error fetching property:", error);
    return NextResponse.json(
      { success: false, message: "Failed to fetch property", error },
      { status: 500 },
    );
  }
}

/**
 * PATCH handler for updating a property
 */
export async function PATCH(request: NextRequest, { params }: RouteParams) {
  try {
    // Await the params Promise
    const resolvedParams = await params;
    const { id } = resolvedParams;

    // Validate UUID format
    const uuidRegex =
      /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;
    if (!uuidRegex.test(id)) {
      return NextResponse.json(
        { success: false, message: "Invalid property ID format" },
        { status: 400 },
      );
    }

    // Parse request body
    const updates = await request.json();

    // Validate updates
    const allowedFields = [
      "title",
      "description",
      "price",
      "property_type",
      "bedrooms",
      "bathrooms",
      "square_footage",
      "location",
      "address",
      "features",
    ];

    // Filter out any fields that are not allowed to be updated
    const filteredUpdates = Object.keys(updates)
      .filter((key) => allowedFields.includes(key))
      .reduce(
        (obj, key) => {
          obj[key] = updates[key];
          return obj;
        },
        {} as Record<string, unknown>,
      );

    if (Object.keys(filteredUpdates).length === 0) {
      return NextResponse.json(
        { success: false, message: "No valid fields to update" },
        { status: 400 },
      );
    }

    // Check if property exists
    const existingProperty = await getPropertyById(id);

    if (!existingProperty) {
      return NextResponse.json(
        { success: false, message: "Property not found" },
        { status: 404 },
      );
    }

    // Use the data access layer to update the property
    const data = await updateProperty(id, filteredUpdates);

    return NextResponse.json({
      success: true,
      data,
      message: "Property updated successfully",
    });
  } catch (error) {
    console.error("Error updating property:", error);
    return NextResponse.json(
      { success: false, message: "Failed to update property", error },
      { status: 500 },
    );
  }
}



================================================
FILE: app/api/properties/[id]/delete/route.ts
================================================
import { NextRequest, NextResponse } from "next/server";
import { getPropertyById, deleteProperty } from "@/lib/data/property";

// Updated for Next.js 15.3.1 - params must be a Promise
interface RouteParams {
  params: Promise<{
    id: string;
  }>;
}

/**
 * DELETE handler for removing a property
 */
export async function DELETE(request: NextRequest, { params }: RouteParams) {
  try {
    // Await the params Promise
    const resolvedParams = await params;
    const { id } = resolvedParams;

    // Validate UUID format
    const uuidRegex =
      /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;
    if (!uuidRegex.test(id)) {
      return NextResponse.json(
        { success: false, message: "Invalid property ID format" },
        { status: 400 },
      );
    }

    // Check if property exists
    const existingProperty = await getPropertyById(id);

    if (!existingProperty) {
      return NextResponse.json(
        { success: false, message: "Property not found" },
        { status: 404 },
      );
    }

    // Delete property using the data access layer
    await deleteProperty(id);

    return NextResponse.json({
      success: true,
      message: "Property deleted successfully",
    });
  } catch (error) {
    console.error("Error deleting property:", error);
    return NextResponse.json(
      { success: false, message: "Failed to delete property", error },
      { status: 500 },
    );
  }
}



================================================
FILE: app/api/properties/create/route.ts
================================================
import { NextRequest, NextResponse } from "next/server";
import { createClient } from "@/lib/supabase/server"; // Keep using authenticated client for write operations
import { validatePropertyListing } from "@/lib/validation/property";

/**
 * POST handler for creating a new property
 */
export async function POST(request: NextRequest) {
  try {
    // Parse request body
    const propertyData = await request.json();

    // Validate property data
    const validation = validatePropertyListing(propertyData);
    if (!validation.valid) {
      return NextResponse.json(
        {
          success: false,
          message: "Invalid property data",
          errors: validation.errors,
        },
        { status: 400 },
      );
    }

    const supabase = await createClient();

    // Insert property
    const { data, error } = await supabase
      .from("property_listings")
      .insert(propertyData)
      .select()
      .single();

    if (error) throw error;

    return NextResponse.json(
      {
        success: true,
        data,
        message: "Property created successfully",
      },
      { status: 201 },
    );
  } catch (error) {
    console.error("Error creating property:", error);
    return NextResponse.json(
      { success: false, message: "Failed to create property", error },
      { status: 500 },
    );
  }
}



================================================
FILE: app/api/properties/nearby/route.ts
================================================
import { NextRequest, NextResponse } from "next/server";
import { createApiClient } from "@/lib/supabase/server-api";

/**
 * GET handler for finding properties near a specific location
 */
export async function GET(request: NextRequest) {
  try {
    const searchParams = request.nextUrl.searchParams;

    // Parse location parameters
    const lat = searchParams.get("lat")
      ? Number(searchParams.get("lat"))
      : undefined;
    const lng = searchParams.get("lng")
      ? Number(searchParams.get("lng"))
      : undefined;
    const radiusMeters = searchParams.get("radiusMeters")
      ? Number(searchParams.get("radiusMeters"))
      : 5000; // Default 5km
    const limit = searchParams.get("limit")
      ? Number(searchParams.get("limit"))
      : 10;
    const offset = searchParams.get("offset")
      ? Number(searchParams.get("offset"))
      : 0;

    // Validate required parameters
    if (lat === undefined || lng === undefined) {
      return NextResponse.json(
        { success: false, message: "Latitude and longitude are required" },
        { status: 400 },
      );
    }

    // Validate numeric parameters
    if (
      isNaN(lat) ||
      isNaN(lng) ||
      isNaN(radiusMeters) ||
      isNaN(limit) ||
      isNaN(offset)
    ) {
      return NextResponse.json(
        { success: false, message: "Invalid numeric parameter" },
        { status: 400 },
      );
    }

    const supabase = await createApiClient();

    // Use the get_properties_with_distance function
    const { data, error, count } = await supabase
      .rpc("get_properties_with_distance", {
        lat,
        lng,
      })
      .lt("distance_meters", radiusMeters)
      .range(offset, offset + limit - 1)
      .select("*");

    if (error) throw error;

    return NextResponse.json({
      success: true,
      data,
      pagination: {
        total: count || 0,
        limit,
        offset,
        hasMore: (count || 0) > offset + limit,
      },
    });
  } catch (error) {
    console.error("Error fetching nearby properties:", error);
    return NextResponse.json(
      { success: false, message: "Failed to fetch nearby properties", error },
      { status: 500 },
    );
  }
}



================================================
FILE: app/api/properties/search/route.ts
================================================
import { NextRequest, NextResponse } from "next/server";
import { createApiClient } from "@/lib/supabase/server-api";

/**
 * POST handler for advanced property search
 * Supports searching by features and other complex criteria
 */
export async function POST(request: NextRequest) {
  try {
    // Parse request body
    const searchCriteria = await request.json();

    // Extract search parameters
    const {
      searchText,
      minPrice,
      maxPrice,
      propertyType,
      minBedrooms,
      minBathrooms,
      features,
      lat,
      lng,
      radiusMeters,
      limit = 10,
      offset = 0,
    } = searchCriteria;

    // Validate property type
    if (propertyType && !["월세", "매매"].includes(propertyType)) {
      return NextResponse.json(
        { success: false, message: "Invalid property type" },
        { status: 400 },
      );
    }

    const supabase = await createApiClient();

    // Start building the query
    let query = supabase
      .from("property_listings")
      .select("*", { count: "exact" });

    // Apply basic filters
    if (searchText) {
      query = query.or(
        `title.ilike.%${searchText}%,description.ilike.%${searchText}%`,
      );
    }

    if (minPrice !== undefined) {
      query = query.gte("price", minPrice);
    }

    if (maxPrice !== undefined) {
      query = query.lte("price", maxPrice);
    }

    if (propertyType) {
      query = query.eq("property_type", propertyType);
    }

    if (minBedrooms !== undefined) {
      query = query.gte("bedrooms", minBedrooms);
    }

    if (minBathrooms !== undefined) {
      query = query.gte("bathrooms", minBathrooms);
    }

    // Apply feature filters
    if (features && Object.keys(features).length > 0) {
      // For each feature, add a containment check
      Object.entries(features).forEach(([feature, value]) => {
        if (value === true) {
          // Check if the feature exists and is true
          query = query.contains("features", { [feature]: true });
        }
      });
    }

    // If location parameters are provided, we need to use a different approach
    // since we can't easily combine the RPC function with other filters
    if (lat !== undefined && lng !== undefined) {
      // First, get all properties that match our filters
      const { data: filteredProperties, error: filterError } = await query;

      if (filterError) throw filterError;

      if (!filteredProperties || filteredProperties.length === 0) {
        return NextResponse.json({
          success: true,
          data: [],
          pagination: {
            total: 0,
            limit,
            offset,
            hasMore: false,
          },
        });
      }

      // Get the IDs of the filtered properties
      const propertyIds = filteredProperties.map((p) => p.id);

      // Now use the search_properties function to get properties with distance
      const { data, error, count } = await supabase
        .rpc("search_properties", {
          search_text: null, // We've already filtered by search text
          min_price: null, // We've already filtered by price
          max_price: null,
          property_type_filter: null, // We've already filtered by property type
          min_bedrooms: null, // We've already filtered by bedrooms
          min_bathrooms: null, // We've already filtered by bathrooms
          lat,
          lng,
          radius_meters: radiusMeters || 5000, // Default 5km radius
        })
        .in("id", propertyIds) // Only include properties that matched our filters
        .range(offset, offset + limit - 1)
        .order("distance_meters", { ascending: true });

      if (error) throw error;

      return NextResponse.json({
        success: true,
        data,
        pagination: {
          total: count || 0,
          limit,
          offset,
          hasMore: (count || 0) > offset + limit,
        },
      });
    }

    // Apply pagination and ordering
    const { data, error, count } = await query
      .range(offset, offset + limit - 1)
      .order("created_at", { ascending: false });

    if (error) throw error;

    return NextResponse.json({
      success: true,
      data,
      pagination: {
        total: count || 0,
        limit,
        offset,
        hasMore: (count || 0) > offset + limit,
      },
    });
  } catch (error) {
    console.error("Error searching properties:", error);
    return NextResponse.json(
      { success: false, message: "Failed to search properties", error },
      { status: 500 },
    );
  }
}



================================================
FILE: app/api/properties/stats/route.ts
================================================
import { NextResponse } from "next/server";
import { createApiClient } from "@/lib/supabase/server-api";

/**
 * GET handler for property statistics
 * Returns counts by property type, price ranges, etc.
 */
export async function GET() {
  try {
    const supabase = await createApiClient();

    // Get total count
    const { count: totalCount, error: countError } = await supabase
      .from("property_listings")
      .select("*", { count: "exact", head: true });

    if (countError) throw countError;

    // Get all property listings (grouping to be done in JS if needed)
    const { data: allProperties, error: allPropertiesError } = await supabase
      .from("property_listings")
      .select("*");

    if (allPropertiesError) throw allPropertiesError;

    // Format price ranges
    const priceRanges = [
      { min: 0, max: 1000, count: 0 },
      { min: 1000, max: 2000, count: 0 },
      { min: 2000, max: 3000, count: 0 },
      { min: 3000, max: 5000, count: 0 },
      { min: 5000, max: 10000, count: 0 },
      { min: 10000, max: null, count: 0 },
    ];

    // Count properties in each price range
    for (const range of priceRanges) {
      const { count, error } = await supabase
        .from("property_listings")
        .select("*", { count: "exact", head: true })
        .gte("price", range.min)
        .lt("price", range.max || 1000000000); // Use a very large number if max is null

      if (error) throw error;
      range.count = count || 0;
    }

    return NextResponse.json({
      success: true,
      data: {
        totalCount,
        allProperties,
        priceRanges,
      },
    });
  } catch (error) {
    console.error("Error fetching property statistics:", error);
    return NextResponse.json(
      { success: false, message: "Failed to fetch property statistics", error },
      { status: 500 },
    );
  }
}



================================================
FILE: app/api/request-info/route.ts
================================================
import { NextRequest, NextResponse } from "next/server";
import { Resend } from "resend";
import { RequestInfoSchema } from "@/lib/validation/request-info";
import RequestInfoEmail from "@/app/emails/RequestInfoEmail";

const resend = new Resend(process.env.RESEND_API_KEY);

export async function POST(req: NextRequest) {
  try {
    const body = await req.json();
    const result = RequestInfoSchema.safeParse(body);

    if (!result.success) {
      return NextResponse.json(
        { error: result.error.format() },
        { status: 400 },
      );
    }

    const { name, email, phone, message } = result.data;

    const data = await resend.emails.send({
      from: "admin@bkmind.com",
      to: ["admin@bkmind.com"],
      cc: [email],
      subject: "Property Info Request",
      react: RequestInfoEmail({ name, email, phone, message }),
    });

    return NextResponse.json({ data });
  } catch (error) {
    return NextResponse.json(
      { error: error instanceof Error ? error.message : "Server error" },
      { status: 500 },
    );
  }
}



================================================
FILE: app/api/test-db/route.ts
================================================
import { NextResponse } from "next/server";
import { createApiClient } from "@/lib/supabase/server-api";

export async function GET() {
  try {
    const supabase = await createApiClient();

    // Simple query to test connection
    const { data, error } = await supabase
      .from("property_listings")
      .select("count()", { count: "exact" })
      .limit(1);

    if (error) throw error;

    return NextResponse.json({
      success: true,
      message: "Database connection successful",
      count: data.length > 0 ? data[0].count : 0,
    });
  } catch (error) {
    console.error("Database connection error:", error);
    return NextResponse.json(
      { success: false, message: "Database connection failed", error },
      { status: 500 },
    );
  }
}



================================================
FILE: app/auth/callback/route.ts
================================================
import { NextResponse } from 'next/server';
import { createClient } from '@/lib/supabase/server';

export async function GET(request: Request) {
  const { searchParams, origin } = new URL(request.url);
  const code = searchParams.get('code');
  // if "next" is in param, use it as the redirect URL
  let next = searchParams.get('next') ?? '/';

  if (!next.startsWith('/')) {
    // if "next" is not a relative URL, use the default
    next = '/';
  }

  if (code) {
    const supabase = await createClient();
    const { error } = await supabase.auth.exchangeCodeForSession(code);
    if (!error) {
      const forwardedHost = request.headers.get('x-forwarded-host'); // original origin before load balancer
      const isLocalEnv = process.env.NODE_ENV === 'development';
      if (isLocalEnv) {
        // we can be sure that there is no load balancer in between, so no need to watch for X-Forwarded-Host
        return NextResponse.redirect(`${origin}${next}`);
      } else if (forwardedHost) {
        return NextResponse.redirect(`https://${forwardedHost}${next}`);
      } else {
        return NextResponse.redirect(`${origin}${next}`);
      }
    }
  }

  // return the user to an error page with instructions
  return NextResponse.redirect(`${origin}/auth/error`);
}



================================================
FILE: app/auth/confirm/route.ts
================================================
import { createClient } from "@/lib/supabase/server";
import { type EmailOtpType } from "@supabase/supabase-js";
import { redirect } from "next/navigation";
import { type NextRequest } from "next/server";

export async function GET(request: NextRequest) {
  const { searchParams } = new URL(request.url);
  const token_hash = searchParams.get("token_hash");
  const type = searchParams.get("type") as EmailOtpType | null;
  const next = searchParams.get("next") ?? "/auth/sign-in";

  if (token_hash && type) {
    const supabase = await createClient();

    const { error } = await supabase.auth.verifyOtp({
      type,
      token_hash,
    });
    if (!error) {
      redirect(next);
    } else {
      redirect(`/auth/error?error=${error?.message}`);
    }
  }

  redirect(`/auth/error?error=No token hash or type`);
}



================================================
FILE: app/auth/error/page.tsx
================================================
"use client";

import Link from "next/link";
import { Suspense } from "react";
import { useSearchParams } from "next/navigation";

// Extract the error message part into a separate component with useSearchParams
function ErrorMessage() {
  const searchParams = useSearchParams();
  const error = searchParams.get("error");

  return (
    <p className="text-[#D32F2F] text-base leading-relaxed">
      {error || "An error occurred during authentication"}
    </p>
  );
}

export default function AuthErrorPage() {
  return (
    <div className="min-h-screen bg-gray-50 flex flex-col items-center justify-center px-4 sm:px-6 lg:px-8">
      <div className="w-full max-w-lg">
        <h1 className="text-4xl font-bold text-[#2A2A33] text-center tracking-tight mb-2">
          Authentication Error
        </h1>
        <p className="text-lg text-center text-[#54545A] mb-8">
          There was a problem with your authentication
        </p>

        <div className="bg-white rounded-xl shadow-lg p-8">
          <div className="bg-[#FDE7E7] rounded-lg p-6 mb-6">
            <h3 className="text-[#B71C1C] text-xl font-semibold mb-3">
              Error Details
            </h3>
            {/* Wrap the component using useSearchParams in a Suspense boundary */}
            <Suspense
              fallback={
                <p className="text-[#D32F2F] text-base leading-relaxed">
                  Loading error details...
                </p>
              }
            >
              <ErrorMessage />
            </Suspense>
          </div>

          <div className="border-t border-gray-200 pt-6">
            <Link
              href="/auth/sign-in"
              className="block w-full bg-[#006AFF] hover:bg-[#0053C6] text-white font-semibold py-3 px-4 rounded-lg text-center transition duration-150"
            >
              Back to Sign In
            </Link>
          </div>
        </div>
      </div>
    </div>
  );
}



================================================
FILE: app/auth/forgot-password/page.tsx
================================================
"use client";

import { useState } from "react";
import Link from "next/link";
import { createClient } from "@/lib/supabase/client";

export default function ForgotPasswordPage() {
  const [email, setEmail] = useState("");
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [success, setSuccess] = useState(false);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setIsLoading(true);
    setError(null);

    try {
      const supabase = createClient();
      const { error } = await supabase.auth.resetPasswordForEmail(email, {
        redirectTo: `${window.location.origin}/auth/update-password`,
      });

      if (error) {
        throw error;
      }

      setSuccess(true);
    } catch (err) {
      setError(err instanceof Error ? err.message : "An error occurred");
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="min-h-screen bg-gray-50 flex flex-col items-center justify-center px-4 sm:px-6 lg:px-8">
      <div className="w-full max-w-lg">
        <h1 className="text-4xl font-bold text-[#2A2A33] text-center tracking-tight mb-2">
          Reset your password
        </h1>
        <p className="text-lg text-center text-[#54545A] mb-8">
          Enter your email address and we&apos;ll send you instructions
        </p>

        <div className="bg-white rounded-xl shadow-lg p-8">
          {success ? (
            <div className="bg-[#E6F4EA] rounded-lg p-6">
              <h3 className="text-[#1B5E20] text-xl font-semibold mb-3">
                Check your email
              </h3>
              <p className="text-[#2E7D32] text-base leading-relaxed">
                We&apos;ve sent password reset instructions to your email
                address.
              </p>
            </div>
          ) : (
            <form className="space-y-6" onSubmit={handleSubmit}>
              <div>
                <label
                  htmlFor="email"
                  className="block text-[#2A2A33] text-sm font-semibold mb-2"
                >
                  Email address
                </label>
                <input
                  id="email"
                  name="email"
                  type="email"
                  autoComplete="email"
                  required
                  value={email}
                  onChange={(e) => setEmail(e.target.value)}
                  className="w-full px-4 py-3 rounded-lg border border-gray-300 focus:border-[#006AFF] focus:ring-[#006AFF] focus:ring-opacity-50 focus:outline-none transition duration-150"
                  placeholder="Enter your email"
                />
              </div>

              {error && (
                <div className="bg-[#FDE7E7] rounded-lg p-6">
                  <p className="text-[#B71C1C] text-base">{error}</p>
                </div>
              )}

              <button
                type="submit"
                disabled={isLoading}
                className="w-full bg-[#006AFF] hover:bg-[#0053C6] text-white font-semibold py-3 px-4 rounded-lg transition duration-150 disabled:opacity-50 disabled:cursor-not-allowed"
              >
                {isLoading ? "Sending..." : "Send reset instructions"}
              </button>
            </form>
          )}

          <div className="border-t border-gray-200 mt-6 pt-6">
            <div className="flex justify-center">
              <Link
                href="/auth/sign-in"
                className="inline-flex items-center text-[#006AFF] hover:text-[#0053C6] font-semibold"
              >
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  className="h-5 w-5 mr-2"
                  viewBox="0 0 20 20"
                  fill="currentColor"
                >
                  <path
                    fillRule="evenodd"
                    d="M9.707 16.707a1 1 0 01-1.414 0l-6-6a1 1 0 010-1.414l6-6a1 1 0 011.414 1.414L5.414 9H17a1 1 0 110 2H5.414l4.293 4.293a1 1 0 010 1.414z"
                    clipRule="evenodd"
                  />
                </svg>
                Back to sign in
              </Link>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}



================================================
FILE: app/auth/reset-password/route.ts
================================================
import { createServerClient } from "@supabase/ssr";
import { NextResponse } from "next/server";

export async function GET(request: Request) {
  const requestUrl = new URL(request.url);
  const code = requestUrl.searchParams.get("code");

  // Return empty response if code is missing
  if (!code) {
    return new Response(null, { status: 400 });
  }

  // Create response object for redirect
  const response = NextResponse.redirect(
    new URL("/auth/update-password", requestUrl.origin),
  );

  // Create Supabase server client
  const supabase = createServerClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
    {
      cookies: {
        get(name) {
          return request.headers
            .get("cookie")
            ?.split("; ")
            .find((row) => row.startsWith(`${name}=`))
            ?.split("=")?.[1];
        },
        set(name, value, options) {
          // Set cookies on the NextResponse object directly
          response.cookies.set({
            name,
            value,
            ...options,
          });
        },
        remove(name, options) {
          // Delete cookies on the NextResponse object directly
          response.cookies.delete({
            name,
            ...options,
          });
        },
      },
    },
  );

  // Exchange the code for a session
  await supabase.auth.exchangeCodeForSession(code);

  // Return the response with the updated cookies
  return response;
}



================================================
FILE: app/auth/sign-in/page.tsx
================================================
import { createClient } from "@/lib/supabase/server";
import { redirect } from "next/navigation";
import SignInForm from "./_components/SignInForm";
import GoogleSignInButton from "@/components/auth/GoogleSignInButton";

export default async function SignInPage() {
  const supabase = await createClient();
  const {
    data: { session },
  } = await supabase.auth.getSession();

  if (session) {
    redirect("/");
  }

  return (
    <div className="flex min-h-screen flex-col items-center justify-center py-12 sm:px-6 lg:px-8">
      <div className="sm:mx-auto sm:w-full sm:max-w-md">
        <h2 className="mt-6 text-center text-3xl font-bold tracking-tight text-gray-900">
          계정에 로그인
        </h2>
      </div>
      <div className="mt-8 sm:mx-auto sm:w-full sm:max-w-md">
        <div className="bg-white px-4 py-8 shadow sm:rounded-lg sm:px-10">
          <div className="mb-6">
            <GoogleSignInButton>Google로 로그인</GoogleSignInButton>
          </div>
          <div className="relative mb-6">
            <div className="absolute inset-0 flex items-center">
              <div className="w-full border-t border-gray-300" />
            </div>
            <div className="relative flex justify-center text-sm">
              <span className="bg-white px-2 text-gray-500">
                또는 다음으로 계속
              </span>
            </div>
          </div>
          <SignInForm />
        </div>
      </div>
    </div>
  );
}



================================================
FILE: app/auth/sign-in/_components/SignInForm.tsx
================================================
"use client";

import { createClient } from "@/lib/supabase/client";
import { zodResolver } from "@hookform/resolvers/zod";
import { useForm } from "react-hook-form";
import { z } from "zod";
import { useState, useEffect } from "react";
import { useRouter, useSearchParams } from "next/navigation";
import Link from "next/link";

const signInSchema = z.object({
  email: z.string().email("Invalid email address"),
  password: z.string().min(6, "Password must be at least 6 characters"),
});

type SignInFormData = z.infer<typeof signInSchema>;

export default function SignInForm() {
  const [error, setError] = useState<string | null>(null);
  const [isLoading, setIsLoading] = useState(false);
  const [returnTo, setReturnTo] = useState<string>("/");
  const router = useRouter();
  const searchParams = useSearchParams();
  const supabase = createClient();

  useEffect(() => {
    // Get returnTo from URL parameters if it exists
    const returnPath = searchParams.get("returnTo");
    if (returnPath) {
      setReturnTo(returnPath);
    }
  }, [searchParams]);

  const {
    register,
    handleSubmit,
    formState: { errors },
  } = useForm<SignInFormData>({
    resolver: zodResolver(signInSchema),
  });

  const onSubmit = async (data: SignInFormData) => {
    try {
      setIsLoading(true);
      setError(null);

      const { error } = await supabase.auth.signInWithPassword({
        email: data.email,
        password: data.password,
      });

      if (error) {
        throw error;
      }

      router.refresh();
      router.push(returnTo);
    } catch (err) {
      setError(err instanceof Error ? err.message : "An error occurred");
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <form onSubmit={handleSubmit(onSubmit)} className="space-y-6">
      <div>
        <label
          htmlFor="email"
          className="block text-sm font-medium text-gray-700"
        >
          이메일 주소
        </label>
        <div className="mt-1">
          <input
            id="email"
            type="email"
            autoComplete="email"
            disabled={isLoading}
            {...register("email")}
            className="block w-full appearance-none rounded-md border border-gray-300 px-3 py-2 placeholder-gray-400 shadow-sm focus:border-indigo-500 focus:outline-none focus:ring-indigo-500 sm:text-sm"
          />
          {errors.email && (
            <p className="mt-1 text-sm text-red-600">{errors.email.message}</p>
          )}
        </div>
      </div>

      <div>
        <label
          htmlFor="password"
          className="block text-sm font-medium text-gray-700"
        >
          비밀번호
        </label>
        <div className="mt-1">
          <input
            id="password"
            type="password"
            autoComplete="current-password"
            disabled={isLoading}
            {...register("password")}
            className="block w-full appearance-none rounded-md border border-gray-300 px-3 py-2 placeholder-gray-400 shadow-sm focus:border-indigo-500 focus:outline-none focus:ring-indigo-500 sm:text-sm"
          />
          {errors.password && (
            <p className="mt-1 text-sm text-red-600">
              {errors.password.message}
            </p>
          )}
        </div>
      </div>

      {error && (
        <div className="rounded-md bg-red-50 p-4">
          <div className="flex">
            <div className="ml-3">
              <h3 className="text-sm font-medium text-red-800">{error}</h3>
            </div>
          </div>
        </div>
      )}

      <div className="flex items-center justify-between">
        <div className="text-sm">
          <Link
            href="/auth/forgot-password"
            className="font-medium text-indigo-600 hover:text-indigo-500"
          >
            비밀번호를 잊으셨나요?
          </Link>
        </div>
        <div className="text-sm">
          <Link
            href="/auth/sign-up"
            className="font-medium text-indigo-600 hover:text-indigo-500"
          >
            계정이 없으신가요?
          </Link>
        </div>
      </div>

      <div>
        <button
          type="submit"
          disabled={isLoading}
          className="flex w-full justify-center rounded-md border border-transparent bg-indigo-600 px-4 py-2 text-sm font-medium text-white shadow-sm hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 disabled:opacity-50"
        >
          {isLoading ? "로그인 중..." : "로그인"}
        </button>
      </div>
    </form>
  );
}



================================================
FILE: app/auth/sign-up/page.tsx
================================================
import { createClient } from "@/lib/supabase/server";
import { redirect } from "next/navigation";
import SignUpForm from "./_components/SignUpForm";
import GoogleSignInButton from "@/components/auth/GoogleSignInButton";

export default async function SignUpPage() {
  const supabase = await createClient();
  const {
    data: { session },
  } = await supabase.auth.getSession();

  if (session) {
    redirect("/");
  }

  return (
    <div className="flex min-h-screen flex-col items-center justify-center py-12 sm:px-6 lg:px-8">
      <div className="sm:mx-auto sm:w-full sm:max-w-md">
        <h2 className="mt-6 text-center text-3xl font-bold tracking-tight text-gray-900">
          계정 만들기
        </h2>
      </div>
      <div className="mt-8 sm:mx-auto sm:w-full sm:max-w-md">
        <div className="bg-white px-4 py-8 shadow sm:rounded-lg sm:px-10">
          <div className="mb-6">
            <GoogleSignInButton>Google로 가입</GoogleSignInButton>
          </div>
          <div className="relative mb-6">
            <div className="absolute inset-0 flex items-center">
              <div className="w-full border-t border-gray-300" />
            </div>
            <div className="relative flex justify-center text-sm">
              <span className="bg-white px-2 text-gray-500">
                또는 다음으로 계속
              </span>
            </div>
          </div>
          <SignUpForm />
        </div>
      </div>
    </div>
  );
}



================================================
FILE: app/auth/sign-up/_components/SignUpForm.tsx
================================================
"use client";

import { createClient } from "@/lib/supabase/client";
import { zodResolver } from "@hookform/resolvers/zod";
import { useForm } from "react-hook-form";
import { z } from "zod";
import { useState } from "react";
import { useRouter } from "next/navigation";
import Link from "next/link";

const signUpSchema = z
  .object({
    email: z.string().email("유효하지 않은 이메일 주소입니다"),
    password: z.string().min(6, "비밀번호는 6자 이상이어야 합니다"),
    confirmPassword: z.string(),
  })
  .refine((data) => data.password === data.confirmPassword, {
    message: "비밀번호가 일치하지 않습니다",
    path: ["confirmPassword"],
  });

type SignUpFormData = z.infer<typeof signUpSchema>;

export default function SignUpForm() {
  const [error, setError] = useState<string | null>(null);
  const [isLoading, setIsLoading] = useState(false);
  const router = useRouter();
  const supabase = createClient();

  const {
    register,
    handleSubmit,
    formState: { errors },
  } = useForm<SignUpFormData>({
    resolver: zodResolver(signUpSchema),
  });

  const onSubmit = async (data: SignUpFormData) => {
    try {
      setIsLoading(true);
      setError(null);

      const { error } = await supabase.auth.signUp({
        email: data.email,
        password: data.password,
        options: {
          emailRedirectTo: `${window.location.origin}/auth/confirm`,
        },
      });

      if (error) {
        throw error;
      }

      router.push("/auth/sign-up-success");
    } catch (err) {
      setError(err instanceof Error ? err.message : "An error occurred");
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <form onSubmit={handleSubmit(onSubmit)} className="space-y-6">
      <div>
        <label
          htmlFor="email"
          className="block text-sm font-medium text-gray-700"
        >
          이메일 주소
        </label>
        <div className="mt-1">
          <input
            id="email"
            type="email"
            autoComplete="email"
            disabled={isLoading}
            {...register("email")}
            className="block w-full appearance-none rounded-md border border-gray-300 px-3 py-2 placeholder-gray-400 shadow-sm focus:border-indigo-500 focus:outline-none focus:ring-indigo-500 sm:text-sm"
          />
          {errors.email && (
            <p className="mt-1 text-sm text-red-600">{errors.email.message}</p>
          )}
        </div>
      </div>

      <div>
        <label
          htmlFor="password"
          className="block text-sm font-medium text-gray-700"
        >
          비밀번호
        </label>
        <div className="mt-1">
          <input
            id="password"
            type="password"
            autoComplete="new-password"
            disabled={isLoading}
            {...register("password")}
            className="block w-full appearance-none rounded-md border border-gray-300 px-3 py-2 placeholder-gray-400 shadow-sm focus:border-indigo-500 focus:outline-none focus:ring-indigo-500 sm:text-sm"
          />
          {errors.password && (
            <p className="mt-1 text-sm text-red-600">
              {errors.password.message}
            </p>
          )}
        </div>
      </div>

      <div>
        <label
          htmlFor="confirmPassword"
          className="block text-sm font-medium text-gray-700"
        >
          비밀번호 확인
        </label>
        <div className="mt-1">
          <input
            id="confirmPassword"
            type="password"
            autoComplete="new-password"
            disabled={isLoading}
            {...register("confirmPassword")}
            className="block w-full appearance-none rounded-md border border-gray-300 px-3 py-2 placeholder-gray-400 shadow-sm focus:border-indigo-500 focus:outline-none focus:ring-indigo-500 sm:text-sm"
          />
          {errors.confirmPassword && (
            <p className="mt-1 text-sm text-red-600">
              {errors.confirmPassword.message}
            </p>
          )}
        </div>
      </div>

      {error && (
        <div className="rounded-md bg-red-50 p-4">
          <div className="flex">
            <div className="ml-3">
              <h3 className="text-sm font-medium text-red-800">{error}</h3>
            </div>
          </div>
        </div>
      )}

      <div className="text-sm">
        <Link
          href="/auth/sign-in"
          className="font-medium text-indigo-600 hover:text-indigo-500"
        >
          이미 계정이 있으신가요?
        </Link>
      </div>

      <div>
        <button
          type="submit"
          disabled={isLoading}
          className="flex w-full justify-center rounded-md border border-transparent bg-indigo-600 px-4 py-2 text-sm font-medium text-white shadow-sm hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 disabled:opacity-50"
        >
          {isLoading ? "계정 생성 중..." : "계정 만들기"}
        </button>
      </div>
    </form>
  );
}



================================================
FILE: app/auth/sign-up-success/page.tsx
================================================
"use client";

import Link from "next/link";

export default function SignUpSuccessPage() {
  return (
    <div className="min-h-screen bg-gray-50 flex flex-col items-center justify-center px-4 sm:px-6 lg:px-8">
      <div className="w-full max-w-lg">
        <h1 className="text-4xl font-bold text-[#2A2A33] text-center tracking-tight mb-2">
          이메일을 확인하세요
        </h1>
        <p className="text-lg text-center text-[#54545A] mb-8">
          등록을 완료하기 위한 확인 링크를 이메일로 보냈습니다
        </p>

        <div className="bg-white rounded-xl shadow-lg p-8">
          <div className="bg-[#E6F4EA] rounded-lg p-6 mb-6">
            <h3 className="text-[#1B5E20] text-xl font-semibold mb-3">
              등록 성공
            </h3>
            <p className="text-[#2E7D32] text-base leading-relaxed">
              등록을 완료하려면 이메일에서 확인 링크를 확인하세요. 보이지 않으면 스팸 폴더를 확인하세요.
            </p>
          </div>

          <div className="border-t border-gray-200 pt-6">
            <div className="flex justify-center">
              <Link
                href="/auth/sign-in"
                className="inline-flex items-center text-[#006AFF] hover:text-[#0053C6] font-semibold"
              >
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  className="h-5 w-5 mr-2"
                  viewBox="0 0 20 20"
                  fill="currentColor"
                >
                  <path
                    fillRule="evenodd"
                    d="M9.707 16.707a1 1 0 01-1.414 0l-6-6a1 1 0 010-1.414l6-6a1 1 0 011.414 1.414L5.414 9H17a1 1 0 110 2H5.414l4.293 4.293a1 1 0 010 1.414z"
                    clipRule="evenodd"
                  />
                </svg>
                로그인으로 돌아가기
              </Link>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}



================================================
FILE: app/auth/update-password/page.tsx
================================================
"use client";

import { useState } from "react";
import { createClient } from "@supabase/supabase-js";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { useRouter } from "next/navigation";

export default function UpdatePassword() {
  const [password, setPassword] = useState("");
  const [confirmPassword, setConfirmPassword] = useState("");
  const [error, setError] = useState<string | null>(null);
  const [loading, setLoading] = useState(false);
  const [success, setSuccess] = useState(false);
  const router = useRouter();
  const supabase = createClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
  );

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setError(null);
    setLoading(true);

    if (password !== confirmPassword) {
      setError("Passwords do not match");
      setLoading(false);
      return;
    }

    try {
      const { error } = await supabase.auth.updateUser({
        password,
      });

      if (error) {
        setError(error.message);
        return;
      }

      setSuccess(true);
      // Redirect after successful password reset
      setTimeout(() => {
        router.push("/auth/sign-in");
      }, 2000);
    } catch (err) {
      setError("An error occurred while updating your password");
      console.error("Password update error:", err);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="flex min-h-screen items-center justify-center p-4">
      <Card className="w-full max-w-md">
        <CardHeader>
          <CardTitle>Set New Password</CardTitle>
          <CardDescription>Enter your new password below.</CardDescription>
        </CardHeader>
        <form onSubmit={handleSubmit}>
          <CardContent className="space-y-4">
            {error && (
              <div className="bg-destructive/10 text-destructive p-3 rounded-md text-sm">
                {error}
              </div>
            )}
            {success && (
              <div className="bg-green-100 text-green-700 p-3 rounded-md text-sm">
                Password updated successfully. Redirecting to login...
              </div>
            )}
            <div className="space-y-2">
              <label htmlFor="password" className="text-sm font-medium">
                New Password
              </label>
              <Input
                id="password"
                type="password"
                value={password}
                onChange={(e) => setPassword(e.target.value)}
                required
                disabled={loading || success}
                className="w-full"
              />
            </div>
            <div className="space-y-2">
              <label htmlFor="confirmPassword" className="text-sm font-medium">
                Confirm Password
              </label>
              <Input
                id="confirmPassword"
                type="password"
                value={confirmPassword}
                onChange={(e) => setConfirmPassword(e.target.value)}
                required
                disabled={loading || success}
                className="w-full"
              />
            </div>
          </CardContent>
          <CardFooter>
            <Button
              type="submit"
              disabled={loading || success}
              className="w-full"
            >
              {loading ? "Updating..." : "Update Password"}
            </Button>
          </CardFooter>
        </form>
      </Card>
    </div>
  );
}



================================================
FILE: app/emails/AgentRegistrationEmail.tsx
================================================
import * as React from "react";
import { AgentRegistrationData } from "@/types/agent";

export default function AgentRegistrationEmail({
  firstName,
  lastName,
  salesVolume,
  email,
  phone,
  zipCode,
}: AgentRegistrationData) {
  return (
    <div
      style={{
        fontFamily: "Arial, sans-serif",
        maxWidth: "600px",
        margin: "0 auto",
      }}
    >
      <h2
        style={{
          color: "#2563eb",
          borderBottom: "1px solid #ddd",
          paddingBottom: "10px",
        }}
      >
        신규 중개인 등록
      </h2>

      <p style={{ fontSize: "16px", lineHeight: "1.5" }}>
        VinaHome에 새로운 중개인이 등록했습니다. 세부 정보는 다음과 같습니다:
      </p>

      <div
        style={{
          background: "#f8fafc",
          padding: "15px",
          borderRadius: "5px",
          marginBottom: "20px",
        }}
      >
        <p style={{ margin: "8px 0" }}>
          <strong>이름:</strong> {firstName} {lastName}
        </p>
        <p style={{ margin: "8px 0" }}>
          <strong>판매량:</strong> {salesVolume}
        </p>
        <p style={{ margin: "8px 0" }}>
          <strong>이메일:</strong> {email}
        </p>
        {phone && (
          <p style={{ margin: "8px 0" }}>
            <strong>전화번호:</strong> {phone}
          </p>
        )}
        {zipCode && (
          <p style={{ margin: "8px 0" }}>
            <strong>우편번호:</strong> {zipCode}
          </p>
        )}
        <p style={{ margin: "8px 0" }}>
          <strong>등록일:</strong> {new Date().toLocaleString()}
        </p>
      </div>

      <p style={{ fontSize: "16px", color: "#4b5563" }}>
        파트너십에 대해 논의하기 위해 가능한 한 빨리 이 중개인에게 연락해
        주십시오.
      </p>

      <div
        style={{
          marginTop: "30px",
          borderTop: "1px solid #ddd",
          paddingTop: "15px",
          fontSize: "14px",
          color: "#6b7280",
        }}
      >
        <p>VinaHome - 부동산 성공을 위한 AI 기반 파트너</p>
      </div>
    </div>
  );
}



================================================
FILE: app/emails/RequestInfoEmail.tsx
================================================
import * as React from "react";

interface RequestInfoEmailProps {
  name: string;
  email: string;
  phone?: string;
  message: string;
}

export default function RequestInfoEmail({
  name,
  email,
  phone,
  message,
}: RequestInfoEmailProps) {
  return (
    <div
      style={{ fontFamily: "Arial, sans-serif", color: "#222", fontSize: 16 }}
    >
      <h2>새 부동산 정보 요청</h2>
      <p>
        <strong>이름:</strong> {name}
      </p>
      <p>
        <strong>이메일:</strong> {email}
      </p>
      {phone && (
        <p>
          <strong>전화번호:</strong> {phone}
        </p>
      )}
      <p>
        <strong>메시지:</strong>
      </p>
      <p>{message}</p>
    </div>
  );
}



================================================
FILE: app/emails/.eslintrc.js
================================================
/**
 * ESLint configuration specifically for email templates
 *
 * Email templates require inline styles for proper client compatibility
 * across various email clients that strip external CSS or have limited CSS support.
 */
module.exports = {
  rules: {
    // Disable inline style warnings for email templates
    "@next/next/no-inline-styles": "off",
    "@next/next/no-img-element": "off",
    "react/no-unknown-property": "off",
    "tailwindcss/no-custom-classname": "off",
    "jsx-a11y/alt-text": "off", // Often needed for email clients
    "react/jsx-no-target-blank": "off", // Email links sometimes need specific handling
  },
};



================================================
FILE: app/join-as-agent/layout.tsx
================================================
export default function JoinAsAgentLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <div className="min-h-[calc(100vh-80px)] bg-gray-50 py-10">
      <div className="container mx-auto px-4">
        <div className="max-w-3xl mx-auto">
          <h1 className="text-3xl font-bold text-gray-900 mb-6">
            VinaHome과 함께 부동산 중개업소의 거래 성사율을 최대한 끌어올려
            보세요!
          </h1>
          <p className="text-gray-600 mb-8">
            매물 홍보를 효과적으로 하고 싶으신가요? 더 많은 고객을 유치하고,
            빠르게 계약을 체결할 준비가 되셨다면 지금이 기회입니다.
          </p>
          <p className="text-gray-600 mb-8">
            VinaHome은 최신 AI 기술을 기반으로 운영을 단순화하고 마케팅을
            강화해, 비즈니스를 쉽고 빠르게 성장시킬 수 있도록 돕는 통합
            플랫폼입니다.
          </p>
          {children}
        </div>
      </div>
    </div>
  );
}



================================================
FILE: app/join-as-agent/page.tsx
================================================
import { Metadata } from "next";
import AgentRegistrationForm from "./_components/AgentRegistrationForm";
import { CheckCircle2 } from "lucide-react";

export const metadata: Metadata = {
  title: "중개인으로 가입 | VinaHome",
  description:
    "VinaHome과 함께 중개업소의 잠재력을 최대한 발휘하세요. AI 기반 플랫폼으로 매물 홍보, 리드 생성, 거래 성사 속도를 높이세요.",
};

export default function JoinAsAgentPage() {
  return (
    <div className="max-w-4xl mx-auto py-24 sm:py-28 px-4 sm:px-6 lg:px-8 bg-gradient-to-b from-white to-gray-50 rounded-xl">
      {/* Introductory Section (Content Removed by User Request) */}
      <div className="text-center">
        {" "}
        {/* mb-12 class removed */}
        {/* Content removed as per user request */}
      </div>

      {/* Why VinaHome Section */}
      <div className="bg-white rounded-lg overflow-hidden mb-24 shadow-[0_4px_24px_-4px_rgba(0,0,0,0.08)] border border-gray-100">
        <div className="bg-gradient-to-r from-blue-600 to-blue-700 px-6 py-5">
          <h2 className="text-xl font-semibold text-white">
            왜 VinaHome을 선택해야 할까요?
          </h2>
        </div>
        <div className="p-8">
          <ul className="space-y-6">
            <li className="flex items-start">
              <CheckCircle2 className="flex-shrink-0 h-5 w-5 text-blue-600 mr-3 mt-0.5" />
              <span className="text-base text-gray-700 leading-relaxed">
                <span className="font-bold text-gray-900">
                  AI 기반 부동산 매칭
                </span>
                으로 적합한 구매자와 매물을 연결합니다
              </span>
            </li>
            <li className="flex items-start">
              <CheckCircle2 className="flex-shrink-0 h-5 w-5 text-blue-600 mr-3 mt-0.5" />
              <span className="text-base text-gray-700 leading-relaxed">
                <span className="font-bold text-gray-900">
                  고급 CRM 및 리드 관리
                </span>{" "}
                시스템으로 잠재력이 높은 고객을 우선적으로 관리합니다
              </span>
            </li>
            <li className="flex items-start">
              <CheckCircle2 className="flex-shrink-0 h-5 w-5 text-blue-600 mr-3 mt-0.5" />
              <span className="text-base text-gray-700 leading-relaxed">
                <span className="font-bold text-gray-900">
                  자동화된 마케팅 캠페인
                </span>
                을 특정 부동산 포트폴리오에 맞게 조정합니다
              </span>
            </li>
            <li className="flex items-start">
              <CheckCircle2 className="flex-shrink-0 h-5 w-5 text-blue-600 mr-3 mt-0.5" />
              <span className="text-base text-gray-700 leading-relaxed">
                <span className="font-bold text-gray-900">
                  종이 없는 문서화로 원활한 거래 추적
                </span>
              </span>
            </li>
          </ul>
        </div>
      </div>
      {/* Agent Registration Form Section */}
      <div className="mb-8">
        <h2 className="text-2xl font-bold text-gray-900 text-center mb-12">
          중개인으로 등록하세요
        </h2>
        <AgentRegistrationForm />
        <div className="mt-12 text-base text-gray-600 text-center max-w-xl mx-auto bg-gray-50 p-4 rounded-lg border border-gray-100">
          <p className="mb-3 font-medium">문의가 있으신가요?</p>
          <div className="flex items-center justify-center space-x-6">
            <a
              href="https://www.vinahome.cc"
              className="flex items-center text-blue-600 hover:text-blue-700 transition-colors"
              target="_blank"
              rel="noopener noreferrer"
            >
              <svg
                xmlns="http://www.w3.org/2000/svg"
                className="h-5 w-5 mr-2"
                fill="none"
                viewBox="0 0 24 24"
                stroke="currentColor"
              >
                <path
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  strokeWidth={2}
                  d="M21 12a9 9 0 01-9 9m9-9a9 9 0 00-9-9m9 9H3m9 9a9 9 0 01-9-9m9 9c1.657 0 3-4.03 3-9s-1.343-9-3-9m0 18c-1.657 0-3-4.03-3-9s1.343-9 3-9m-9 9a9 9 0 019-9"
                />
              </svg>
              웹사이트 방문
            </a>
            <a
              href="mailto:hello@vinahome.cc"
              className="flex items-center text-blue-600 hover:text-blue-700 transition-colors"
            >
              <svg
                xmlns="http://www.w3.org/2000/svg"
                className="h-5 w-5 mr-2"
                fill="none"
                viewBox="0 0 24 24"
                stroke="currentColor"
              >
                <path
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  strokeWidth={2}
                  d="M3 8l7.89 5.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"
                />
              </svg>
              이메일 문의
            </a>
          </div>
        </div>
      </div>

      <div className="text-center border-t border-gray-200 pt-16">
        <div className="inline-flex items-center px-4 py-2 bg-blue-50 rounded-full">
          <p className="text-lg font-bold text-blue-700">
            VinaHome - 부동산 성공을 위한 AI 기반 파트너
          </p>
        </div>
      </div>
    </div>
  );
}



================================================
FILE: app/join-as-agent/_components/AgentRegistrationForm.tsx
================================================
"use client";

import { useState } from "react";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import * as z from "zod";
import { useRouter } from "next/navigation";
import { toast } from "sonner";
import {
  LoaderCircle,
  User,
  Mail,
  Phone,
  MapPin,
  BarChart3,
} from "lucide-react";

import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";

// Validation schema
const formSchema = z.object({
  firstName: z.string().min(2, "이름은 최소 2자 이상이어야 합니다."),
  lastName: z.string().trim().min(1, "성은 최소 1자 이상이어야 합니다.").refine(
    (value) => !/\s{2,}/.test(value), // Prevent multiple consecutive spaces
    { message: "성은 한 단어로 입력해주세요." }
  ),
  salesVolume: z.string().min(1, "판매량을 선택해주세요."),
  email: z.string().email("유효한 이메일 주소를 입력해주세요."),
  phone: z.string().min(10, "유효한 전화번호를 입력해주세요."),
  zipCode: z.string().min(5, "유효한 우편번호를 입력해주세요."),
});

export default function AgentRegistrationForm() {
  const router = useRouter();
  const [isSubmitting, setIsSubmitting] = useState(false);

  const form = useForm<z.infer<typeof formSchema>>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      firstName: "",
      lastName: "",
      email: "",
      phone: "",
      salesVolume: "",
      zipCode: "",
    },
  });

  // Handle form submission
  const onSubmit = async (data: z.infer<typeof formSchema>) => {
    try {
      setIsSubmitting(true);

      // Use the correct API endpoint
      const res = await fetch("/api/agents/register", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(data),
      });

      const responseData = await res.json();

      if (!res.ok) {
        console.error('Error response:', responseData);
        throw new Error(responseData.message || "등록 제출에 실패했습니다.");
      }

      toast.success("중개인 등록이 제출되었습니다! 곧 연락드리겠습니다.");
      form.reset();
      router.push("/join-as-agent/success");
    } catch (err) {
      console.error('Form submission error:', err);
      toast.error(
        err instanceof Error ? err.message : "제출 중 문제가 발생했습니다.",
      );
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <Card className="w-full max-w-2xl mx-auto shadow-md">
      <CardHeader className="space-y-1">
        <CardTitle className="text-2xl font-bold text-center">
          중개인 등록
        </CardTitle>
        <CardDescription className="text-center">
          아래 양식을 작성하여 중개인으로 등록해 주세요
        </CardDescription>
      </CardHeader>
      <CardContent>
        <Form {...form}>
          <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <FormField
                control={form.control}
                name="lastName"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>성</FormLabel>
                    <FormControl>
                      <div className="relative">
                        <User className="absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground" />
                        <Input
                          placeholder="성을 입력하세요"
                          className="pl-10"
                          {...field}
                          disabled={isSubmitting}
                        />
                      </div>
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />

              <FormField
                control={form.control}
                name="firstName"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>이름</FormLabel>
                    <FormControl>
                      <div className="relative">
                        <User className="absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground" />
                        <Input
                          placeholder="이름을 입력하세요"
                          className="pl-10"
                          {...field}
                          disabled={isSubmitting}
                        />
                      </div>
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />

              <FormField
                control={form.control}
                name="email"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>이메일</FormLabel>
                    <FormControl>
                      <div className="relative">
                        <Mail className="absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground" />
                        <Input
                          type="email"
                          placeholder="이메일을 입력하세요"
                          className="pl-10"
                          {...field}
                          disabled={isSubmitting}
                        />
                      </div>
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />

              <FormField
                control={form.control}
                name="phone"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>전화번호</FormLabel>
                    <FormControl>
                      <div className="relative">
                        <Phone className="absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground" />
                        <Input
                          type="tel"
                          placeholder="전화번호를 입력하세요"
                          className="pl-10"
                          {...field}
                          disabled={isSubmitting}
                        />
                      </div>
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />

              <FormField
                control={form.control}
                name="salesVolume"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>연간 판매량</FormLabel>
                    <Select
                      onValueChange={field.onChange}
                      defaultValue={field.value}
                      disabled={isSubmitting}
                    >
                      <FormControl>
                        <div className="relative">
                          <BarChart3 className="absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground" />
                          <SelectTrigger className="pl-10">
                            <SelectValue placeholder="판매량 선택" />
                          </SelectTrigger>
                        </div>
                      </FormControl>
                      <SelectContent>
                        <SelectItem value="Less than 1 billion VND">
                          10억 VND 미만
                        </SelectItem>
                        <SelectItem value="1-5 billion VND">
                          10억-50억 VND
                        </SelectItem>
                        <SelectItem value="5-10 billion VND">
                          50억-100억 VND
                        </SelectItem>
                        <SelectItem value="10-50 billion VND">
                          100억-500억 VND
                        </SelectItem>
                        <SelectItem value="Over 50 billion VND">
                          500억 VND 초과
                        </SelectItem>
                      </SelectContent>
                    </Select>
                    <FormMessage />
                  </FormItem>
                )}
              />

              <FormField
                control={form.control}
                name="zipCode"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>우편번호</FormLabel>
                    <FormControl>
                      <div className="relative">
                        <MapPin className="absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground" />
                        <Input
                          placeholder="우편번호를 입력하세요"
                          className="pl-10"
                          {...field}
                          disabled={isSubmitting}
                        />
                      </div>
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
            </div>

            <Button type="submit" className="w-full" disabled={isSubmitting}>
              {isSubmitting ? (
                <>
                  <LoaderCircle className="mr-2 h-4 w-4 animate-spin" />
                  제출 중...
                </>
              ) : (
                "등록 제출"
              )}
            </Button>
          </form>
        </Form>
      </CardContent>
    </Card>
  );
}



================================================
FILE: app/join-as-agent/success/page.tsx
================================================
"use client";

import Link from "next/link";
import { ArrowLeftIcon } from "lucide-react";

import { Button } from "@/components/ui/button";

export default function RegistrationSuccessPage() {
  return (
    <div className="max-w-2xl mx-auto px-4 py-24 sm:py-28 bg-gradient-to-b from-white to-gray-50 rounded-xl">
      <div className="bg-white p-8 rounded-lg shadow-[0_4px_24px_-4px_rgba(0,0,0,0.08)] border border-gray-100">
        <div className="flex flex-col items-center text-center">
          <div className="h-16 w-16 bg-blue-100 rounded-full flex items-center justify-center mb-6">
            <svg
              xmlns="http://www.w3.org/2000/svg"
              fill="none"
              viewBox="0 0 24 24"
              strokeWidth={2}
              stroke="#1e40af"
              className="w-8 h-8"
            >
              <path
                strokeLinecap="round"
                strokeLinejoin="round"
                d="M9 12.75L11.25 15 15 9.75M21 12a9 9 0 11-18 0 9 9 0 0118 0z"
              />
            </svg>
          </div>

          <h1 className="text-3xl font-bold text-gray-900 mb-4">
            신청해 주셔서 감사합니다!
          </h1>

          <p className="text-lg text-gray-700 mb-8 max-w-md leading-relaxed">
            VinaHome 중개인 프로그램에 관심을 가져주셔서 진심으로 감사드립니다.
          </p>

          <div className="text-left bg-gray-50 p-6 rounded-lg w-full max-w-lg mb-8 border border-gray-100">
            <h2 className="text-xl font-bold text-gray-900 mb-4 flex items-center">
              <svg
                xmlns="http://www.w3.org/2000/svg"
                className="h-5 w-5 mr-2 text-blue-600"
                fill="none"
                viewBox="0 0 24 24"
                stroke="currentColor"
              >
                <path
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  strokeWidth={2}
                  d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"
                />
              </svg>
              무엇을 기대해야 할까요?
            </h2>
            <ul className="space-y-3 text-gray-700">
              <li className="flex items-start">
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  className="h-5 w-5 text-blue-600 mr-2 mt-0.5 flex-shrink-0"
                  fill="none"
                  viewBox="0 0 24 24"
                  stroke="currentColor"
                >
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    strokeWidth={2}
                    d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"
                  />
                </svg>
                <span className="leading-relaxed">
                  귀하의 신청서가 성공적으로 접수되었습니다.
                </span>
              </li>
              <li className="flex items-start">
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  className="h-5 w-5 text-blue-600 mr-2 mt-0.5 flex-shrink-0"
                  fill="none"
                  viewBox="0 0 24 24"
                  stroke="currentColor"
                >
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    strokeWidth={2}
                    d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"
                  />
                </svg>
                <span className="leading-relaxed">
                  저희 팀에서 귀하의 정보를 신중히 검토할 것입니다.
                </span>
              </li>
              <li className="flex items-start">
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  className="h-5 w-5 text-blue-600 mr-2 mt-0.5 flex-shrink-0"
                  fill="none"
                  viewBox="0 0 24 24"
                  stroke="currentColor"
                >
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    strokeWidth={2}
                    d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"
                  />
                </svg>
                <span className="leading-relaxed">
                  일반적으로 2-3 영업일 이내에 다음 단계에 대해 안내해 드리기
                  위해 연락드립니다.
                </span>
              </li>
            </ul>
          </div>

          <Link href="/" passHref>
            <Button className="w-full max-w-xs bg-blue-600 hover:bg-blue-700 text-white shadow-sm transition-colors">
              <ArrowLeftIcon className="h-4 w-4 mr-2" />
              홈페이지로 돌아가기
            </Button>
          </Link>
        </div>
      </div>
    </div>
  );
}



================================================
FILE: app/privacy-policy/page.tsx
================================================
"use client";

import Container from "@/components/layout/Container";

export default function PrivacyPolicyPage() {
  return (
    <Container>
      <div className="max-w-4xl mx-auto">
        <h1 className="text-3xl font-bold mb-8">Privacy Policy</h1>

        <section className="mb-8">
          <h2 className="text-xl font-semibold mb-4">Introduction</h2>
          <p className="mb-4">
            At VinaHome, we are committed to protecting your privacy and
            ensuring the security of your personal information. This Privacy
            Policy explains how we collect, use, and safeguard your information
            when you use our platform.
          </p>
          <p>
            By using VinaHome, you agree to the collection and use of
            information in accordance with this policy.
          </p>
        </section>

        <section className="mb-8">
          <h2 className="text-xl font-semibold mb-4">Information We Collect</h2>
          <p className="mb-4">
            We collect several types of information for various purposes:
          </p>
          <ul className="list-disc pl-6 space-y-2">
            <li>
              <strong>Personal Information</strong>: When you register for an
              account, we collect your name, email address, phone number, and
              other contact information.
            </li>
            <li>
              <strong>Property Search Information</strong>: We collect data
              about your property searches, including location preferences,
              property types, price ranges, and other search criteria.
            </li>
            <li>
              <strong>Usage Data</strong>: We collect information about how you
              interact with our platform, including pages visited, time spent on
              each page, and features used.
            </li>
            <li>
              <strong>Device Information</strong>: We collect information about
              your device, including IP address, browser type, and operating
              system.
            </li>
          </ul>
        </section>

        <section className="mb-8">
          <h2 className="text-xl font-semibold mb-4">
            How We Use Your Information
          </h2>
          <p className="mb-4">
            We use the collected information for various purposes:
          </p>
          <ul className="list-disc pl-6 space-y-2">
            <li>To provide and maintain our service</li>
            <li>
              To personalize your experience and show you relevant property
              listings
            </li>
            <li>To communicate with you about our services and updates</li>
            <li>To process transactions and manage your account</li>
            <li>To analyze and improve our platform</li>
            <li>To detect, prevent, and address technical issues</li>
          </ul>
        </section>

        <section className="mb-8">
          <h2 className="text-xl font-semibold mb-4">Data Security</h2>
          <p>
            The security of your data is important to us. We implement
            appropriate security measures to protect your personal information.
            However, please be aware that no method of transmission over the
            Internet or method of electronic storage is 100% secure. While we
            strive to use commercially acceptable means to protect your personal
            information, we cannot guarantee its absolute security.
          </p>
        </section>

        <section className="mb-8">
          <h2 className="text-xl font-semibold mb-4">
            Sharing Your Information
          </h2>
          <p className="mb-4">We may share your information with:</p>
          <ul className="list-disc pl-6 space-y-2">
            <li>
              <strong>Property Owners/Agents</strong>: When you express interest
              in a property, your contact information may be shared with the
              property owner or agent to facilitate communication.
            </li>
            <li>
              <strong>Service Providers</strong>: We may share your information
              with third-party service providers who perform services on our
              behalf, such as payment processing, data analysis, and customer
              service.
            </li>
            <li>
              <strong>Legal Requirements</strong>: We may disclose your
              information if required by law or in response to valid requests by
              public authorities.
            </li>
          </ul>
        </section>

        <section className="mb-8">
          <h2 className="text-xl font-semibold mb-4">Your Rights</h2>
          <p className="mb-4">
            You have the following rights regarding your personal information:
          </p>
          <ul className="list-disc pl-6 space-y-2">
            <li>The right to access, update, or delete your information</li>
            <li>
              The right to rectification if your information is inaccurate or
              incomplete
            </li>
            <li>The right to object to our processing of your personal data</li>
            <li>
              The right to request restriction of processing your personal
              information
            </li>
            <li>The right to data portability</li>
            <li>The right to withdraw consent</li>
          </ul>
        </section>

        <section className="mb-8">
          <h2 className="text-xl font-semibold mb-4">Cookies</h2>
          <p>
            We use cookies and similar tracking technologies to track activity
            on our platform and hold certain information. Cookies are files with
            a small amount of data which may include an anonymous unique
            identifier. You can instruct your browser to refuse all cookies or
            to indicate when a cookie is being sent. However, if you do not
            accept cookies, you may not be able to use some portions of our
            service.
          </p>
        </section>

        <section className="mb-8">
          <h2 className="text-xl font-semibold mb-4">
            Changes to This Privacy Policy
          </h2>
          <p className="mb-4">
            We may update our Privacy Policy from time to time. We will notify
            you of any changes by posting the new Privacy Policy on this page.
            You are advised to review this Privacy Policy periodically for any
            changes. Changes to this Privacy Policy are effective when they are
            posted on this page.
          </p>
        </section>

        <section>
          <h2 className="text-xl font-semibold mb-4">Contact Us</h2>
          <p>
            If you have any questions about this Privacy Policy, please contact
            us at privacy@vinahome.com.
          </p>
        </section>
      </div>
    </Container>
  );
}



================================================
FILE: app/profile/page.tsx
================================================
"use client";

import { useEffect, useState } from "react";
import type { User } from "@supabase/supabase-js";
import { createClient } from "@/lib/supabase/client";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Separator } from "@/components/ui/separator";
import { useRouter } from "next/navigation";

export default function ClientProfilePage() {
  const [user, setUser] = useState<User | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [formData, setFormData] = useState({
    fullName: "",
    phone: "",
    role: "관리자",
  });
  const router = useRouter();
  const supabase = createClient();

  useEffect(() => {
    async function loadUser() {
      setIsLoading(true);
      const { data } = await supabase.auth.getUser();

      if (!data.user) {
        router.push("/auth/sign-in");
        return;
      }

      setUser(data.user);
      setFormData({
        fullName: data.user.user_metadata?.full_name || "",
        phone: data.user.user_metadata?.phone || "",
        role: data.user.user_metadata?.role || "관리자",
      });
      setIsLoading(false);
    }

    loadUser();
  }, [router, supabase.auth]);

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    setFormData((prev) => ({ ...prev, [name]: value }));
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    try {
      await supabase.auth.updateUser({
        data: {
          full_name: formData.fullName,
          phone: formData.phone,
          role: formData.role,
        },
      });

      alert("프로필이 업데이트되었습니다.");
    } catch (error) {
      console.error("Error updating profile:", error);
      alert("프로필 업데이트 중 오류가 발생했습니다.");
    }
  };

  if (isLoading) {
    return (
      <div className="py-8 max-w-4xl mx-auto flex items-center justify-center min-h-[300px]">
        <div className="h-8 w-8 rounded-full border-4 border-t-[#007882] border-r-transparent border-b-transparent border-l-transparent animate-spin"></div>
      </div>
    );
  }

  return (
    <div className="py-8 max-w-4xl mx-auto">
      <h1 className="text-3xl font-bold mb-8">내 프로필</h1>

      <form onSubmit={handleSubmit} className="space-y-6">
        <Card>
          <CardHeader>
            <CardTitle>계정 정보</CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  이메일
                </label>
                <input
                  type="email"
                  className="w-full rounded-md border border-gray-300 px-3 py-2 bg-gray-50"
                  value={user?.email || ""}
                  disabled
                  placeholder="이메일"
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  사용자 ID
                </label>
                <input
                  type="text"
                  className="w-full rounded-md border border-gray-300 px-3 py-2 bg-gray-50"
                  value={user?.id || ""}
                  disabled
                  placeholder="사용자 ID"
                />
              </div>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardHeader>
            <CardTitle>프로필 설정</CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  이름
                </label>
                <input
                  type="text"
                  name="fullName"
                  className="w-full rounded-md border border-gray-300 px-3 py-2 focus:outline-none focus:ring-1 focus:ring-[#007882]"
                  value={formData.fullName}
                  onChange={handleInputChange}
                  placeholder="이름을 입력하세요"
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  전화번호
                </label>
                <input
                  type="tel"
                  name="phone"
                  className="w-full rounded-md border border-gray-300 px-3 py-2 focus:outline-none focus:ring-1 focus:ring-[#007882]"
                  value={formData.phone}
                  onChange={handleInputChange}
                  placeholder="전화번호를 입력하세요"
                />
              </div>
            </div>

            <Separator className="my-4" />

            <div className="flex justify-end">
              <Button type="submit" className="bg-[#007882] hover:bg-[#005F67]">
                변경사항 저장
              </Button>
            </div>
          </CardContent>
        </Card>
      </form>
    </div>
  );
}



================================================
FILE: app/terms-of-use/page.tsx
================================================
"use client";

import Container from "@/components/layout/Container";

export default function TermsOfUsePage() {
  return (
    <Container>
      <div className="max-w-4xl mx-auto">
        <h1 className="text-3xl font-bold mb-8">Terms of Use</h1>

        <section className="mb-8">
          <h2 className="text-xl font-semibold mb-4">Introduction</h2>
          <p className="mb-4">
            Welcome to VinaHome. By accessing or using our platform, you agree
            to be bound by these Terms of Use. Please read these terms carefully
            before using our services.
          </p>
          <p>
            If you do not agree with any part of these terms, you may not access
            or use our platform.
          </p>
        </section>

        <section className="mb-8">
          <h2 className="text-xl font-semibold mb-4">Definitions</h2>
          <ul className="list-disc pl-6 space-y-2">
            <li>
              <strong>Platform</strong>: The VinaHome website and services.
            </li>
            <li>
              <strong>User</strong>: Any individual who accesses or uses the
              Platform.
            </li>
            <li>
              <strong>Content</strong>: Any information, text, graphics, photos,
              or other materials uploaded, downloaded, or appearing on the
              Platform.
            </li>
            <li>
              <strong>Property Listing</strong>: Information about properties
              available for rent or purchase.
            </li>
          </ul>
        </section>

        <section className="mb-8">
          <h2 className="text-xl font-semibold mb-4">Account Registration</h2>
          <p className="mb-4">
            To access certain features of the Platform, you may be required to
            register for an account. You agree to provide accurate, current, and
            complete information during the registration process and to update
            such information to keep it accurate, current, and complete.
          </p>
          <p className="mb-4">
            You are responsible for safeguarding your password and for all
            activities that occur under your account. You agree to notify us
            immediately of any unauthorized use of your account.
          </p>
          <p>
            We reserve the right to disable any user account at any time if, in
            our opinion, you have failed to comply with any provision of these
            Terms.
          </p>
        </section>

        <section className="mb-8">
          <h2 className="text-xl font-semibold mb-4">User Conduct</h2>
          <p className="mb-4">You agree not to:</p>
          <ul className="list-disc pl-6 space-y-2">
            <li>
              Use the Platform in any way that violates any applicable law or
              regulation.
            </li>
            <li>
              Impersonate any person or entity, or falsely state or otherwise
              misrepresent your affiliation with a person or entity.
            </li>
            <li>
              Interfere with or disrupt the Platform or servers or networks
              connected to the Platform.
            </li>
            <li>Post false, misleading, or fraudulent property listings.</li>
            <li>
              Collect or store personal data about other users without their
              consent.
            </li>
            <li>
              Use the Platform to send spam, chain letters, or other unsolicited
              communications.
            </li>
          </ul>
        </section>

        <section className="mb-8">
          <h2 className="text-xl font-semibold mb-4">Property Listings</h2>
          <p className="mb-4">
            All property listings on the Platform are provided by third parties.
            We do not guarantee the accuracy, completeness, or availability of
            any listing. We are not responsible for any decisions made based on
            the information provided in listings.
          </p>
          <p>
            Users who post property listings represent and warrant that they
            have the right to post such content and that the content is accurate
            and not misleading.
          </p>
        </section>

        <section className="mb-8">
          <h2 className="text-xl font-semibold mb-4">Intellectual Property</h2>
          <p className="mb-4">
            The Platform and its original content, features, and functionality
            are owned by VinaHome and are protected by international copyright,
            trademark, patent, trade secret, and other intellectual property or
            proprietary rights laws.
          </p>
          <p>
            You may not copy, modify, create derivative works of, publicly
            display, publicly perform, republish, or transmit any of the
            material on our Platform without prior written consent.
          </p>
        </section>

        <section className="mb-8">
          <h2 className="text-xl font-semibold mb-4">
            Limitation of Liability
          </h2>
          <p>
            In no event shall VinaHome, its directors, employees, partners,
            agents, suppliers, or affiliates be liable for any indirect,
            incidental, special, consequential, or punitive damages, including
            without limitation, loss of profits, data, use, goodwill, or other
            intangible losses, resulting from your access to or use of or
            inability to access or use the Platform.
          </p>
        </section>

        <section className="mb-8">
          <h2 className="text-xl font-semibold mb-4">Indemnification</h2>
          <p>
            You agree to defend, indemnify, and hold harmless VinaHome and its
            licensees and licensors, and their employees, contractors, agents,
            officers, and directors, from and against any and all claims,
            damages, obligations, losses, liabilities, costs or debt, and
            expenses, resulting from or arising out of your use and access of
            the Platform.
          </p>
        </section>

        <section className="mb-8">
          <h2 className="text-xl font-semibold mb-4">Governing Law</h2>
          <p>
            These Terms shall be governed and construed in accordance with the
            laws of Vietnam, without regard to its conflict of law provisions.
          </p>
        </section>

        <section className="mb-8">
          <h2 className="text-xl font-semibold mb-4">Changes to Terms</h2>
          <p>
            We reserve the right, at our sole discretion, to modify or replace
            these Terms at any time. If a revision is material, we will provide
            at least 30 days&apos; notice prior to any new terms taking effect.
            What constitutes a material change will be determined at our sole
            discretion.
          </p>
        </section>

        <section>
          <h2 className="text-xl font-semibold mb-4">Contact Us</h2>
          <p>
            If you have any questions about these Terms, please contact us at
            terms@vinahome.com.
          </p>
        </section>
      </div>
    </Container>
  );
}



================================================
FILE: components/auth/GoogleSignInButton.tsx
================================================
'use client';

import { createClient } from '@/lib/supabase/client';
import { Button } from '@/components/ui/button';

interface GoogleSignInButtonProps {
  children: React.ReactNode;
}

export default function GoogleSignInButton({ children }: GoogleSignInButtonProps) {
  const supabase = createClient();

  const handleSignIn = async () => {
    await supabase.auth.signInWithOAuth({
      provider: 'google',
      options: {
        redirectTo: `${location.origin}/auth/callback`,
      },
    });
  };

  return (
    <Button
      onClick={handleSignIn}
      variant="outline"
      className="w-full flex items-center justify-center gap-2"
    >
      <img
        src="https://upload.wikimedia.org/wikipedia/commons/c/c1/Google_%22G%22_logo.svg"
        alt="Google logo"
        width={20}
        height={20}
      />
      <span>{children}</span>
    </Button>
  );
}



================================================
FILE: components/error/ErrorBoundary.tsx
================================================
"use client";

import { useEffect } from "react";
import { Button } from "@/components/ui/button";
import {
  Card,
  CardContent,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";

interface ErrorBoundaryProps {
  error: Error & { digest?: string };
  reset: () => void;
}

export default function ErrorBoundary({ error, reset }: ErrorBoundaryProps) {
  useEffect(() => {
    // Log the error to an error reporting service
    console.error("Error caught by error boundary:", error);
  }, [error]);

  return (
    <div className="flex items-center justify-center min-h-[400px] p-4">
      <Card className="w-full max-w-md">
        <CardHeader>
          <CardTitle className="text-xl text-red-500">
            Something went wrong
          </CardTitle>
        </CardHeader>
        <CardContent>
          <p className="mb-4 text-muted-foreground">
            {error.message ||
              "An unexpected error occurred while loading this content."}
          </p>
          <div className="bg-muted p-3 rounded-md text-xs overflow-auto max-h-32">
            <code>
              {error.digest
                ? `Error ID: ${error.digest}`
                : "No error details available"}
            </code>
          </div>
        </CardContent>
        <CardFooter className="flex justify-end space-x-2">
          <Button
            variant="outline"
            onClick={() => (window.location.href = "/")}
          >
            Go Home
          </Button>
          <Button onClick={() => reset()}>Try Again</Button>
        </CardFooter>
      </Card>
    </div>
  );
}



================================================
FILE: components/featured/FeaturedPropertiesClient.tsx
================================================
"use client";

import { useState } from "react";
import {
  Carousel,
  CarouselContent,
  CarouselItem,
  CarouselNext,
  CarouselPrevious,
} from "@/components/ui/carousel";
import { Building2, Home as HomeIcon, ArrowRight } from "lucide-react";
import { cn } from "@/lib/utils";
import type { PropertyListing } from "@/types/property";
import Link from "next/link";
import { PropertyCard } from "@/components/property/PropertyCard";

// Animated Tabs component (kept internal to this client component)
function AnimatedTabs({
  tabs,
  activeTab,
  onTabChange,
}: {
  tabs: { id: string; label: string; icon?: React.ReactNode }[];
  activeTab: string;
  onTabChange: (id: string) => void;
}) {
  return (
    <div className="flex space-x-1 rounded-lg bg-muted p-1 mb-8">
      <div className="relative flex">
        {tabs.map((tab) => (
          <button
            key={tab.id}
            onClick={() => onTabChange(tab.id)}
            className={cn(
              "relative px-6 py-2 text-sm font-medium transition-all duration-200 z-10",
              activeTab === tab.id
                ? "text-primary-foreground"
                : "text-muted-foreground hover:text-foreground",
            )}
          >
            <div className="flex items-center gap-2">
              {tab.icon}
              {tab.label}
            </div>
            {activeTab === tab.id && (
              <div className="absolute inset-0 bg-primary rounded-md -z-10" />
            )}
          </button>
        ))}
      </div>
    </div>
  );
}

// Main Client Component for Featured Properties Section
export function FeaturedPropertiesClient({
  rentProperties,
  buyProperties,
  totalProperties,
}: {
  rentProperties: PropertyListing[];
  buyProperties: PropertyListing[];
  totalProperties: number;
}) {
  const [activeTab, setActiveTab] = useState("rent");

  const tabs = [
    { id: "rent", label: "월세", icon: <Building2 className="h-4 w-4" /> },
    { id: "buy", label: "매매", icon: <HomeIcon className="h-4 w-4" /> },
  ];

  const properties = activeTab === "rent" ? rentProperties : buyProperties;

  return (
    <section className="w-full py-16 bg-[#f7f9fa]">
      <div className="container mx-auto px-4">
        <div className="bg-white border border-gray-200 rounded-2xl shadow-lg p-6 mb-10">
          <div className="flex flex-col md:flex-row justify-between items-start md:items-center mb-8">
            <div>
              <h2 className="text-2xl font-semibold mb-2">추천 매물</h2>
              <p className="text-muted-foreground">
                한국에서 {totalProperties}개 이상의 매물을 확인하세요
              </p>
            </div>
            <AnimatedTabs
              tabs={tabs}
              activeTab={activeTab}
              onTabChange={setActiveTab}
            />
          </div>

          {/* Carousel Implementation */}
          <div className="bg-white rounded-xl">
            <Carousel
              opts={{
                align: "start",
                loop: properties.length > 3, // Loop only if enough items
              }}
              className="w-full"
            >
              <CarouselContent>
                {properties.map((property: PropertyListing) => (
                  <CarouselItem
                    key={property.id}
                    className="md:basis-1/2 lg:basis-1/3"
                  >
                    <div className="p-1 h-full">
                      <PropertyCard property={property} />
                    </div>
                  </CarouselItem>
                ))}
              </CarouselContent>
              <CarouselPrevious className="hidden sm:flex -left-4" />
              <CarouselNext className="hidden sm:flex -right-4" />
            </Carousel>
          </div>

          <div className="mt-8 flex justify-center">
            <Link
              href={`/search?propertyType=${activeTab === "rent" ? "월세" : "매매"}`}
              className="group inline-flex items-center gap-2 text-primary hover:text-primary/80 transition-colors font-medium"
            >
              모든 매물 보기
              <ArrowRight className="h-4 w-4 transition-transform group-hover:translate-x-1" />
            </Link>
          </div>
        </div>
      </div>
    </section>
  );
}



================================================
FILE: components/layout/Container.tsx
================================================
import React from "react";

interface ContainerProps {
  children: React.ReactNode;
}

const Container: React.FC<ContainerProps> = ({ children }) => {
  return (
    <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">{children}</div>
  );
};

export default Container;



================================================
FILE: components/layout/Footer.tsx
================================================
"use client";

import Link from "next/link";

const footerSections = [
  {
    title: "인기 검색",
    links: [
      { name: "내 주변 아파트", href: "/search?type=apartment" },
      { name: "판매용 주택", href: "/search?type=house&sale=true" },
      { name: "임대용 콘도", href: "/search?type=condo&rent=true" },
    ],
  },
  {
    title: "탐색",
    links: [
      { name: "도시", href: "/search" },
      { name: "자주 묻는 질문", href: "#" },
      { name: "매물", href: "/search?sale=true" },
    ],
  },
  {
    title: "회사 소개",
    links: [
      { name: "회사 소개", href: "/about" },
      { name: "중개인으로 가입", href: "/join-as-agent" },
    ],
  },
  {
    title: "법적 고지",
    links: [
      { name: "이용약관", href: "/terms-of-use" },
      { name: "개인정보처리방침", href: "/privacy-policy" },
    ],
  },
];

export default function Footer() {
  return (
    <footer className="bg-gray-50 border-t border-gray-100">
      <div className="max-w-7xl mx-auto py-8 px-4 sm:px-6 lg:px-8">
        <div className="flex flex-wrap justify-between">
          {footerSections.map((section) => (
            <div key={section.title} className="mb-6 w-1/2 md:w-auto md:mb-0">
              <h3 className="text-sm font-semibold text-gray-600">
                {section.title}
              </h3>
              <ul className="mt-4 space-y-2">
                {section.links.map((link) => (
                  <li key={link.name}>
                    <Link
                      href={link.href}
                      className="text-xs text-gray-500 hover:text-gray-700"
                    >
                      {link.name}
                    </Link>
                  </li>
                ))}
              </ul>
            </div>
          ))}
        </div>
        <div className="mt-6 pt-6 border-t border-gray-100 text-center text-xs text-gray-400">
          <p>
            &copy; {new Date().getFullYear()} VinaHome. 모든 권리 보유. 공평
            주택 기회.
          </p>
          <p className="mt-1 text-[10px]">
            VinaHome은 장애가 있는 개인의 디지털 접근성을 보장하기 위해 최선을
            다하고 있습니다. 저희는 모든 사람을 위해 웹 경험의 접근성을
            지속적으로 개선하고 있습니다.
          </p>
        </div>
      </div>
    </footer>
  );
}



================================================
FILE: components/layout/Header.tsx
================================================
"use client";

import Link from "next/link";
import { Home, Heart, User } from "lucide-react";
import { useEffect, useState } from "react";
import { createClient } from "@/lib/supabase/client";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import { useRouter } from "next/navigation";

interface UserWithMetadata {
  email?: string;
  user_metadata?: {
    full_name?: string;
  };
}

export function Header() {
  const [isLoggedIn, setIsLoggedIn] = useState(false);
  const [user, setUser] = useState<UserWithMetadata | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const router = useRouter();
  const supabase = createClient();

  useEffect(() => {
    const getUser = async () => {
      setIsLoading(true);
      const {
        data: { user },
      } = await supabase.auth.getUser();
      setUser(user);
      setIsLoggedIn(!!user);
      setIsLoading(false);
    };

    getUser();

    // Listen for auth changes
    const {
      data: { subscription },
    } = supabase.auth.onAuthStateChange((event, session) => {
      setUser(session?.user || null);
      setIsLoggedIn(!!session?.user);
    });

    return () => {
      subscription.unsubscribe();
    };
  }, [supabase.auth]);

  const handleSignOut = async () => {
    await supabase.auth.signOut();
    router.refresh();
  };

  return (
    <header className="sticky top-0 z-50 w-full bg-white border-b border-gray-200">
      <div className="container mx-auto px-4 h-16 flex items-center justify-between">
        {/* Left section with logo and nav */}
        <div className="flex items-center space-x-8">
          <Link href="/" className="flex items-center space-x-2">
            <Home className="h-6 w-6 text-[#007882]" />
            <span className="text-[#2A2A33] text-xl font-medium">VinaHome</span>
          </Link>

          <nav className="hidden md:flex items-center space-x-6">
            <Link
              href="/search"
              className="px-3 py-2 font-medium text-lg text-[#2A2A33] hover:bg-[#007882] hover:text-white rounded transition-colors"
            >
              매매
            </Link>
            <Link
              href="/properties"
              className="px-3 py-2 font-medium text-lg text-[#2A2A33] hover:bg-[#007882] hover:text-white rounded transition-colors"
            >
              임대
            </Link>
          </nav>
        </div>

        {/* Right section with auth */}
        <div className="flex items-center space-x-4">
          {isLoading ? (
            <div className="h-9 w-9 rounded-full bg-gray-200 animate-pulse"></div>
          ) : isLoggedIn ? (
            <>
              <DropdownMenu>
                <DropdownMenuTrigger asChild>
                  <button className="flex items-center gap-2 rounded-full px-4 py-2 font-medium transition-colors bg-[rgb(0,120,130)] text-white hover:bg-[rgb(0,95,103)] focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-[rgb(0,120,130)]">
                    <User className="h-5 w-5" />
                    <span>
                      {user &&
                      typeof user === "object" &&
                      "user_metadata" in user &&
                      user.user_metadata
                        ? user.user_metadata.full_name || user.email
                        : user?.email}
                    </span>
                  </button>
                </DropdownMenuTrigger>
                <DropdownMenuContent align="end" className="w-56">
                  <div className="px-2 py-1.5 text-sm font-medium">
                    {user?.email}
                  </div>
                  <DropdownMenuSeparator />
                  <DropdownMenuItem>
                    <button
                      onClick={() => router.push("/admin/profile")}
                      className="cursor-pointer w-full text-left"
                    >
                      프로필
                    </button>
                  </DropdownMenuItem>
                  <DropdownMenuItem>
                    <button
                      onClick={() => router.push("/admin/saved-homes")}
                      className="cursor-pointer w-full text-left flex items-center gap-2"
                    >
                      <Heart className="h-4 w-4" />
                      <span>저장된 매물</span>
                    </button>
                  </DropdownMenuItem>
                  <DropdownMenuSeparator />
                  <DropdownMenuItem
                    className="cursor-pointer text-red-600"
                    onClick={handleSignOut}
                  >
                    로그아웃
                  </DropdownMenuItem>
                </DropdownMenuContent>
              </DropdownMenu>
            </>
          ) : (
            <div className="flex items-center space-x-4">
              <Link href="/auth/sign-in">
                <button className="px-3 py-2 font-medium text-lg text-[#2A2A33] hover:bg-[#007882] hover:text-white rounded transition-colors">
                  로그인
                </button>
              </Link>
              <Link href="/auth/sign-up">
                <button className="px-3 py-2 font-medium text-lg text-[#2A2A33] hover:bg-[#007882] hover:text-white rounded transition-colors">
                  회원가입
                </button>
              </Link>
            </div>
          )}
        </div>
      </div>
    </header>
  );
}



================================================
FILE: components/property/FeaturedPropertyTabs.tsx
================================================
"use client";

import { useState } from "react";
import { PropertyCard } from "@/components/property/PropertyCard";
import { PropertyListing } from "@/types/property";

interface FeaturedPropertyTabsProps {
  rentProperties: PropertyListing[];
  buyProperties: PropertyListing[];
}

export function FeaturedPropertyTabs({
  rentProperties,
  buyProperties,
}: FeaturedPropertyTabsProps) {
  const [activeTab, setActiveTab] = useState<"rent" | "buy">("rent");

  const handleTabChange = (tab: "rent" | "buy") => {
    setActiveTab(tab);
  };

  return (
    <>
      <div className="mb-8">
        <div className="flex border-b">
          <button
            type="button"
            onClick={() => handleTabChange("rent")}
            className={`px-4 py-2 font-medium ${
              activeTab === "rent"
                ? "border-b-2 border-primary"
                : "text-muted-foreground hover:text-foreground transition-colors"
            }`}
          >
            월세
          </button>
          <button
            type="button"
            onClick={() => handleTabChange("buy")}
            className={`px-4 py-2 font-medium ${
              activeTab === "buy"
                ? "border-b-2 border-primary"
                : "text-muted-foreground hover:text-foreground transition-colors"
            }`}
          >
            매매
          </button>
        </div>
      </div>

      {/* Rental Properties */}
      {activeTab === "rent" && (
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-8">
          {rentProperties.length > 0 ? (
            rentProperties
              .slice(0, 6)
              .map((property) => (
                <PropertyCard key={property.id} property={property} />
              ))
          ) : (
            <div className="col-span-3 text-center py-12">
              <p className="text-muted-foreground">월세 매물이 없습니다.</p>
            </div>
          )}
        </div>
      )}

      {/* Purchase Properties */}
      {activeTab === "buy" && (
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-8">
          {buyProperties.length > 0 ? (
            buyProperties
              .slice(0, 6)
              .map((property) => (
                <PropertyCard key={property.id} property={property} />
              ))
          ) : (
            <div className="col-span-3 text-center py-12">
              <p className="text-muted-foreground">매매 매물이 없습니다.</p>
            </div>
          )}
        </div>
      )}
    </>
  );
}



================================================
FILE: components/property/PropertyCard.tsx
================================================
"use client";

import { memo } from "react";
import Link from "next/link";
import Image from "next/image";
import { PropertyListing } from "@/types/property";
import {
  Card,
  CardContent,
  CardHeader,
  CardTitle,
  CardDescription,
  CardFooter,
} from "@/components/ui/card";
import { Button } from "@/components/ui/button";

interface PropertyCardProps {
  property: PropertyListing;
  showDistance?: boolean;
  distanceMeters?: number;
}

// Format price based on property type
const formatPrice = (price: number, type: string) => {
  // Use a fixed locale to avoid hydration mismatches
  if (type === "월세") {
    return `$${price.toLocaleString("en-US")}/월`;
  } else {
    return `$${price.toLocaleString("en-US")}`;
  }
};

// Format distance in a human-readable way
const formatDistance = (meters: number) => {
  // Use fixed precision to avoid hydration mismatches
  if (meters < 1000) {
    return `${Math.floor(meters)}m 거리`;
  } else {
    const km = meters / 1000;
    return `${(Math.floor(km * 10) / 10).toFixed(1)}km 거리`;
  }
};

function PropertyCardComponent({
  property,
  showDistance = false,
  distanceMeters,
}: PropertyCardProps) {
  return (
    <Card className="h-full flex flex-col transition-shadow hover:shadow-lg border border-gray-200 rounded-xl shadow-md">
      <CardHeader className="pb-2">
        {property.primary_image ||
        (property.property_images &&
          property.property_images.length > 0 &&
          property.property_images[0].publicUrl) ? (
          <Image
            src={
              property.primary_image ||
              (property.property_images &&
                property.property_images.length > 0 &&
                property.property_images[0].publicUrl) ||
              "/next.svg"
            }
            alt={property.title}
            className="w-full h-48 object-cover rounded-lg mb-3"
            width={384}
            height={192}
            priority={false}
          />
        ) : (
          // fallback image
          <Image
            src="/next.svg"
            alt="이미지 없음"
            className="w-full h-48 object-cover rounded-lg mb-3"
            width={384}
            height={192}
            priority={false}
          />
        )}
        <CardTitle className="text-lg font-semibold line-clamp-2">
          {property.title}
        </CardTitle>
        <CardDescription className="text-muted-foreground">
          {property.address}
          {showDistance && distanceMeters && (
            <span className="ml-2 text-xs font-medium text-primary">
              {formatDistance(distanceMeters)}
            </span>
          )}
        </CardDescription>
      </CardHeader>
      <CardContent className="py-2 flex-grow">
        <div className="space-y-3">
          <p className="font-semibold text-lg">
            {formatPrice(property.price, property.property_type)}
            <span className="ml-2 text-sm font-normal text-muted-foreground">
              {property.property_type === "월세" ? "월세" : "매매"}
            </span>
          </p>
          <div className="flex space-x-4 text-sm">
            <div className="flex items-center">
              <span className="font-medium">{property.bedrooms}</span>{" "}
              <span className="text-muted-foreground ml-1">침실</span>
            </div>
            <div className="flex items-center">
              <span className="font-medium">{property.bathrooms}</span>{" "}
              <span className="text-muted-foreground ml-1">욕실</span>
            </div>
            <div className="flex items-center">
              <span className="font-medium">{property.square_footage}</span>{" "}
              <span className="text-muted-foreground ml-1">제곱피트</span>
            </div>
          </div>
          <p className="text-sm line-clamp-3 text-muted-foreground">
            {property.description}
          </p>
        </div>
      </CardContent>
      <CardFooter className="pt-2">
        <Link href={`/properties/${property.id}`} className="w-full">
          <Button
            variant="outline"
            className="w-full rounded-lg border-gray-300 bg-white hover:bg-gray-50 transition-colors"
          >
            자세히 보기
          </Button>
        </Link>
      </CardFooter>
    </Card>
  );
}

// Memoize the component to prevent unnecessary re-renders
export const PropertyCard = memo(PropertyCardComponent);



================================================
FILE: components/property/PropertyCardSkeleton.tsx
================================================
"use client";

import {
  Card,
  CardContent,
  CardHeader,
  CardFooter,
} from "@/components/ui/card";

export function PropertyCardSkeleton() {
  return (
    <Card className="h-full flex flex-col">
      <CardHeader className="pb-2">
        <div className="h-6 bg-muted rounded-md w-3/4 animate-pulse"></div>
        <div className="h-4 bg-muted rounded-md w-1/2 mt-2 animate-pulse"></div>
      </CardHeader>
      <CardContent className="py-2 flex-grow">
        <div className="space-y-3">
          <div className="h-5 bg-muted rounded-md w-1/3 animate-pulse"></div>
          <div className="flex space-x-4">
            <div className="h-4 bg-muted rounded-md w-16 animate-pulse"></div>
            <div className="h-4 bg-muted rounded-md w-16 animate-pulse"></div>
            <div className="h-4 bg-muted rounded-md w-16 animate-pulse"></div>
          </div>
          <div className="space-y-2">
            <div className="h-4 bg-muted rounded-md w-full animate-pulse"></div>
            <div className="h-4 bg-muted rounded-md w-full animate-pulse"></div>
            <div className="h-4 bg-muted rounded-md w-2/3 animate-pulse"></div>
          </div>
        </div>
      </CardContent>
      <CardFooter className="pt-2">
        <div className="h-9 bg-muted rounded-md w-full animate-pulse"></div>
      </CardFooter>
    </Card>
  );
}



================================================
FILE: components/property/PropertyContact.tsx
================================================
"use client";

import { useState } from "react";
import { Phone, Mail, User } from "lucide-react";
import { Button } from "@/components/ui/button";
import {
  Card,
  CardContent,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Label } from "@/components/ui/label";

interface PropertyContactProps {
  propertyTitle: string;
}

export function PropertyContact({ propertyTitle }: PropertyContactProps) {
  const [name, setName] = useState("");
  const [email, setEmail] = useState("");
  const [phone, setPhone] = useState("");
  const [message, setMessage] = useState(
    `I'm interested in this property: ${propertyTitle}`,
  );
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [isSubmitted, setIsSubmitted] = useState(false);

  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();

    setIsSubmitting(true);

    // In a real implementation, this would send the data to an API
    // For now, we'll just simulate a delay
    await new Promise((resolve) => setTimeout(resolve, 1000));

    setIsSubmitting(false);
    setIsSubmitted(true);
  };

  if (isSubmitted) {
    return (
      <Card>
        <CardHeader>
          <CardTitle className="text-xl">Message Sent</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="text-center py-4">
            <div className="h-12 w-12 rounded-full bg-primary/10 text-primary flex items-center justify-center mx-auto mb-4">
              <Mail className="h-6 w-6" />
            </div>
            <p className="mb-2">Thank you for your interest!</p>
            <p className="text-sm text-muted-foreground">
              We&apos;ve received your message and will get back to you shortly.
            </p>
          </div>
        </CardContent>
        <CardFooter>
          <Button
            variant="outline"
            className="w-full"
            onClick={() => setIsSubmitted(false)}
          >
            Send Another Message
          </Button>
        </CardFooter>
      </Card>
    );
  }

  return (
    <Card>
      <CardHeader>
        <CardTitle className="text-xl">Contact Agent</CardTitle>
      </CardHeader>
      <CardContent>
        <form onSubmit={handleSubmit} className="space-y-4">
          <div className="space-y-2">
            <Label htmlFor="name">Your Name</Label>
            <div className="relative">
              <User className="absolute left-3 top-3 h-4 w-4 text-muted-foreground" />
              <Input
                id="name"
                placeholder="Enter your name"
                className="pl-10"
                value={name}
                onChange={(e) => setName(e.target.value)}
                required
              />
            </div>
          </div>

          <div className="space-y-2">
            <Label htmlFor="email">Email Address</Label>
            <div className="relative">
              <Mail className="absolute left-3 top-3 h-4 w-4 text-muted-foreground" />
              <Input
                id="email"
                type="email"
                placeholder="Enter your email"
                className="pl-10"
                value={email}
                onChange={(e) => setEmail(e.target.value)}
                required
              />
            </div>
          </div>

          <div className="space-y-2">
            <Label htmlFor="phone">Phone Number</Label>
            <div className="relative">
              <Phone className="absolute left-3 top-3 h-4 w-4 text-muted-foreground" />
              <Input
                id="phone"
                placeholder="Enter your phone number"
                className="pl-10"
                value={phone}
                onChange={(e) => setPhone(e.target.value)}
              />
            </div>
          </div>

          <div className="space-y-2">
            <Label htmlFor="message">Message</Label>
            <Textarea
              id="message"
              placeholder="Enter your message"
              rows={4}
              value={message}
              onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) =>
                setMessage(e.target.value)
              }
              required
            />
          </div>

          <Button type="submit" className="w-full" disabled={isSubmitting}>
            {isSubmitting ? "Sending..." : "Send Message"}
          </Button>
        </form>
      </CardContent>
    </Card>
  );
}



================================================
FILE: components/property/PropertyFeatures.tsx
================================================
"use client";

import { Check } from "lucide-react";
import { Separator } from "@/components/ui/separator";

interface PropertyFeaturesProps {
  features: Record<string, unknown>;
}

// Helper function to format feature names
function formatFeatureName(key: string): string {
  // Convert camelCase to Title Case with spaces
  const formatted = key
    .replace(/([A-Z])/g, " $1")
    .replace(/^./, (str) => str.toUpperCase());

  // Special cases for Korean-specific features
  if (key.startsWith("korean")) {
    return formatted.replace("Korean", "Korean ");
  }

  return formatted;
}

// Group features by category
function groupFeatures(features: Record<string, unknown>) {
  const groups: Record<string, Record<string, unknown>> = {
    "Property Features": {},
    Amenities: {},
    "Korean Features": {},
    Other: {},
  };

  Object.entries(features).forEach(([key, value]) => {
    if (key.startsWith("korean")) {
      groups["Korean Features"][key] = value;
    } else if (
      [
        "parking",
        "elevator",
        "balcony",
        "garden",
        "pool",
        "gym",
        "security",
      ].includes(key)
    ) {
      groups["Amenities"][key] = value;
    } else if (
      [
        "furnished",
        "airConditioning",
        "heating",
        "washer",
        "dryer",
        "dishwasher",
        "refrigerator",
      ].includes(key)
    ) {
      groups["Property Features"][key] = value;
    } else {
      groups["Other"][key] = value;
    }
  });

  // Remove empty groups
  Object.keys(groups).forEach((groupName) => {
    if (Object.keys(groups[groupName]).length === 0) {
      delete groups[groupName];
    }
  });

  return groups;
}

export function PropertyFeatures({ features }: PropertyFeaturesProps) {
  if (!features || Object.keys(features).length === 0) {
    return (
      <div className="text-muted-foreground">
        No features specified for this property.
      </div>
    );
  }

  const groupedFeatures = groupFeatures(features);

  return (
    <div className="space-y-6">
      {Object.entries(groupedFeatures).map(([groupName, groupFeatures]) => (
        <div key={groupName}>
          <h3 className="text-lg font-medium mb-3">{groupName}</h3>
          <div className="grid grid-cols-2 md:grid-cols-3 gap-3">
            {Object.entries(groupFeatures).map(([key, value]) => {
              if (value === true) {
                return (
                  <div key={key} className="flex items-center gap-2">
                    <div className="h-5 w-5 rounded-full bg-primary/10 flex items-center justify-center">
                      <Check className="h-3 w-3 text-primary" />
                    </div>
                    <span className="text-sm">{formatFeatureName(key)}</span>
                  </div>
                );
              } else if (value === false) {
                return null;
              } else if (
                typeof value === "string" ||
                typeof value === "number"
              ) {
                return (
                  <div key={key} className="flex items-center gap-2">
                    <span className="inline-block px-2 py-1 text-xs rounded border border-gray-300 bg-gray-100 mr-2">
                      {formatFeatureName(key)}
                    </span>
                    <span className="text-sm">{value}</span>
                  </div>
                );
              }
              return null;
            })}
          </div>
          <Separator className="mt-4" />
        </div>
      ))}
    </div>
  );
}



================================================
FILE: components/property/PropertyImageGallery.tsx
================================================
"use client";

import { useState } from "react";
import Image from "next/image";
import { cn } from "@/lib/utils";
import { Button } from "@/components/ui/button";
import { ChevronLeft, ChevronRight, Maximize2, X } from "lucide-react";

interface PropertyImageGalleryProps {
  images: string[];
  alt: string;
}

export function PropertyImageGallery({
  images,
  alt,
}: PropertyImageGalleryProps) {
  const [currentIndex, setCurrentIndex] = useState(0);
  const [fullscreen, setFullscreen] = useState(false);

  // If no images are provided, show a placeholder
  if (!images || images.length === 0) {
    return (
      <div className="relative w-full h-96 bg-muted rounded-lg overflow-hidden">
        <div className="absolute inset-0 flex items-center justify-center">
          <p className="text-muted-foreground">No images available</p>
        </div>
      </div>
    );
  }

  const handlePrevious = () => {
    setCurrentIndex((prevIndex) =>
      prevIndex === 0 ? images.length - 1 : prevIndex - 1,
    );
  };

  const handleNext = () => {
    setCurrentIndex((prevIndex) =>
      prevIndex === images.length - 1 ? 0 : prevIndex + 1,
    );
  };

  const toggleFullscreen = () => {
    setFullscreen(!fullscreen);
  };

  return (
    <>
      {/* Main gallery view */}
      <div className="relative w-full h-96 bg-muted rounded-lg overflow-hidden">
        <Image
          src={images[currentIndex]}
          alt={`${alt} - Image ${currentIndex + 1}`}
          fill
          className="object-cover"
          priority={currentIndex === 0}
        />

        {/* Navigation buttons */}
        <div className="absolute inset-0 flex items-center justify-between p-4">
          <Button
            variant="ghost"
            size="icon"
            className="h-10 w-10 rounded-full bg-background/80 backdrop-blur-sm"
            onClick={handlePrevious}
          >
            <ChevronLeft className="h-6 w-6" />
            <span className="sr-only">Previous image</span>
          </Button>

          <Button
            variant="ghost"
            size="icon"
            className="h-10 w-10 rounded-full bg-background/80 backdrop-blur-sm"
            onClick={handleNext}
          >
            <ChevronRight className="h-6 w-6" />
            <span className="sr-only">Next image</span>
          </Button>
        </div>

        {/* Fullscreen button */}
        <Button
          variant="ghost"
          size="icon"
          className="absolute top-4 right-4 h-10 w-10 rounded-full bg-background/80 backdrop-blur-sm"
          onClick={toggleFullscreen}
        >
          <Maximize2 className="h-5 w-5" />
          <span className="sr-only">View fullscreen</span>
        </Button>

        {/* Image counter */}
        <div className="absolute bottom-4 right-4 bg-background/80 backdrop-blur-sm px-3 py-1 rounded-full text-sm">
          {currentIndex + 1} / {images.length}
        </div>
      </div>

      {/* Thumbnail strip */}
      <div className="flex mt-4 space-x-2 overflow-x-auto pb-2">
        {images.map((image, index) => (
          <button
            key={index}
            title={`View image ${index + 1}`}
            className={cn(
              "relative h-20 w-20 flex-shrink-0 rounded-md overflow-hidden border-2",
              index === currentIndex ? "border-primary" : "border-transparent",
            )}
            onClick={() => setCurrentIndex(index)}
          >
            <Image
              src={image}
              alt={`${alt} - Thumbnail ${index + 1}`}
              fill
              className="object-cover"
            />
          </button>
        ))}
      </div>

      {/* Fullscreen modal */}
      {fullscreen && (
        <div className="fixed inset-0 z-50 bg-background/95 flex items-center justify-center">
          <div className="relative w-full max-w-5xl h-full max-h-screen p-8">
            <Button
              variant="ghost"
              size="icon"
              className="absolute top-4 right-4 z-10 h-10 w-10 rounded-full bg-background/80"
              onClick={toggleFullscreen}
            >
              <X className="h-6 w-6" />
              <span className="sr-only">Close fullscreen</span>
            </Button>

            <div className="relative w-full h-full">
              <Image
                src={images[currentIndex]}
                alt={`${alt} - Fullscreen Image ${currentIndex + 1}`}
                fill
                className="object-contain"
              />

              {/* Navigation buttons */}
              <div className="absolute inset-0 flex items-center justify-between p-4">
                <Button
                  variant="ghost"
                  size="icon"
                  className="h-12 w-12 rounded-full bg-background/80 backdrop-blur-sm"
                  onClick={handlePrevious}
                >
                  <ChevronLeft className="h-8 w-8" />
                  <span className="sr-only">Previous image</span>
                </Button>

                <Button
                  variant="ghost"
                  size="icon"
                  className="h-12 w-12 rounded-full bg-background/80 backdrop-blur-sm"
                  onClick={handleNext}
                >
                  <ChevronRight className="h-8 w-8" />
                  <span className="sr-only">Next image</span>
                </Button>
              </div>

              {/* Image counter */}
              <div className="absolute bottom-4 right-4 bg-background/80 backdrop-blur-sm px-3 py-1 rounded-full text-sm">
                {currentIndex + 1} / {images.length}
              </div>
            </div>
          </div>
        </div>
      )}
    </>
  );
}



================================================
FILE: components/property/PropertyListings.tsx
================================================
"use client";

import { useState, useCallback, useTransition } from "react";
import { useRouter, useSearchParams } from "next/navigation";
import { PropertyCard } from "@/components/property/PropertyCard";
import { PropertyCardSkeleton } from "@/components/property/PropertyCardSkeleton";
import { Button } from "@/components/ui/button";
import { PropertyListing } from "@/types/property";

// Extend PropertyListing to include optional distance_meters
type PropertyListingWithDistance = PropertyListing & {
  distance_meters?: number;
};

interface PropertyListingsProps {
  properties: PropertyListingWithDistance[];
  total?: number;
  initialLimit?: number;
  hasMore?: boolean;
}

export function PropertyListings({
  properties,
  total = 0,
  initialLimit = 12,
  hasMore = false,
}: PropertyListingsProps) {
  const router = useRouter();
  const searchParams = useSearchParams();
  const [isPending, startTransition] = useTransition();
  const [limit, setLimit] = useState(initialLimit);

  // Create a new URLSearchParams object to modify
  const createQueryString = useCallback(
    (name: string, value: string) => {
      const params = new URLSearchParams(searchParams.toString());
      params.set(name, value);
      return params.toString();
    },
    [searchParams],
  );

  const loadMore = () => {
    const newLimit = limit + initialLimit;
    setLimit(newLimit);

    startTransition(() => {
      router.push(
        `/properties?${createQueryString("limit", newLimit.toString())}`,
        { scroll: false },
      );
    });
  };

  if (!properties || properties.length === 0) {
    return (
      <div className="text-center py-12">
        <h2 className="text-xl font-semibold mb-2">No Properties Found</h2>
        <p className="text-muted-foreground">
          Try adjusting your search criteria to find more properties.
        </p>
      </div>
    );
  }

  return (
    <div>
      <div className="mb-6">
        <h2 className="text-xl font-semibold">
          {total} {total === 1 ? "Property" : "Properties"} Found
        </h2>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {properties.map((property) => (
          <PropertyCard
            key={property.id}
            property={property}
            showDistance={property.distance_meters !== undefined}
            distanceMeters={property.distance_meters}
          />
        ))}

        {isPending && (
          <>
            {Array.from({ length: initialLimit }).map((_, index) => (
              <PropertyCardSkeleton key={`skeleton-${index}`} />
            ))}
          </>
        )}
      </div>

      {hasMore && (
        <div className="mt-8 flex justify-center">
          <Button
            onClick={loadMore}
            variant="outline"
            disabled={isPending}
            className="min-w-[150px]"
          >
            {isPending ? "Loading..." : "Load More"}
          </Button>
        </div>
      )}
    </div>
  );
}



================================================
FILE: components/property/PropertyLocation.tsx
================================================
"use client";

import { MapPin } from "lucide-react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";

interface PropertyLocationProps {
  address: string;
  lat?: number;
  lng?: number;
}

export function PropertyLocation({ address, lat, lng }: PropertyLocationProps) {
  const hasCoordinates = lat !== undefined && lng !== undefined;

  return (
    <Card>
      <CardHeader className="pb-2">
        <CardTitle className="text-xl flex items-center gap-2">
          <MapPin className="h-5 w-5 text-primary" />
          Location
        </CardTitle>
      </CardHeader>
      <CardContent>
        <div className="space-y-4">
          <p className="text-muted-foreground">{address}</p>

          {hasCoordinates ? (
            <div className="aspect-video w-full bg-muted rounded-md overflow-hidden relative">
              {/* This would be replaced with an actual map component in a real implementation */}
              <div className="absolute inset-0 flex items-center justify-center">
                <p className="text-muted-foreground text-sm">
                  Map would be displayed here
                  <br />
                  Coordinates: {lat}, {lng}
                </p>
              </div>
            </div>
          ) : (
            <div className="aspect-video w-full bg-muted rounded-md flex items-center justify-center">
              <p className="text-muted-foreground text-sm">
                No map coordinates available
              </p>
            </div>
          )}

          <div className="text-sm text-muted-foreground">
            <p>Exact location provided after booking</p>
          </div>
        </div>
      </CardContent>
    </Card>
  );
}



================================================
FILE: components/property/PropertyStatistics.tsx
================================================
"use client";

import { Home, Building, MapPin } from "lucide-react";

interface PropertyStatisticsProps {
  totalProperties: number;
}

export function PropertyStatistics({
  totalProperties,
}: PropertyStatisticsProps) {
  return (
    <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
      <div className="bg-muted rounded-lg p-6 flex items-center">
        <div className="bg-primary/10 p-3 rounded-full mr-4">
          <Home className="h-6 w-6 text-primary" />
        </div>
        <div>
          <h3 className="text-2xl font-bold">{totalProperties}</h3>
          <p className="text-muted-foreground">Total Properties</p>
        </div>
      </div>
      <div className="bg-muted rounded-lg p-6 flex items-center">
        <div className="bg-primary/10 p-3 rounded-full mr-4">
          <Building className="h-6 w-6 text-primary" />
        </div>
        <div>
          <h3 className="text-2xl font-bold">5</h3>
          <p className="text-muted-foreground">Cities</p>
        </div>
      </div>
      <div className="bg-muted rounded-lg p-6 flex items-center">
        <div className="bg-primary/10 p-3 rounded-full mr-4">
          <MapPin className="h-6 w-6 text-primary" />
        </div>
        <div>
          <h3 className="text-2xl font-bold">24/7</h3>
          <p className="text-muted-foreground">Support Available</p>
        </div>
      </div>
    </div>
  );
}



================================================
FILE: components/property/PropertyTypeSelector.tsx
================================================
"use client";

import { useState } from "react";
import { Button } from "@/components/ui/button";
import { useRouter } from "next/navigation";

export function PropertyTypeSelector() {
  const [activeType, setActiveType] = useState<"buy" | "rent" | "all">("buy");
  const router = useRouter();

  const handleTypeChange = (type: "buy" | "rent" | "all") => {
    setActiveType(type);

    // Navigate to the appropriate search page
    switch (type) {
      case "buy":
        router.push("/search?propertyType=매매");
        break;
      case "rent":
        router.push("/search?propertyType=월세");
        break;
      case "all":
        router.push("/properties");
        break;
    }
  };

  return (
    <div className="bg-white rounded-lg p-1 flex mb-8 shadow-md">
      <Button
        variant={activeType === "buy" ? "default" : "ghost"}
        className="rounded-md px-8 py-2 text-base"
        onClick={() => handleTypeChange("buy")}
      >
        Buy
      </Button>
      <Button
        variant={activeType === "rent" ? "default" : "ghost"}
        className="rounded-md px-8 py-2 text-base"
        onClick={() => handleTypeChange("rent")}
      >
        Rent
      </Button>
      <Button
        variant={activeType === "all" ? "default" : "ghost"}
        className="rounded-md px-8 py-2 text-base"
        onClick={() => handleTypeChange("all")}
      >
        All
      </Button>
    </div>
  );
}



================================================
FILE: components/property/PropertyTypeTabs.tsx
================================================
"use client";

import { useState } from "react";
import { cn } from "@/lib/utils";

interface PropertyTypeTabsProps {
  defaultTab?: "rent" | "buy";
}

export function PropertyTypeTabs({
  defaultTab = "rent",
}: PropertyTypeTabsProps) {
  const [activeTab, setActiveTab] = useState<"rent" | "buy">(defaultTab);

  return (
    <div className="mb-8">
      <div className="flex border-b">
        <button
          onClick={() => setActiveTab("rent")}
          className={cn(
            "px-4 py-2 font-medium transition-colors",
            activeTab === "rent"
              ? "border-b-2 border-primary"
              : "text-muted-foreground hover:text-foreground",
          )}
        >
          For Rent (월세)
        </button>
        <button
          onClick={() => setActiveTab("buy")}
          className={cn(
            "px-4 py-2 font-medium transition-colors",
            activeTab === "buy"
              ? "border-b-2 border-primary"
              : "text-muted-foreground hover:text-foreground",
          )}
        >
          For Sale (매매)
        </button>
      </div>

      {/* Content for Rent Tab */}
      <div id="rent" className={cn("mt-6", activeTab !== "rent" && "hidden")}>
        <div id="rent-content"></div>
      </div>

      {/* Content for Buy Tab */}
      <div id="buy" className={cn("mt-6", activeTab !== "buy" && "hidden")}>
        <div id="buy-content"></div>
      </div>
    </div>
  );
}



================================================
FILE: components/property/SimilarProperties.tsx
================================================
"use client";

import Link from "next/link";
import { PropertyCard } from "@/components/property/PropertyCard";
import { PropertyCardSkeleton } from "@/components/property/PropertyCardSkeleton";
import { Button } from "@/components/ui/button";
import { PropertyListing } from "@/types/property";

interface SimilarPropertiesProps {
  properties: PropertyListing[];
  isLoading?: boolean;
}

export function SimilarProperties({
  properties,
  isLoading = false,
}: SimilarPropertiesProps) {
  if (isLoading) {
    return (
      <div className="space-y-4">
        <h2 className="text-2xl font-semibold">Similar Properties</h2>
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {Array.from({ length: 3 }).map((_, index) => (
            <PropertyCardSkeleton key={index} />
          ))}
        </div>
      </div>
    );
  }

  if (!properties || properties.length === 0) {
    return null;
  }

  return (
    <div className="space-y-4">
      <div className="flex items-center justify-between">
        <h2 className="text-2xl font-semibold">Similar Properties</h2>
        <Link href="/properties">
          <Button variant="ghost">View All</Button>
        </Link>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {properties.map((property) => (
          <PropertyCard key={property.id} property={property} />
        ))}
      </div>
    </div>
  );
}



================================================
FILE: components/providers/PropertyDataProvider.tsx
================================================
"use client";

import {
  createContext,
  useContext,
  useState,
  useCallback,
  useMemo,
  ReactNode,
} from "react";
import { useRouter, usePathname, useSearchParams } from "next/navigation";

interface PropertyDataContextType {
  isLoading: boolean;
  error: string | null;
  searchParams: Record<string, string>;
  updateSearchParams: (newParams: Record<string, string>) => void;
  resetSearchParams: () => void;
}

const PropertyDataContext = createContext<PropertyDataContextType | undefined>(
  undefined,
);

export function usePropertyData() {
  const context = useContext(PropertyDataContext);
  if (context === undefined) {
    throw new Error(
      "usePropertyData must be used within a PropertyDataProvider",
    );
  }
  return context;
}

interface PropertyDataProviderProps {
  children: ReactNode;
}

export function PropertyDataProvider({ children }: PropertyDataProviderProps) {
  const router = useRouter();
  const pathname = usePathname();
  const searchParams = useSearchParams();

  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  // Convert searchParams to a regular object, memoized
  const currentSearchParams = useMemo(() => {
    const params: Record<string, string> = {};
    searchParams.forEach((value, key) => {
      params[key] = value;
    });
    return params;
  }, [searchParams]);

  // Update search parameters and navigate
  const updateSearchParams = useCallback(
    (newParams: Record<string, string>) => {
      setIsLoading(true);
      setError(null);

      try {
        // Merge current params with new params
        const updatedParams = { ...currentSearchParams, ...newParams };

        // Remove any params with empty values
        Object.keys(updatedParams).forEach((key) => {
          if (updatedParams[key] === "" || updatedParams[key] === undefined) {
            delete updatedParams[key];
          }
        });

        // Build query string
        const queryString = new URLSearchParams(updatedParams).toString();

        // Navigate to the new URL
        router.push(`${pathname}?${queryString}`);
      } catch (err) {
        console.error("Error updating search params:", err);
        setError("Failed to update search parameters");
      } finally {
        setIsLoading(false);
      }
    },
    [currentSearchParams, pathname, router],
  );

  // Reset all search parameters
  const resetSearchParams = useCallback(() => {
    setIsLoading(true);
    setError(null);

    try {
      // Navigate to the current path without query params
      router.push(pathname);
    } catch (err) {
      console.error("Error resetting search params:", err);
      setError("Failed to reset search parameters");
    } finally {
      setIsLoading(false);
    }
  }, [pathname, router]);

  const value = {
    isLoading,
    error,
    searchParams: currentSearchParams,
    updateSearchParams,
    resetSearchParams,
  };

  return (
    <PropertyDataContext.Provider value={value}>
      {children}
    </PropertyDataContext.Provider>
  );
}



================================================
FILE: components/sections/ExploreSection.tsx
================================================
"use client";

import Image from "next/image";
import Link from "next/link";

interface CitiesData {
  name: string;
  imageUrl: string;
  propertyCount: number;
}

const cities: CitiesData[] = [
  {
    name: "Ho Chi Minh City",
    imageUrl:
      "https://images.unsplash.com/photo-1583417319070-4a69db38a482?q=80&w=2070&auto=format&fit=crop",
    propertyCount: 24,
  },
  {
    name: "Hanoi",
    imageUrl:
      "https://images.unsplash.com/photo-1509030450996-dd1a26dda07a?q=80&w=3023&auto=format&fit=crop&ixlib=rb-4.1.0&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D",
    propertyCount: 18,
  },
  {
    name: "Hai Phong",
    imageUrl:
      "https://images.unsplash.com/photo-1570559120097-e6c3388329e6?q=80&w=2940&auto=format&fit=crop&ixlib=rb-4.1.0&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D",
    propertyCount: 14,
  },
  {
    name: "Da Nang",
    imageUrl:
      "https://images.unsplash.com/photo-1564596823821-79b97151055e?q=80&w=2070&auto=format&fit=crop",
    propertyCount: 12,
  },
  {
    name: "Nha Trang",
    imageUrl:
      "https://images.unsplash.com/photo-1540611025311-01df3cef54b5?q=80&w=2070&auto=format&fit=crop",
    propertyCount: 8,
  },
  {
    name: "Hoi An",
    imageUrl:
      "https://images.unsplash.com/photo-1558334466-afce6bf36c69?q=80&w=2940&auto=format&fit=crop&ixlib=rb-4.1.0&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D",
    propertyCount: 6,
  },
];

export function ExploreSection() {
  return (
    <section className="container mx-auto px-4 mb-16">
      <div className="mb-8">
        <h2 className="text-3xl font-bold mb-4">베트남 집 둘러보기</h2>
        <p className="text-lg text-muted-foreground max-w-3xl">
          매물, 동네 사진, 후기, 현지 정보로 딱 맞는 집을 찾아보세요.
        </p>
      </div>

      {/* City Cards */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {cities.map((city, index) => (
          <CityCard
            key={index}
            name={city.name}
            imageUrl={city.imageUrl}
            propertyCount={city.propertyCount}
          />
        ))}
      </div>
    </section>
  );
}

interface CityCardProps {
  name: string;
  imageUrl: string;
  propertyCount: number;
}

function CityCard({ name, imageUrl, propertyCount }: CityCardProps) {
  return (
    <Link
      href={`/search?city=${encodeURIComponent(name)}`}
      className="block h-full"
    >
      <div className="relative rounded-lg overflow-hidden h-full min-h-[240px] group">
        {/* Background Image */}
        <div className="absolute inset-0">
          <Image
            src={imageUrl}
            alt={name}
            fill
            className="object-cover"
            sizes="(max-width: 768px) 100vw, (max-width: 1200px) 50vw, 33vw"
          />
        </div>

        {/* Gradient Overlay */}
        <div className="absolute inset-0 bg-gradient-to-t from-black/70 to-transparent"></div>

        {/* City Name and Property Count */}
        <div className="absolute bottom-0 left-0 p-4 w-full">
          <h3 className="text-xl font-bold text-white">{name}</h3>
          <p className="text-sm text-white/80">{propertyCount} properties</p>
        </div>

        {/* Hover Overlay */}
        <div className="absolute inset-0 bg-black/40 opacity-0 group-hover:opacity-100 transition-opacity duration-300 flex items-center justify-center">
          <div className="text-white flex items-center space-x-2">
            <span className="font-medium">View Homes</span>
            <svg
              width="16"
              height="16"
              viewBox="0 0 16 16"
              fill="none"
              xmlns="http://www.w3.org/2000/svg"
            >
              <path
                d="M6 12L10 8L6 4"
                stroke="white"
                strokeWidth="2"
                strokeLinecap="round"
                strokeLinejoin="round"
              />
            </svg>
          </div>
        </div>
      </div>
    </Link>
  );
}



================================================
FILE: components/sections/FeaturedPropertiesSection.tsx
================================================
"use client";

import Link from "next/link";
import { Button } from "@/components/ui/button";
import { FeaturedPropertyTabs } from "@/components/property/FeaturedPropertyTabs";
import { PropertyStatistics } from "@/components/property/PropertyStatistics";
import { PropertyListing } from "@/types/property";

interface FeaturedPropertiesSectionProps {
  rentProperties: PropertyListing[];
  buyProperties: PropertyListing[];
  totalProperties: number;
}

export function FeaturedPropertiesSection({
  rentProperties,
  buyProperties,
  totalProperties,
}: FeaturedPropertiesSectionProps) {
  return (
    <section className="container mx-auto px-4 mb-16">
      <div className="mb-8">
        <h2 className="text-3xl font-bold mb-4">Featured Properties</h2>
        <div className="flex justify-between items-center">
          <p className="text-lg text-muted-foreground">
            Discover our handpicked selection of properties in Vietnam
          </p>
          <Link href="/properties">
            <Button variant="outline">View All Properties</Button>
          </Link>
        </div>
      </div>

      {/* Property Tabs */}
      <FeaturedPropertyTabs
        rentProperties={rentProperties}
        buyProperties={buyProperties}
      />

      {/* Property Statistics */}
      <PropertyStatistics totalProperties={totalProperties} />
    </section>
  );
}



================================================
FILE: components/sections/FeatureHighlightsSection.tsx
================================================
"use client";

import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Home, Search, MapPin } from "lucide-react";
import Link from "next/link";

interface FeatureHighlight {
  icon: React.ElementType;
  title: string;
  description: string;
  ctaText: string;
  ctaLink: string;
}

const features: FeatureHighlight[] = [
  {
    icon: Home,
    title: "집 찾기",
    description:
      "다양한 매물 목록과 상세 정보를 통해 완벽한 집이나 아파트를 찾아보세요.",
    ctaText: "집 검색",
    ctaLink: "/search", // Adjust link as needed
  },
  {
    icon: Search,
    title: "고급 검색",
    description:
      "강력한 필터와 맞춤 검색을 사용하여 원하는 옵션을 빠르고 쉽게 찾아보세요.",
    ctaText: "검색 세분화",
    ctaLink: "/search", // Adjust link as needed
  },
  {
    icon: MapPin,
    title: "지역 탐색",
    description:
      "지역 정보, 편의 시설 및 관심 장소와 함께 다양한 동네를 발견해보세요.",
    ctaText: "더 알아보기",
    ctaLink: "#", // Placeholder link, adjust as needed
  },
];

export function FeatureHighlightsSection() {
  return (
    <section className="py-16 bg-[#f7f9fa]">
      <div className="container mx-auto px-4">
        <div className="bg-white border border-gray-200 rounded-2xl shadow-lg p-6 mb-4">
          <h2 className="text-2xl font-semibold text-center mb-8">
            저희가 어떻게 도와드릴 수 있는지 확인해보세요
          </h2>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-8">
            {features.map((feature, index) => (
              <Card
                key={index}
                className="text-center bg-white border border-gray-200 rounded-xl shadow-md hover:shadow-lg transition-shadow duration-300"
              >
                <CardHeader className="items-center pb-2">
                  <feature.icon className="h-10 w-10 text-primary mb-3" />
                  <CardTitle className="text-lg font-semibold">
                    {feature.title}
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <p className="text-muted-foreground mb-6 text-sm">
                    {feature.description}
                  </p>
                  <Button
                    asChild
                    variant="default"
                    className="rounded-lg font-medium"
                  >
                    <Link href={feature.ctaLink}>{feature.ctaText}</Link>
                  </Button>
                </CardContent>
              </Card>
            ))}
          </div>
        </div>
      </div>
    </section>
  );
}



================================================
FILE: components/sections/HeroSection.tsx
================================================
"use client";

import Image from "next/image";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Search } from "lucide-react";
import { FormEvent, useState } from "react";
import { useRouter } from "next/navigation";

export function HeroSection() {
  const [searchText, setSearchText] = useState("");
  const [activeTab, setActiveTab] = useState<"buy" | "rent">("buy");
  const router = useRouter();

  const handleSearch = (e: FormEvent) => {
    e.preventDefault();
    if (searchText.trim()) {
      router.push(
        `/search?searchText=${encodeURIComponent(searchText.trim())}&type=${activeTab}`,
      );
    }
  };

  return (
    <section className="relative w-full min-h-[600px] rounded-lg overflow-hidden mb-16">
      {/* Background Image */}
      <div className="absolute inset-0 bg-zinc-900">
        {/* We'll use a placeholder image for now */}
        <div className="absolute inset-0 bg-gradient-to-b from-black/50 to-transparent z-10"></div>
        <div className="absolute inset-0 flex items-center justify-center">
          <div className="w-full h-full relative">
            <Image
              src="https://images.unsplash.com/photo-1560448204-603b3fc33ddc?q=80&w=2070&auto=format&fit=crop"
              alt="Property in Vietnam"
              fill
              className="object-cover"
              priority
            />
          </div>
        </div>
      </div>

      {/* Content */}
      <div className="relative z-20 container mx-auto px-4 py-16 flex flex-col items-center justify-center min-h-[600px] text-center">
        <h1 className="text-4xl md:text-5xl lg:text-6xl font-bold text-white mb-12 max-w-3xl leading-tight drop-shadow-md">
          살고 싶은 곳을
          <br />
          발견하세요
        </h1>

        {/* Search Box Container */}
        <div className="bg-white rounded-lg shadow-lg w-full max-w-2xl">
          {/* Toggle Buttons */}
          <div className="flex border-b border-gray-200">
            <button
              onClick={() => setActiveTab("buy")}
              className={`flex-1 py-4 text-lg font-medium transition-colors ${
                activeTab === "buy"
                  ? "text-[#007882] border-b-2 border-[#007882]"
                  : "text-[#2A2A33] hover:text-[#007882]"
              }`}
            >
              매매
            </button>
            <button
              onClick={() => setActiveTab("rent")}
              className={`flex-1 py-4 text-lg font-medium transition-colors ${
                activeTab === "rent"
                  ? "text-[#007882] border-b-2 border-[#007882]"
                  : "text-[#2A2A33] hover:text-[#007882]"
              }`}
            >
              월세
            </button>
          </div>

          {/* Search Bar */}
          <form onSubmit={handleSearch} className="p-4">
            <div className="relative flex items-center">
              <Input
                type="text"
                name="searchText"
                value={searchText}
                onChange={(e) => setSearchText(e.target.value)}
                placeholder="위치를 입력하세요"
                className="w-full h-14 pl-4 pr-16 text-lg rounded-lg border-2 border-gray-200 focus:border-[#007882] focus:ring-[#007882] placeholder:text-gray-500"
                aria-label="Search Location"
              />
              <Button
                type="submit"
                size="icon"
                className="absolute right-2 top-2 h-10 w-10 rounded-lg bg-[#E95C33] hover:bg-[#D14A21] text-white"
                aria-label="Submit Search"
              >
                <Search className="h-5 w-5" />
              </Button>
            </div>
          </form>
        </div>
      </div>
    </section>
  );
}



================================================
FILE: components/sections/KoreanExpatriatesSection.tsx
================================================
"use client";

import Link from "next/link";
import { Button } from "@/components/ui/button";

export function KoreanExpatriatesSection() {
  return (
    <section className="bg-muted py-12 px-4 rounded-lg mb-16">
      <div className="container mx-auto">
        <h2 className="text-2xl font-semibold mb-4 text-center">
          베트남에 있는 한국인 거주자들을 위한 서비스
        </h2>
        <p className="text-muted-foreground mb-6 text-center max-w-2xl mx-auto">
          저희 플랫폼은 한인 커뮤니티, 국제학교, 한국인 편의시설 근처의 부동산을 전문으로 합니다
        </p>
        <div className="flex justify-center">
          <Link href="/search">
            <Button size="lg">검색 시작하기</Button>
          </Link>
        </div>
      </div>
    </section>
  );
}



================================================
FILE: components/stagewise/StagewiseToolbarLoader.tsx
================================================
"use client";

import { StagewiseToolbar } from "@stagewise/toolbar-next";

const stagewiseConfig = { plugins: [] };

export default function StagewiseToolbarLoader() {
  if (process.env.NODE_ENV !== "development") return null;
  return <StagewiseToolbar config={stagewiseConfig} />;
}



================================================
FILE: components/ui/alert.tsx
================================================
"use client";

import * as React from "react";
import { cva, type VariantProps } from "class-variance-authority";
import { cn } from "@/lib/utils";

const alertVariants = cva(
  "relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground",
  {
    variants: {
      variant: {
        default: "bg-background text-foreground",
        destructive:
          "border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive",
        success:
          "border-green-500/50 text-green-700 dark:border-green-500 [&>svg]:text-green-600",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  },
);

const Alert = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>
>(({ className, variant, ...props }, ref) => (
  <div
    ref={ref}
    role="alert"
    className={cn(alertVariants({ variant }), className)}
    {...props}
  />
));
Alert.displayName = "Alert";

const AlertTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h5
    ref={ref}
    className={cn("mb-1 font-medium leading-none tracking-tight", className)}
    {...props}
  />
));
AlertTitle.displayName = "AlertTitle";

const AlertDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm [&_p]:leading-relaxed", className)}
    {...props}
  />
));
AlertDescription.displayName = "AlertDescription";

export { Alert, AlertTitle, AlertDescription };



================================================
FILE: components/ui/button.tsx
================================================
import * as React from "react";
import { Slot } from "@radix-ui/react-slot";
import { cva, type VariantProps } from "class-variance-authority";

import { cn } from "@/lib/utils";

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-all disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive",
  {
    variants: {
      variant: {
        default:
          "bg-primary text-primary-foreground shadow-xs hover:bg-primary/90",
        destructive:
          "bg-destructive text-white shadow-xs hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60",
        outline:
          "border bg-background shadow-xs hover:bg-accent hover:text-accent-foreground dark:bg-input/30 dark:border-input dark:hover:bg-input/50",
        secondary:
          "bg-secondary text-secondary-foreground shadow-xs hover:bg-secondary/80",
        ghost:
          "hover:bg-accent hover:text-accent-foreground dark:hover:bg-accent/50",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-9 px-4 py-2 has-[>svg]:px-3",
        sm: "h-8 rounded-md gap-1.5 px-3 has-[>svg]:px-2.5",
        lg: "h-10 rounded-md px-6 has-[>svg]:px-4",
        icon: "size-9",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  },
);

function Button({
  className,
  variant,
  size,
  asChild = false,
  ...props
}: React.ComponentProps<"button"> &
  VariantProps<typeof buttonVariants> & {
    asChild?: boolean;
  }) {
  const Comp = asChild ? Slot : "button";

  return (
    <Comp
      data-slot="button"
      className={cn(buttonVariants({ variant, size, className }))}
      {...props}
    />
  );
}

export { Button, buttonVariants };



================================================
FILE: components/ui/card.tsx
================================================
import * as React from "react";

import { cn } from "@/lib/utils";

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "rounded-xl border bg-card text-card-foreground shadow",
      className,
    )}
    {...props}
  />
));
Card.displayName = "Card";

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
));
CardHeader.displayName = "CardHeader";

const CardTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h3
    ref={ref}
    className={cn("font-semibold leading-none tracking-tight", className)}
    {...props}
  />
));
CardTitle.displayName = "CardTitle";

const CardDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <p
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
));
CardDescription.displayName = "CardDescription";

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
));
CardContent.displayName = "CardContent";

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
));
CardFooter.displayName = "CardFooter";

export {
  Card,
  CardHeader,
  CardFooter,
  CardTitle,
  CardDescription,
  CardContent,
};



================================================
FILE: components/ui/carousel.tsx
================================================
"use client";

import * as React from "react";
import useEmblaCarousel, {
  type UseEmblaCarouselType,
} from "embla-carousel-react";
import { ArrowLeft, ArrowRight } from "lucide-react";

import { cn } from "@/lib/utils";
import { Button } from "@/components/ui/button";

type CarouselApi = UseEmblaCarouselType[1];
type UseCarouselParameters = Parameters<typeof useEmblaCarousel>;
type CarouselOptions = UseCarouselParameters[0];
type CarouselPlugin = UseCarouselParameters[1];

type CarouselProps = {
  opts?: CarouselOptions;
  plugins?: CarouselPlugin;
  orientation?: "horizontal" | "vertical";
  setApi?: (api: CarouselApi) => void;
};

type CarouselContextProps = {
  carouselRef: ReturnType<typeof useEmblaCarousel>[0];
  api: ReturnType<typeof useEmblaCarousel>[1];
  scrollPrev: () => void;
  scrollNext: () => void;
  canScrollPrev: boolean;
  canScrollNext: boolean;
} & CarouselProps;

const CarouselContext = React.createContext<CarouselContextProps | null>(null);

function useCarousel() {
  const context = React.useContext(CarouselContext);

  if (!context) {
    throw new Error("useCarousel must be used within a <Carousel />");
  }

  return context;
}

const Carousel = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & CarouselProps
>(
  (
    {
      orientation = "horizontal",
      opts,
      setApi,
      plugins,
      className,
      children,
      ...props
    },
    ref,
  ) => {
    const [carouselRef, api] = useEmblaCarousel(
      {
        ...opts,
        axis: orientation === "horizontal" ? "x" : "y",
      },
      plugins,
    );
    const [canScrollPrev, setCanScrollPrev] = React.useState(false);
    const [canScrollNext, setCanScrollNext] = React.useState(false);

    const onSelect = React.useCallback((api: CarouselApi) => {
      if (!api) {
        return;
      }

      setCanScrollPrev(api.canScrollPrev());
      setCanScrollNext(api.canScrollNext());
    }, []);

    const scrollPrev = React.useCallback(() => {
      api?.scrollPrev();
    }, [api]);

    const scrollNext = React.useCallback(() => {
      api?.scrollNext();
    }, [api]);

    const handleKeyDown = React.useCallback(
      (event: React.KeyboardEvent<HTMLDivElement>) => {
        if (event.key === "ArrowLeft") {
          event.preventDefault();
          scrollPrev();
        } else if (event.key === "ArrowRight") {
          event.preventDefault();
          scrollNext();
        }
      },
      [scrollPrev, scrollNext],
    );

    React.useEffect(() => {
      if (!api || !setApi) {
        return;
      }

      setApi(api);
    }, [api, setApi]);

    React.useEffect(() => {
      if (!api) {
        return;
      }

      onSelect(api);
      api.on("reInit", onSelect);
      api.on("select", onSelect);

      return () => {
        api?.off("select", onSelect);
      };
    }, [api, onSelect]);

    return (
      <CarouselContext.Provider
        value={{
          carouselRef,
          api: api,
          opts,
          orientation:
            orientation || (opts?.axis === "y" ? "vertical" : "horizontal"),
          scrollPrev,
          scrollNext,
          canScrollPrev,
          canScrollNext,
        }}
      >
        <div
          ref={ref}
          onKeyDownCapture={handleKeyDown}
          className={cn("relative", className)}
          role="region"
          aria-roledescription="carousel"
          {...props}
        >
          {children}
        </div>
      </CarouselContext.Provider>
    );
  },
);
Carousel.displayName = "Carousel";

const CarouselContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const { carouselRef, orientation } = useCarousel();

  return (
    <div ref={carouselRef} className="overflow-hidden">
      <div
        ref={ref}
        className={cn(
          "flex",
          orientation === "horizontal" ? "-ml-4" : "-mt-4 flex-col",
          className,
        )}
        {...props}
      />
    </div>
  );
});
CarouselContent.displayName = "CarouselContent";

const CarouselItem = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const { orientation } = useCarousel();

  return (
    <div
      ref={ref}
      role="group"
      aria-roledescription="slide"
      className={cn(
        "min-w-0 shrink-0 grow-0 basis-full",
        orientation === "horizontal" ? "pl-4" : "pt-4",
        className,
      )}
      {...props}
    />
  );
});
CarouselItem.displayName = "CarouselItem";

const CarouselPrevious = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<typeof Button>
>(({ className, variant = "outline", size = "icon", ...props }, ref) => {
  const { orientation, scrollPrev, canScrollPrev } = useCarousel();

  return (
    <Button
      ref={ref}
      variant={variant}
      size={size}
      className={cn(
        "absolute h-8 w-8 rounded-full",
        orientation === "horizontal"
          ? "-left-12 top-1/2 -translate-y-1/2"
          : "-top-12 left-1/2 -translate-x-1/2 rotate-90",
        className,
      )}
      disabled={!canScrollPrev}
      onClick={scrollPrev}
      {...props}
    >
      <ArrowLeft className="h-4 w-4" />
      <span className="sr-only">Previous slide</span>
    </Button>
  );
});
CarouselPrevious.displayName = "CarouselPrevious";

const CarouselNext = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<typeof Button>
>(({ className, variant = "outline", size = "icon", ...props }, ref) => {
  const { orientation, scrollNext, canScrollNext } = useCarousel();

  return (
    <Button
      ref={ref}
      variant={variant}
      size={size}
      className={cn(
        "absolute h-8 w-8 rounded-full",
        orientation === "horizontal"
          ? "-right-12 top-1/2 -translate-y-1/2"
          : "-bottom-12 left-1/2 -translate-x-1/2 rotate-90",
        className,
      )}
      disabled={!canScrollNext}
      onClick={scrollNext}
      {...props}
    >
      <ArrowRight className="h-4 w-4" />
      <span className="sr-only">Next slide</span>
    </Button>
  );
});
CarouselNext.displayName = "CarouselNext";

export {
  type CarouselApi,
  Carousel,
  CarouselContent,
  CarouselItem,
  CarouselPrevious,
  CarouselNext,
};



================================================
FILE: components/ui/checkbox.tsx
================================================
"use client";

import * as React from "react";
import * as CheckboxPrimitive from "@radix-ui/react-checkbox";
import { Check } from "lucide-react";

import { cn } from "@/lib/utils";

const Checkbox = React.forwardRef<
  React.ElementRef<typeof CheckboxPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>
>(({ className, ...props }, ref) => (
  <CheckboxPrimitive.Root
    ref={ref}
    className={cn(
      "peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground",
      className,
    )}
    {...props}
  >
    <CheckboxPrimitive.Indicator
      className={cn("flex items-center justify-center text-current")}
    >
      <Check className="h-4 w-4" />
    </CheckboxPrimitive.Indicator>
  </CheckboxPrimitive.Root>
));
Checkbox.displayName = CheckboxPrimitive.Root.displayName;

export { Checkbox };



================================================
FILE: components/ui/dialog.tsx
================================================
"use client";

import * as React from "react";
import * as DialogPrimitive from "@radix-ui/react-dialog";
import { X } from "lucide-react";

import { cn } from "@/lib/utils"; // Assuming utils file exists

const Dialog = DialogPrimitive.Root;

const DialogTrigger = DialogPrimitive.Trigger;

const DialogPortal = DialogPrimitive.Portal;

const DialogClose = DialogPrimitive.Close;

const DialogOverlay = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Overlay
    ref={ref}
    className={cn(
      "fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className,
    )}
    {...props}
  />
));
DialogOverlay.displayName = DialogPrimitive.Overlay.displayName;

const DialogContent = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DialogPortal>
    <DialogOverlay />
    <DialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className,
      )}
      {...props}
    >
      {children}
      <DialogPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </DialogPrimitive.Close>
    </DialogPrimitive.Content>
  </DialogPortal>
));
DialogContent.displayName = DialogPrimitive.Content.displayName;

const DialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-1.5 text-center sm:text-left",
      className,
    )}
    {...props}
  />
);
DialogHeader.displayName = "DialogHeader";

const DialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className,
    )}
    {...props}
  />
);
DialogFooter.displayName = "DialogFooter";

const DialogTitle = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className,
    )}
    {...props}
  />
));
DialogTitle.displayName = DialogPrimitive.Title.displayName;

const DialogDescription = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
));
DialogDescription.displayName = DialogPrimitive.Description.displayName;

export {
  Dialog,
  DialogPortal,
  DialogOverlay,
  DialogClose,
  DialogTrigger,
  DialogContent,
  DialogHeader,
  DialogFooter,
  DialogTitle,
  DialogDescription,
};



================================================
FILE: components/ui/dropdown-menu.tsx
================================================
"use client";

import * as React from "react";
import * as DropdownMenuPrimitive from "@radix-ui/react-dropdown-menu";
import { CheckIcon, ChevronRightIcon, CircleIcon } from "lucide-react";

import { cn } from "@/lib/utils";

function DropdownMenu({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Root>) {
  return <DropdownMenuPrimitive.Root data-slot="dropdown-menu" {...props} />;
}

function DropdownMenuPortal({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Portal>) {
  return (
    <DropdownMenuPrimitive.Portal data-slot="dropdown-menu-portal" {...props} />
  );
}

function DropdownMenuTrigger({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Trigger>) {
  return (
    <DropdownMenuPrimitive.Trigger
      data-slot="dropdown-menu-trigger"
      {...props}
    />
  );
}

function DropdownMenuContent({
  className,
  sideOffset = 4,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Content>) {
  return (
    <DropdownMenuPrimitive.Portal>
      <DropdownMenuPrimitive.Content
        data-slot="dropdown-menu-content"
        sideOffset={sideOffset}
        className={cn(
          "bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 max-h-(--radix-dropdown-menu-content-available-height) min-w-[8rem] origin-(--radix-dropdown-menu-content-transform-origin) overflow-x-hidden overflow-y-auto rounded-md border p-1 shadow-md",
          className,
        )}
        {...props}
      />
    </DropdownMenuPrimitive.Portal>
  );
}

function DropdownMenuGroup({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Group>) {
  return (
    <DropdownMenuPrimitive.Group data-slot="dropdown-menu-group" {...props} />
  );
}

function DropdownMenuItem({
  className,
  inset,
  variant = "default",
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Item> & {
  inset?: boolean;
  variant?: "default" | "destructive";
}) {
  return (
    <DropdownMenuPrimitive.Item
      data-slot="dropdown-menu-item"
      data-inset={inset}
      data-variant={variant}
      className={cn(
        "focus:bg-accent focus:text-accent-foreground data-[variant=destructive]:text-destructive data-[variant=destructive]:focus:bg-destructive/10 dark:data-[variant=destructive]:focus:bg-destructive/20 data-[variant=destructive]:focus:text-destructive data-[variant=destructive]:*:[svg]:!text-destructive [&_svg:not([class*='text-'])]:text-muted-foreground relative flex cursor-default items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 data-[inset]:pl-8 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className,
      )}
      {...props}
    />
  );
}

function DropdownMenuCheckboxItem({
  className,
  children,
  checked,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.CheckboxItem>) {
  return (
    <DropdownMenuPrimitive.CheckboxItem
      data-slot="dropdown-menu-checkbox-item"
      className={cn(
        "focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-sm py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className,
      )}
      checked={checked}
      {...props}
    >
      <span className="pointer-events-none absolute left-2 flex size-3.5 items-center justify-center">
        <DropdownMenuPrimitive.ItemIndicator>
          <CheckIcon className="size-4" />
        </DropdownMenuPrimitive.ItemIndicator>
      </span>
      {children}
    </DropdownMenuPrimitive.CheckboxItem>
  );
}

function DropdownMenuRadioGroup({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.RadioGroup>) {
  return (
    <DropdownMenuPrimitive.RadioGroup
      data-slot="dropdown-menu-radio-group"
      {...props}
    />
  );
}

function DropdownMenuRadioItem({
  className,
  children,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.RadioItem>) {
  return (
    <DropdownMenuPrimitive.RadioItem
      data-slot="dropdown-menu-radio-item"
      className={cn(
        "focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-sm py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className,
      )}
      {...props}
    >
      <span className="pointer-events-none absolute left-2 flex size-3.5 items-center justify-center">
        <DropdownMenuPrimitive.ItemIndicator>
          <CircleIcon className="size-2 fill-current" />
        </DropdownMenuPrimitive.ItemIndicator>
      </span>
      {children}
    </DropdownMenuPrimitive.RadioItem>
  );
}

function DropdownMenuLabel({
  className,
  inset,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Label> & {
  inset?: boolean;
}) {
  return (
    <DropdownMenuPrimitive.Label
      data-slot="dropdown-menu-label"
      data-inset={inset}
      className={cn(
        "px-2 py-1.5 text-sm font-medium data-[inset]:pl-8",
        className,
      )}
      {...props}
    />
  );
}

function DropdownMenuSeparator({
  className,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Separator>) {
  return (
    <DropdownMenuPrimitive.Separator
      data-slot="dropdown-menu-separator"
      className={cn("bg-border -mx-1 my-1 h-px", className)}
      {...props}
    />
  );
}

function DropdownMenuShortcut({
  className,
  ...props
}: React.ComponentProps<"span">) {
  return (
    <span
      data-slot="dropdown-menu-shortcut"
      className={cn(
        "text-muted-foreground ml-auto text-xs tracking-widest",
        className,
      )}
      {...props}
    />
  );
}

function DropdownMenuSub({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Sub>) {
  return <DropdownMenuPrimitive.Sub data-slot="dropdown-menu-sub" {...props} />;
}

function DropdownMenuSubTrigger({
  className,
  inset,
  children,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.SubTrigger> & {
  inset?: boolean;
}) {
  return (
    <DropdownMenuPrimitive.SubTrigger
      data-slot="dropdown-menu-sub-trigger"
      data-inset={inset}
      className={cn(
        "focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground flex cursor-default items-center rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[inset]:pl-8",
        className,
      )}
      {...props}
    >
      {children}
      <ChevronRightIcon className="ml-auto size-4" />
    </DropdownMenuPrimitive.SubTrigger>
  );
}

function DropdownMenuSubContent({
  className,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.SubContent>) {
  return (
    <DropdownMenuPrimitive.SubContent
      data-slot="dropdown-menu-sub-content"
      className={cn(
        "bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 min-w-[8rem] origin-(--radix-dropdown-menu-content-transform-origin) overflow-hidden rounded-md border p-1 shadow-lg",
        className,
      )}
      {...props}
    />
  );
}

export {
  DropdownMenu,
  DropdownMenuPortal,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuGroup,
  DropdownMenuLabel,
  DropdownMenuItem,
  DropdownMenuCheckboxItem,
  DropdownMenuRadioGroup,
  DropdownMenuRadioItem,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuSub,
  DropdownMenuSubTrigger,
  DropdownMenuSubContent,
};



================================================
FILE: components/ui/form.tsx
================================================
"use client";

import * as React from "react";
import * as LabelPrimitive from "@radix-ui/react-label";
import { Slot } from "@radix-ui/react-slot";
import {
  Controller,
  FormProvider,
  useFormContext,
  useFormState,
  type ControllerProps,
  type FieldPath,
  type FieldValues,
} from "react-hook-form";

import { cn } from "@/lib/utils";
import { Label } from "@/components/ui/label";

const Form = FormProvider;

type FormFieldContextValue<
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,
> = {
  name: TName;
};

const FormFieldContext = React.createContext<FormFieldContextValue>(
  {} as FormFieldContextValue,
);

const FormField = <
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,
>({
  ...props
}: ControllerProps<TFieldValues, TName>) => {
  return (
    <FormFieldContext.Provider value={{ name: props.name }}>
      <Controller {...props} />
    </FormFieldContext.Provider>
  );
};

const useFormField = () => {
  const fieldContext = React.useContext(FormFieldContext);
  const itemContext = React.useContext(FormItemContext);
  const { getFieldState } = useFormContext();
  const formState = useFormState({ name: fieldContext.name });
  const fieldState = getFieldState(fieldContext.name, formState);

  if (!fieldContext) {
    throw new Error("useFormField should be used within <FormField>");
  }

  const { id } = itemContext;

  return {
    id,
    name: fieldContext.name,
    formItemId: `${id}-form-item`,
    formDescriptionId: `${id}-form-item-description`,
    formMessageId: `${id}-form-item-message`,
    ...fieldState,
  };
};

type FormItemContextValue = {
  id: string;
};

const FormItemContext = React.createContext<FormItemContextValue>(
  {} as FormItemContextValue,
);

function FormItem({ className, ...props }: React.ComponentProps<"div">) {
  const id = React.useId();

  return (
    <FormItemContext.Provider value={{ id }}>
      <div
        data-slot="form-item"
        className={cn("grid gap-2", className)}
        {...props}
      />
    </FormItemContext.Provider>
  );
}

function FormLabel({
  className,
  ...props
}: React.ComponentProps<typeof LabelPrimitive.Root>) {
  const { error, formItemId } = useFormField();

  return (
    <Label
      data-slot="form-label"
      data-error={!!error}
      className={cn("data-[error=true]:text-destructive", className)}
      htmlFor={formItemId}
      {...props}
    />
  );
}

function FormControl({ ...props }: React.ComponentProps<typeof Slot>) {
  const { error, formItemId, formDescriptionId, formMessageId } =
    useFormField();

  return (
    <Slot
      data-slot="form-control"
      id={formItemId}
      aria-describedby={
        !error
          ? `${formDescriptionId}`
          : `${formDescriptionId} ${formMessageId}`
      }
      aria-invalid={!!error}
      {...props}
    />
  );
}

function FormDescription({ className, ...props }: React.ComponentProps<"p">) {
  const { formDescriptionId } = useFormField();

  return (
    <p
      data-slot="form-description"
      id={formDescriptionId}
      className={cn("text-muted-foreground text-sm", className)}
      {...props}
    />
  );
}

function FormMessage({ className, ...props }: React.ComponentProps<"p">) {
  const { error, formMessageId } = useFormField();
  const body = error ? String(error?.message ?? "") : props.children;

  if (!body) {
    return null;
  }

  return (
    <p
      data-slot="form-message"
      id={formMessageId}
      className={cn("text-destructive text-sm", className)}
      {...props}
    >
      {body}
    </p>
  );
}

export {
  useFormField,
  Form,
  FormItem,
  FormLabel,
  FormControl,
  FormDescription,
  FormMessage,
  FormField,
};



================================================
FILE: components/ui/input.tsx
================================================
import * as React from "react";

import { cn } from "@/lib/utils";

const Input = React.forwardRef<
  HTMLInputElement,
  React.InputHTMLAttributes<HTMLInputElement>
>(({ className, type, ...props }, ref) => {
  return (
    <input
      type={type}
      className={cn(
        "flex h-9 w-full rounded-md border border-input bg-background px-3 py-1 text-sm shadow-sm transition-colors file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50",
        className,
      )}
      ref={ref}
      {...props}
    />
  );
});
Input.displayName = "Input";

export { Input };



================================================
FILE: components/ui/label.tsx
================================================
"use client";

import * as React from "react";
import * as LabelPrimitive from "@radix-ui/react-label";

import { cn } from "@/lib/utils";

function Label({
  className,
  ...props
}: React.ComponentProps<typeof LabelPrimitive.Root>) {
  return (
    <LabelPrimitive.Root
      data-slot="label"
      className={cn(
        "flex items-center gap-2 text-sm leading-none font-medium select-none group-data-[disabled=true]:pointer-events-none group-data-[disabled=true]:opacity-50 peer-disabled:cursor-not-allowed peer-disabled:opacity-50",
        className,
      )}
      {...props}
    />
  );
}

export { Label };



================================================
FILE: components/ui/select.tsx
================================================
"use client";

import * as React from "react";
import * as SelectPrimitive from "@radix-ui/react-select";
import { CheckIcon, ChevronDownIcon, ChevronUpIcon } from "lucide-react";

import { cn } from "@/lib/utils";

function Select({
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Root>) {
  return <SelectPrimitive.Root data-slot="select" {...props} />;
}

function SelectGroup({
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Group>) {
  return <SelectPrimitive.Group data-slot="select-group" {...props} />;
}

function SelectValue({
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Value>) {
  return <SelectPrimitive.Value data-slot="select-value" {...props} />;
}

function SelectTrigger({
  className,
  size = "default",
  children,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Trigger> & {
  size?: "sm" | "default";
}) {
  return (
    <SelectPrimitive.Trigger
      data-slot="select-trigger"
      data-size={size}
      className={cn(
        "border-input data-[placeholder]:text-muted-foreground [&_svg:not([class*='text-'])]:text-muted-foreground focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive dark:bg-input/30 dark:hover:bg-input/50 flex w-fit items-center justify-between gap-2 rounded-md border bg-transparent px-3 py-2 text-sm whitespace-nowrap shadow-xs transition-[color,box-shadow] outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50 data-[size=default]:h-9 data-[size=sm]:h-8 *:data-[slot=select-value]:line-clamp-1 *:data-[slot=select-value]:flex *:data-[slot=select-value]:items-center *:data-[slot=select-value]:gap-2 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className,
      )}
      {...props}
    >
      {children}
      <SelectPrimitive.Icon asChild>
        <ChevronDownIcon className="size-4 opacity-50" />
      </SelectPrimitive.Icon>
    </SelectPrimitive.Trigger>
  );
}

function SelectContent({
  className,
  children,
  position = "popper",
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Content>) {
  return (
    <SelectPrimitive.Portal>
      <SelectPrimitive.Content
        data-slot="select-content"
        className={cn(
          "bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 relative z-50 max-h-(--radix-select-content-available-height) min-w-[8rem] origin-(--radix-select-content-transform-origin) overflow-x-hidden overflow-y-auto rounded-md border shadow-md",
          position === "popper" &&
            "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
          className,
        )}
        position={position}
        {...props}
      >
        <SelectScrollUpButton />
        <SelectPrimitive.Viewport
          className={cn(
            "p-1",
            position === "popper" &&
              "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)] scroll-my-1",
          )}
        >
          {children}
        </SelectPrimitive.Viewport>
        <SelectScrollDownButton />
      </SelectPrimitive.Content>
    </SelectPrimitive.Portal>
  );
}

function SelectLabel({
  className,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Label>) {
  return (
    <SelectPrimitive.Label
      data-slot="select-label"
      className={cn("text-muted-foreground px-2 py-1.5 text-xs", className)}
      {...props}
    />
  );
}

function SelectItem({
  className,
  children,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Item>) {
  return (
    <SelectPrimitive.Item
      data-slot="select-item"
      className={cn(
        "focus:bg-accent focus:text-accent-foreground [&_svg:not([class*='text-'])]:text-muted-foreground relative flex w-full cursor-default items-center gap-2 rounded-sm py-1.5 pr-8 pl-2 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4 *:[span]:last:flex *:[span]:last:items-center *:[span]:last:gap-2",
        className,
      )}
      {...props}
    >
      <span className="absolute right-2 flex size-3.5 items-center justify-center">
        <SelectPrimitive.ItemIndicator>
          <CheckIcon className="size-4" />
        </SelectPrimitive.ItemIndicator>
      </span>
      <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
    </SelectPrimitive.Item>
  );
}

function SelectSeparator({
  className,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Separator>) {
  return (
    <SelectPrimitive.Separator
      data-slot="select-separator"
      className={cn("bg-border pointer-events-none -mx-1 my-1 h-px", className)}
      {...props}
    />
  );
}

function SelectScrollUpButton({
  className,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.ScrollUpButton>) {
  return (
    <SelectPrimitive.ScrollUpButton
      data-slot="select-scroll-up-button"
      className={cn(
        "flex cursor-default items-center justify-center py-1",
        className,
      )}
      {...props}
    >
      <ChevronUpIcon className="size-4" />
    </SelectPrimitive.ScrollUpButton>
  );
}

function SelectScrollDownButton({
  className,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.ScrollDownButton>) {
  return (
    <SelectPrimitive.ScrollDownButton
      data-slot="select-scroll-down-button"
      className={cn(
        "flex cursor-default items-center justify-center py-1",
        className,
      )}
      {...props}
    >
      <ChevronDownIcon className="size-4" />
    </SelectPrimitive.ScrollDownButton>
  );
}

export {
  Select,
  SelectContent,
  SelectGroup,
  SelectItem,
  SelectLabel,
  SelectScrollDownButton,
  SelectScrollUpButton,
  SelectSeparator,
  SelectTrigger,
  SelectValue,
};



================================================
FILE: components/ui/separator.tsx
================================================
"use client";

import * as React from "react";
import * as SeparatorPrimitive from "@radix-ui/react-separator";

import { cn } from "@/lib/utils";

function Separator({
  className,
  orientation = "horizontal",
  decorative = true,
  ...props
}: React.ComponentProps<typeof SeparatorPrimitive.Root>) {
  return (
    <SeparatorPrimitive.Root
      data-slot="separator-root"
      decorative={decorative}
      orientation={orientation}
      className={cn(
        "bg-border shrink-0 data-[orientation=horizontal]:h-px data-[orientation=horizontal]:w-full data-[orientation=vertical]:h-full data-[orientation=vertical]:w-px",
        className,
      )}
      {...props}
    />
  );
}

export { Separator };



================================================
FILE: components/ui/sonner.tsx
================================================
"use client";

import { useTheme } from "next-themes";
import { Toaster as Sonner, ToasterProps } from "sonner";

const Toaster = ({ ...props }: ToasterProps) => {
  const { theme = "system" } = useTheme();

  return (
    <Sonner
      theme={theme as ToasterProps["theme"]}
      className="toaster group"
      style={
        {
          "--normal-bg": "var(--popover)",
          "--normal-text": "var(--popover-foreground)",
          "--normal-border": "var(--border)",
        } as React.CSSProperties
      }
      {...props}
    />
  );
};

export { Toaster };



================================================
FILE: components/ui/textarea.tsx
================================================
import * as React from "react";

import { cn } from "@/lib/utils";

function Textarea({ className, ...props }: React.ComponentProps<"textarea">) {
  return (
    <textarea
      data-slot="textarea"
      className={cn(
        "border-input placeholder:text-muted-foreground focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive dark:bg-input/30 flex field-sizing-content min-h-16 w-full rounded-md border bg-transparent px-3 py-2 text-base shadow-xs transition-[color,box-shadow] outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
        className,
      )}
      {...props}
    />
  );
}

export { Textarea };



================================================
FILE: lib/utils.ts
================================================
import { clsx, type ClassValue } from "clsx";
import { twMerge } from "tailwind-merge";

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs));
}



================================================
FILE: lib/data/agent.ts
================================================
import "server-only";
import { unstable_cache } from "next/cache";
import { createApiClient } from "../../lib/supabase/server-api";
import { AgentRegistrationData } from "../../types/agent";

/**
 * Register a new agent
 */
export async function registerAgent(agentData: AgentRegistrationData) {
  try {
    const supabase = createApiClient();

    // Log to help debug
    console.log("Registering agent with data:", {
      ...agentData,
      email: agentData.email.substring(0, 3) + "***", // Mask email for privacy in logs
    });

    const { data, error } = await supabase
      .from("agent_registrations")
      .insert([
        {
          first_name: agentData.firstName,
          last_name: agentData.lastName,
          sales_volume: agentData.salesVolume,
          email: agentData.email,
          phone: agentData.phone,
          zip_code: agentData.zipCode,
          status: "pending",
          created_at: new Date().toISOString(),
        },
      ])
      .select("id");

    if (error) {
      console.error("Supabase insert error:", error);
      throw new Error(
        `Failed to register agent: ${error.message || JSON.stringify(error)}`,
      );
    }

    console.log("Agent registered successfully with ID:", data?.[0]?.id);
    return { success: true, id: data?.[0]?.id };
  } catch (err) {
    console.error("Unexpected error in registerAgent:", err);
    throw err;
  }
}

/**
 * Get agent registrations with optional filters
 */
export const getPendingAgentRegistrations = unstable_cache(
  async () => {
    const supabase = createApiClient();

    const { data, error } = await supabase
      .from("agent_registrations")
      .select("*")
      .eq("status", "pending")
      .order("created_at", { ascending: false });

    if (error) {
      throw new Error(
        `Failed to fetch pending agent registrations: ${error.message}`,
      );
    }

    return data || [];
  },
  ["pending-agent-registrations"],
  { tags: ["agent-registrations"], revalidate: 60 }, // Cache for 1 minute
);

/**
 * Update an agent registration status
 */
export async function updateAgentRegistrationStatus(
  id: string,
  status: "pending" | "approved" | "rejected",
  notes?: string,
) {
  const supabase = createApiClient();

  const updateData: Record<string, string | Date> = {
    status,
    updated_at: new Date().toISOString(),
  };

  if (status !== "pending") {
    updateData.processed_at = new Date().toISOString();
  }

  if (notes) {
    updateData.notes = notes;
  }

  const { error } = await supabase
    .from("agent_registrations")
    .update(updateData)
    .eq("id", id);

  if (error) {
    throw new Error(
      `Failed to update agent registration status: ${error.message}`,
    );
  }

  return { success: true };
}



================================================
FILE: lib/data/property.ts
================================================
import "server-only";
import { createClient } from "@/lib/supabase/server";
import { createAnonClient } from "@/lib/supabase/server-anon";
import { PropertyListing, PropertyType, PropertyImage } from "@/types/property";
import { unstable_cache } from "next/cache";
import { PostgrestError, SupabaseClient } from "@supabase/supabase-js";

// Define a type for the processed image object, extending the base PropertyImage
type ProcessedPropertyImage = PropertyImage & { publicUrl: string | null };

// Define the return type for processed properties, including the processed images array
type ProcessedPropertyListing = Omit<PropertyListing, "property_images"> & {
  primary_image?: string | null;
  property_images?: ProcessedPropertyImage[]; // Use processed images here
};

export interface PropertySearchParams {
  searchText?: string;
  minPrice?: number;
  maxPrice?: number;
  propertyType?: PropertyType;
  minBedrooms?: number;
  minBathrooms?: number;
  lat?: number;
  lng?: number;
  radiusMeters?: number;
  limit?: number;
  offset?: number;
}

export interface PropertySearchResult {
  data: ProcessedPropertyListing[]; // Use processed type
  total: number;
  hasMore: boolean;
}

// Helper function to process images and add public URLs + primary image
function processPropertyImages(
  property: PropertyListing,
  images: PropertyImage[], // Pass fetched images separately
  supabase: SupabaseClient, // Pass Supabase client instance
): ProcessedPropertyListing {
  const imagesWithPublicUrls = (images || []).map(
    (img): ProcessedPropertyImage => {
      let storagePath = img.storage_path; // Use storage_path from type
      if (!storagePath) return { ...img, publicUrl: null };

      // Ensure the path passed to getPublicUrl doesn't include the bucket name if storage_path already has it.
      const bucketName = "platform";
      if (storagePath.startsWith(`${bucketName}/`)) {
        storagePath = storagePath.substring(bucketName.length + 1);
      } else if (storagePath.startsWith(`/${bucketName}/`)) {
        // Handle cases where it might start with /platform/
        storagePath = storagePath.substring(bucketName.length + 2);
      }

      const { data: publicUrlData } = supabase.storage
        .from(bucketName) // Use bucket name variable
        .getPublicUrl(storagePath); // Use the potentially modified storagePath
      return {
        ...img,
        publicUrl: publicUrlData?.publicUrl || null,
      };
    },
  );

  const primaryImage =
    imagesWithPublicUrls.find((img) => img.is_primary)?.publicUrl ||
    imagesWithPublicUrls[0]?.publicUrl ||
    "/assets/images/property-placeholder.jpg"; // Fallback

  // Return property data with processed images and primary image URL
  return {
    ...property,
    property_images: imagesWithPublicUrls, // Assign processed images array
    primary_image: primaryImage,
  };
}

// Cache the property listings for 1 minute
const getCachedPropertyListings = unstable_cache(
  async (params: PropertySearchParams = {}): Promise<PropertySearchResult> => {
    const supabase = await createAnonClient();
    const {
      searchText,
      minPrice,
      maxPrice,
      propertyType,
      minBedrooms,
      minBathrooms,
      lat,
      lng,
      radiusMeters,
      limit = 10,
      offset = 0,
    } = params;

    let propertyData: PropertyListing[] = [];
    let totalCount = 0;
    let fetchError: PostgrestError | null = null;

    // --- Fetch Main Property Data ---
    if (lat !== undefined && lng !== undefined) {
      // RPC Call - Assuming it returns basic property data
      const {
        data: rpcData,
        error: rpcError,
        count,
      } = await supabase
        .rpc("search_properties", {
          search_text: searchText || null,
          min_price: minPrice || null,
          max_price: maxPrice || null,
          property_type_filter: propertyType || null,
          min_bedrooms: minBedrooms || null,
          min_bathrooms: minBathrooms || null,
          lat,
          lng,
          radius_meters: radiusMeters || 5000,
        })
        .range(offset, offset + limit - 1)
        .order("distance_meters", { ascending: true });

      fetchError = rpcError;
      propertyData = (rpcData || []) as PropertyListing[];
      totalCount = count || 0;
    } else {
      // Regular Query - Fetch property data
      let query = supabase.from("property_listings").select(`*`);

      // Apply filters
      if (searchText) {
        query = query.or(
          `title.ilike.%${searchText}%,description.ilike.%${searchText}%`,
        );
      }
      if (minPrice !== undefined) {
        query = query.gte("price", minPrice);
      }
      if (maxPrice !== undefined) {
        query = query.lte("price", maxPrice);
      }
      if (propertyType) {
        query = query.eq("property_type", propertyType);
      }
      if (minBedrooms !== undefined) {
        query = query.gte("bedrooms", minBedrooms);
      }
      if (minBathrooms !== undefined) {
        query = query.gte("bathrooms", minBathrooms);
      }

      // Fetch data
      const { data, error: dataError } = await query
        .range(offset, offset + limit - 1)
        .order("created_at", { ascending: false });

      fetchError = dataError;
      propertyData = (data || []) as PropertyListing[];

      // Fetch count separately
      if (!fetchError) {
        let countQuery = supabase
          .from("property_listings")
          .select("*", { count: "exact", head: true });
        // Re-apply filters for accurate count
        if (searchText) {
          countQuery = countQuery.or(
            `title.ilike.%${searchText}%,description.ilike.%${searchText}%`,
          );
        }
        if (minPrice !== undefined) {
          countQuery = countQuery.gte("price", minPrice);
        }
        if (maxPrice !== undefined) {
          countQuery = countQuery.lte("price", maxPrice);
        }
        if (propertyType) {
          countQuery = countQuery.eq("property_type", propertyType);
        }
        if (minBedrooms !== undefined) {
          countQuery = countQuery.gte("bedrooms", minBedrooms);
        }
        if (minBathrooms !== undefined) {
          countQuery = countQuery.gte("bathrooms", minBathrooms);
        }
        const { count, error: countError } = await countQuery;
        if (countError) {
          console.error("Error fetching count:", countError);
        } else {
          totalCount = count || 0;
        }
      }
    }

    if (fetchError) {
      console.error("Error fetching property data:", fetchError);
      throw fetchError;
    }

    // --- Fetch Images Separately ---
    const propertyIds = propertyData
      .map((p) => p.id)
      .filter((id) => id !== undefined) as string[];
    let allImages: PropertyImage[] = [];
    if (propertyIds.length > 0) {
      const { data: imageData, error: imageError } = await supabase
        .from("property_images")
        .select("*")
        .in("property_id", propertyIds)
        .order("display_order", { ascending: true });

      if (imageError) {
        console.error("Error fetching property images:", imageError);
      } else {
        allImages = (imageData || []) as PropertyImage[];
      }
    }

    // --- Process and Combine Data ---
    const processedData = propertyData.map((property) => {
      const relatedImages = allImages.filter(
        (img) => img.property_id === property.id,
      );
      return processPropertyImages(property, relatedImages, supabase);
    });

    return {
      data: processedData,
      total: totalCount,
      hasMore: totalCount > offset + limit,
    };
  },
  // Corrected cache key: Static base key array. Args (params) are automatically included by Next.js.
  [`property-listings`],
  {
    tags: ["property-listings"], // Static tag for general revalidation
    revalidate: 60,
  },
);

// Public function that uses the cached version
export async function getPropertyListings(
  params: PropertySearchParams = {},
): Promise<PropertySearchResult> {
  return getCachedPropertyListings(params);
}

// Cache property details for 5 minutes
const getCachedPropertyById = unstable_cache(
  async (id: string): Promise<ProcessedPropertyListing | null> => {
    const supabase = await createAnonClient();

    // Fetch property data
    const { data: propertyData, error: propertyError } = await supabase
      .from("property_listings")
      .select(`*`) // Select only from property_listings
      .eq("id", id)
      .single();

    if (propertyError) {
      if (propertyError.code === "PGRST116") {
        return null;
      }
      console.error(`Error fetching property ${id}:`, propertyError);
      throw propertyError;
    }
    if (!propertyData) {
      // console.log(`[getCachedPropertyById] Property not found for ID: ${id}`); // Removed log
      return null;
    }
    // console.log(`[getCachedPropertyById] Fetched property data for ID ${id}:`, JSON.stringify(propertyData, null, 2)); // Removed log

    // Fetch images separately
    const { data: imageData, error: imageError } = await supabase
      .from("property_images")
      .select("*")
      .eq("property_id", id)
      .order("display_order", { ascending: true });

    if (imageError) {
      console.error(`Error fetching images for property ${id}:`, imageError);
    }
    // console.log(`[getCachedPropertyById] Fetched image data for ID ${id}:`, JSON.stringify(imageData, null, 2)); // Removed log

    // Process images
    const processedData = processPropertyImages(
      propertyData as PropertyListing,
      (imageData || []) as PropertyImage[],
      supabase,
    );
    // console.log(`[getCachedPropertyById] Processed data for ID ${id}:`, JSON.stringify(processedData, null, 2)); // Removed log

    return processedData;
  },
  // Corrected cache key: Base key array. Args (id) are automatically included.
  [`property-by-id`], // Static base key
  {
    // Corrected tags: Static array of strings. Dynamic invalidation relies on args.
    tags: [`property-details`],
    revalidate: 300,
  },
);

// Public function to get property by ID
export async function getPropertyById(
  id: string,
): Promise<ProcessedPropertyListing | null> {
  return getCachedPropertyById(id);
}

// Get similar properties - simplified, returns basic data
export async function getSimilarProperties(
  property: PropertyListing,
  limit = 3,
): Promise<PropertyListing[]> {
  const supabase = await createAnonClient();

  let query = supabase
    .from("property_listings")
    .select("*") // Select basic fields
    .neq("id", property.id)
    .eq("property_type", property.property_type);

  const minPrice = property.price * 0.7;
  const maxPrice = property.price * 1.3;
  query = query.gte("price", minPrice).lte("price", maxPrice);

  if (property.bedrooms) {
    query = query.or(
      `bedrooms.eq.${property.bedrooms},bedrooms.eq.${property.bedrooms - 1},bedrooms.eq.${property.bedrooms + 1}`,
    );
  }
  query = query.limit(limit);

  const { data, error } = await query;
  if (error) throw error;
  return data || [];
}

// CRUD Operations
export async function createProperty(
  property: Omit<
    PropertyListing,
    "id" | "created_at" | "property_images" | "primary_image"
  >,
): Promise<PropertyListing> {
  const supabase = await createClient();
  const { data, error } = await supabase
    .from("property_listings")
    .insert(property)
    .select()
    .single();
  if (error) throw error;
  return data as PropertyListing;
}

export async function updateProperty(
  id: string,
  updates: Partial<PropertyListing>,
): Promise<PropertyListing> {
  const supabase = await createClient();
  // Exclude processed fields explicitly before update
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  const { property_images, primary_image, ...validUpdates } = updates;
  // Use the validUpdates object which doesn't contain the excluded fields
  const { data, error } = await supabase
    .from("property_listings")
    .update(validUpdates)
    .eq("id", id)
    .select()
    .single();
  if (error) throw error;
  return data as PropertyListing;
}

export async function deleteProperty(id: string): Promise<boolean> {
  const supabase = await createClient();
  // TODO: Consider deleting related images from storage and property_images table first
  const { error } = await supabase
    .from("property_listings")
    .delete()
    .eq("id", id);
  if (error) throw error;
  return true;
}

// Fetches and processes images for a specific property ID
export async function getPropertyImages(
  propertyId: string,
): Promise<ProcessedPropertyImage[]> {
  const supabase = await createAnonClient();
  const { data, error } = await supabase
    .from("property_images")
    .select("*")
    .eq("property_id", propertyId)
    .order("display_order");

  if (error) {
    console.error("Error fetching property images:", error);
    return [];
  }

  const imagesWithPublicUrls = (data || []).map(
    (img: PropertyImage): ProcessedPropertyImage => {
      const imagePath = img.storage_path;
      if (!imagePath) return { ...img, publicUrl: null };
      const { data: publicUrlData } = supabase.storage
        .from("platform")
        .getPublicUrl(imagePath);
      return { ...img, publicUrl: publicUrlData?.publicUrl || null };
    },
  );

  return imagesWithPublicUrls;
}

// Add a new image record
export async function addPropertyImage(
  propertyId: string,
  imageData: Omit<
    PropertyImage,
    "id" | "created_at" | "updated_at" | "url" | "publicUrl"
  >,
): Promise<{ data: PropertyImage | null; error: PostgrestError | null }> {
  const supabase = await createClient();
  return await supabase
    .from("property_images")
    .insert(imageData)
    .select()
    .single();
}

// Update display order
export async function updatePropertyImageOrder(
  imageId: string,
  newOrder: number,
): Promise<{ data: PropertyImage | null; error: PostgrestError | null }> {
  const supabase = await createClient();
  return await supabase
    .from("property_images")
    .update({ display_order: newOrder })
    .eq("id", imageId)
    .select()
    .single();
}

// Delete image record
export async function deletePropertyImage(
  imageId: string,
): Promise<{ data: PropertyImage | null; error: PostgrestError | null }> {
  const supabase = await createClient();
  // TODO: Add logic to delete from storage bucket using img.storage_path before deleting DB record
  return await supabase
    .from("property_images")
    .delete()
    .eq("id", imageId)
    .select()
    .single();
}



================================================
FILE: lib/supabase/client.ts
================================================
import { createBrowserClient } from "@supabase/ssr";

export function createClient() {
  return createBrowserClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
  );
}



================================================
FILE: lib/supabase/server-anon.ts
================================================
import "server-only";
import { createClient as createSupabaseClient } from "@supabase/supabase-js";

// This client doesn't use cookies and is suitable for use in cached functions
export async function createAnonClient() {
  return createSupabaseClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
  );
}



================================================
FILE: lib/supabase/server-api.ts
================================================
import "server-only";
import { createClient as createSupabaseClient } from "@supabase/supabase-js";
// Define a simplified Database type directly inline to avoid import issues
interface Database {
  public: {
    Tables: {
      agent_registrations: {
        Row: {
          id: string;
          first_name: string;
          last_name: string;
          email: string;
          phone: string;
          sales_volume: string;
          zip_code: string;
          status: string;
          notes?: string;
          created_at: string;
          updated_at?: string;
          processed_at?: string;
        };
        Insert: {
          id?: string;
          first_name: string;
          last_name: string;
          email: string;
          phone: string;
          sales_volume: string;
          zip_code: string;
          status?: string;
          notes?: string;
          created_at?: string;
        };
        Update: {
          id?: string;
          first_name?: string;
          last_name?: string;
          email?: string;
          phone?: string;
          sales_volume?: string;
          zip_code?: string;
          status?: string;
          notes?: string;
          updated_at?: string;
          processed_at?: string;
        };
      };
    };
  };
}

// This client is for API routes that don't need user authentication
export function createApiClient() {
  const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
  const supabaseKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;

  if (!supabaseUrl || !supabaseKey) {
    console.error("Missing Supabase environment variables");
    throw new Error(
      "Missing required environment variables for Supabase connection",
    );
  }

  return createSupabaseClient<Database>(supabaseUrl, supabaseKey, {
    auth: {
      persistSession: false,
    },
  });
}



================================================
FILE: lib/supabase/server.ts
================================================
import "server-only";
import { createServerClient, type CookieOptions } from "@supabase/ssr";
import { cookies } from "next/headers";

export async function createClient() {
  const cookieStore = await cookies();

  return createServerClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
    {
      cookies: {
        get(name: string) {
          return cookieStore.get(name)?.value;
        },
        set(name: string, value: string, options: CookieOptions) {
          try {
            cookieStore.set({ name, value, ...options });
          } catch {
            // The `set` method was called from a Server Component.
            // This can be ignored if you have middleware refreshing
            // user sessions.
          }
        },
        remove(name: string, options: CookieOptions) {
          try {
            cookieStore.set({ name, value: "", ...options });
          } catch {
            // The `delete` method was called from a Server Component.
            // This can be ignored if you have middleware refreshing
            // user sessions.
          }
        },
      },
    }
  );
}



================================================
FILE: lib/types/database.ts
================================================
export type Json =
  | string
  | number
  | boolean
  | null
  | { [key: string]: Json | undefined }
  | Json[];

export interface Database {
  public: {
    Tables: {
      agent_registrations: {
        Row: {
          id: string;
          first_name: string;
          last_name: string;
          email: string;
          phone: string;
          sales_volume: string;
          zip_code: string;
          status: "pending" | "approved" | "rejected";
          notes?: string;
          created_at: string;
          updated_at?: string;
          processed_at?: string;
        };
        Insert: {
          id?: string;
          first_name: string;
          last_name: string;
          email: string;
          phone: string;
          sales_volume: string;
          zip_code: string;
          status?: "pending" | "approved" | "rejected";
          notes?: string;
          created_at?: string;
          updated_at?: string;
          processed_at?: string;
        };
        Update: {
          id?: string;
          first_name?: string;
          last_name?: string;
          email?: string;
          phone?: string;
          sales_volume?: string;
          zip_code?: string;
          status?: "pending" | "approved" | "rejected";
          notes?: string;
          created_at?: string;
          updated_at?: string;
          processed_at?: string;
        };
      };
      property_listings: {
        Row: {
          id: string;
          title: string;
          description: string;
          price: string;
          property_type: string;
          bedrooms: number;
          bathrooms: number;
          square_footage: string;
          address: string;
          features: Json;
          created_by: string | null;
          created_at: string;
          updated_at: string;
        };
        Insert: {
          id?: string;
          title: string;
          description: string;
          price: string;
          property_type: string;
          bedrooms: number;
          bathrooms: number;
          square_footage: string;
          address: string;
          features?: Json;
          created_by?: string | null;
          created_at?: string;
          updated_at?: string;
        };
        Update: {
          id?: string;
          title?: string;
          description?: string;
          price?: string;
          property_type?: string;
          bedrooms?: number;
          bathrooms?: number;
          square_footage?: string;
          address?: string;
          features?: Json;
          created_by?: string | null;
          created_at?: string;
          updated_at?: string;
        };
      };
    };
    Views: {
      [_ in never]: never;
    };
    Functions: {
      [_ in never]: never;
    };
    Enums: {
      [_ in never]: never;
    };
  };
}



================================================
FILE: lib/validation/agent-registration.ts
================================================
import { z } from "zod";

// Validation schema for agent registration form
export const AgentRegistrationSchema = z.object({
  firstName: z.string().min(1, "First name is required"),
  lastName: z.string().min(1, "Last name is required"),
  salesVolume: z.enum(["$0-$5M", "$5M-$10M", "$10M-$20M", "$20M+"]),
  email: z.string().email("Invalid email address"),
  phone: z
    .string()
    .min(7, "Phone number must be at least 7 characters")
    .max(15, "Phone number must not exceed 15 characters")
    .regex(/^[0-9+\-\s()]+$/, "Please enter a valid phone number"),
  zipCode: z
    .string()
    .min(4, "ZIP/Postal code must be at least 4 characters")
    .max(10, "ZIP/Postal code must not exceed 10 characters"),
});

export type AgentRegistrationFormData = z.infer<typeof AgentRegistrationSchema>;



================================================
FILE: lib/validation/agent.ts
================================================
import { z } from "zod";

// Agent registration validation schema
export const agentRegistrationSchema = z.object({
  firstName: z.string().min(2, "First name must be at least 2 characters"),
  lastName: z.string().min(1, "Last name must be at least 1 character"),
  salesVolume: z.string().min(1, "Please select your sales volume"),
  email: z.string().email("Please enter a valid email address"),
  phone: z.string().min(10, "Please enter a valid phone number"),
  zipCode: z.string().min(5, "Please enter a valid ZIP code"),
});

// Type inference from schema
export type AgentRegistrationValidatedData = z.infer<
  typeof agentRegistrationSchema
>;

// Utility function to validate agent registration data
export function validateAgentRegistration(data: unknown) {
  return agentRegistrationSchema.safeParse(data);
}



================================================
FILE: lib/validation/property.ts
================================================
import {
  PropertyListing,
  ValidationResult,
  PropertySearchParams,
} from "@/types/property";

/**
 * Validates a property listing for the Vietnamese market
 * @param property The property listing to validate
 * @returns Validation result with errors if any
 */
export function validatePropertyListing(
  property: PropertyListing,
): ValidationResult {
  const errors: string[] = [];

  // Required fields
  if (!property.title) errors.push("Title is required");
  if (!property.description) errors.push("Description is required");

  // Price validation
  if (property.price === undefined || property.price === null) {
    errors.push("Price is required");
  } else if (property.price <= 0) {
    errors.push("Price must be a positive number");
  }

  // Property type validation
  if (!property.property_type) {
    errors.push("Property type is required");
  } else if (!["월세", "매매"].includes(property.property_type)) {
    errors.push(
      "Property type must be either 월세 (monthly rent) or 매매 (purchase)",
    );
  }

  // Bedrooms and bathrooms validation
  if (property.bedrooms === undefined || property.bedrooms === null) {
    errors.push("Number of bedrooms is required");
  } else if (property.bedrooms < 0) {
    errors.push("Number of bedrooms cannot be negative");
  }

  if (property.bathrooms === undefined || property.bathrooms === null) {
    errors.push("Number of bathrooms is required");
  } else if (property.bathrooms < 0) {
    errors.push("Number of bathrooms cannot be negative");
  }

  // Square footage validation
  if (
    property.square_footage === undefined ||
    property.square_footage === null
  ) {
    errors.push("Square footage is required");
  } else if (property.square_footage <= 0) {
    errors.push("Square footage must be a positive number");
  }

  // Location validation
  if (!property.location) {
    errors.push("Location is required");
  } else {
    // Check if location is in the format 'POINT(longitude latitude)'
    const pointRegex = /^POINT\((\d+\.\d+) (\d+\.\d+)\)$/;
    const match = property.location.match(pointRegex);

    if (!match) {
      errors.push('Location must be in the format "POINT(longitude latitude)"');
    } else {
      const longitude = parseFloat(match[1]);
      const latitude = parseFloat(match[2]);

      // Vietnam longitude range: approximately 102° to 110° E
      // Vietnam latitude range: approximately 8° to 24° N
      if (longitude < 102 || longitude > 110) {
        errors.push(
          "Longitude must be within Vietnam (approximately 102° to 110° E)",
        );
      }

      if (latitude < 8 || latitude > 24) {
        errors.push(
          "Latitude must be within Vietnam (approximately 8° to 24° N)",
        );
      }
    }
  }

  // Address validation
  if (!property.address) errors.push("Address is required");

  // Features validation
  if (!property.features) {
    errors.push("Features object is required");
  }

  return {
    valid: errors.length === 0,
    errors,
  };
}

/**
 * Validates search parameters for property listings
 * @param params The search parameters to validate
 * @returns Validation result with errors if any
 */
export function validateSearchParams(
  params: PropertySearchParams,
): ValidationResult {
  const errors: string[] = [];

  // Price range validation
  if (params.minPrice !== undefined && params.minPrice < 0) {
    errors.push("Minimum price cannot be negative");
  }

  if (params.maxPrice !== undefined && params.maxPrice < 0) {
    errors.push("Maximum price cannot be negative");
  }

  if (
    params.minPrice !== undefined &&
    params.maxPrice !== undefined &&
    params.minPrice > params.maxPrice
  ) {
    errors.push("Minimum price cannot be greater than maximum price");
  }

  // Property type validation
  if (
    params.propertyType !== undefined &&
    !["월세", "매매"].includes(params.propertyType)
  ) {
    errors.push(
      "Property type must be either 월세 (monthly rent) or 매매 (purchase)",
    );
  }

  // Bedrooms and bathrooms validation
  if (params.minBedrooms !== undefined && params.minBedrooms < 0) {
    errors.push("Minimum bedrooms cannot be negative");
  }

  if (params.minBathrooms !== undefined && params.minBathrooms < 0) {
    errors.push("Minimum bathrooms cannot be negative");
  }

  // Location validation
  if (
    (params.lat !== undefined && params.lng === undefined) ||
    (params.lat === undefined && params.lng !== undefined)
  ) {
    errors.push(
      "Both latitude and longitude must be provided for location-based search",
    );
  }

  if (params.radiusMeters !== undefined && params.radiusMeters <= 0) {
    errors.push("Radius must be a positive number");
  }

  // Pagination validation
  if (params.limit !== undefined && params.limit <= 0) {
    errors.push("Limit must be a positive number");
  }

  if (params.offset !== undefined && params.offset < 0) {
    errors.push("Offset cannot be negative");
  }

  return {
    valid: errors.length === 0,
    errors,
  };
}



================================================
FILE: lib/validation/request-info.ts
================================================
import { z } from "zod";

export const RequestInfoSchema = z.object({
  name: z.string().min(2, "이름은 필수입니다."),
  phone: z.string().optional(),
  email: z.string().email("유효하지 않은 이메일 주소입니다."),
  message: z.string().min(10, "메시지는 최소 10자 이상이어야 합니다."),
});

export type RequestInfo = z.infer<typeof RequestInfoSchema>;



================================================
FILE: public/manifest.webmanifest
================================================
{
  "name": "Property Platform",
  "short_name": "PropPlatform",
  "description": "Find your dream property in Vietnam",
  "start_url": "/",
  "display": "standalone",
  "background_color": "#ffffff",
  "theme_color": "#18181b",
  "icons": [
    {
      "src": "/icons/icon-192x192.png",
      "sizes": "192x192",
      "type": "image/png",
      "purpose": "any maskable"
    },
    {
      "src": "/icons/icon-512x512.png",
      "sizes": "512x512",
      "type": "image/png",
      "purpose": "any maskable"
    }
  ]
}



================================================
FILE: supabase/migrations/20240320000001_create_property_images.sql
================================================
-- Migration: Create property_images table
-- Description: Adds support for multiple images per property listing
-- with proper ordering and metadata

-- Create the property_images table
create table if not exists public.property_images (
    id uuid primary key default gen_random_uuid(),
    property_id uuid not null references public.property_listings(id) on delete cascade,
    url text not null,
    alt_text text,
    "order" integer not null default 0,
    created_at timestamp with time zone default timezone('utc'::text, now()) not null,
    updated_at timestamp with time zone default timezone('utc'::text, now()) not null,
    created_by uuid references auth.users(id) on delete set null,
    -- Add a unique constraint to ensure image order is unique per property
    unique(property_id, "order")
);

-- Enable RLS
alter table public.property_images enable row level security;

-- Create indexes
create index property_images_property_id_idx on public.property_images(property_id);
create index property_images_order_idx on public.property_images("order");

-- Add updated_at trigger
create trigger set_updated_at
    before update on public.property_images
    for each row
    execute function public.set_updated_at();

-- Create RLS policies

-- Allow anyone to view property images
create policy "Property images are viewable by everyone."
    on public.property_images
    for select
    to authenticated, anon
    using (true);

-- Allow authenticated users to upload images to their own properties
create policy "Users can upload images to their own properties."
    on public.property_images
    for insert
    to authenticated
    with check (
        auth.uid() = (
            select created_by
            from public.property_listings
            where id = property_id
        )
    );

-- Allow users to update their own property images
create policy "Users can update their own property images."
    on public.property_images
    for update
    to authenticated
    using (
        auth.uid() = (
            select created_by
            from public.property_listings
            where id = property_id
        )
    )
    with check (
        auth.uid() = (
            select created_by
            from public.property_listings
            where id = property_id
        )
    );

-- Allow users to delete their own property images
create policy "Users can delete their own property images."
    on public.property_images
    for delete
    to authenticated
    using (
        auth.uid() = (
            select created_by
            from public.property_listings
            where id = property_id
        )
    );



================================================
FILE: supabase/migrations/20250425061530_fix_property_images_fk.sql
================================================
-- Migration: Fix foreign key constraint on property_images table
-- Description: Updates the foreign key on property_images.property_id to correctly reference property_listings(id) instead of properties(id).

-- Step 1: Drop the existing incorrect foreign key constraint
-- NOTE: Replace 'property_images_property_id_fkey' if your constraint has a different name!
ALTER TABLE public.property_images
DROP CONSTRAINT IF EXISTS property_images_property_id_fkey;

-- Step 2: Add the correct foreign key constraint referencing property_listings
ALTER TABLE public.property_images
ADD CONSTRAINT property_images_property_id_fkey
FOREIGN KEY (property_id)
REFERENCES public.property_listings(id)
ON DELETE CASCADE; -- Keep ON DELETE CASCADE if that was the original intent



================================================
FILE: supabase/migrations/20250511081938_create_agent_registrations.sql
================================================
-- Create agent_registrations table for storing agent registration requests
create table if not exists public.agent_registrations (
  id uuid primary key default gen_random_uuid(),
  first_name text not null,
  last_name text not null,
  email text not null unique,
  phone text not null,
  sales_volume text not null,
  zip_code text not null,
  status text not null default 'pending',
  notes text,
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now(),
  processed_at timestamptz,
  processed_by uuid references auth.users(id)
);

-- Create an index on email for faster lookups and to enforce uniqueness
create index if not exists agent_registrations_email_idx on public.agent_registrations(email);

-- Create an index on status for filtering
create index if not exists agent_registrations_status_idx on public.agent_registrations(status);

-- Add table comment
comment on table public.agent_registrations is 'Stores registration requests from real estate agents';

-- Enable Row Level Security (RLS)
alter table public.agent_registrations enable row level security;

-- Create policies
-- Admin can see all agent registrations
create policy "Admin can view all agent registrations"
  on public.agent_registrations for select
  to authenticated
  using (
    exists (
      select 1 from public.profiles
      where auth.uid() = profiles.id and profiles.role = 'admin'
    )
  );

-- Admin can insert agent registrations
create policy "Admin can insert agent registrations"
  on public.agent_registrations for insert
  to authenticated
  with check (
    exists (
      select 1 from public.profiles
      where auth.uid() = profiles.id and profiles.role = 'admin'
    )
  );

-- Admin can update agent registrations
create policy "Admin can update agent registrations"
  on public.agent_registrations for update
  to authenticated
  using (
    exists (
      select 1 from public.profiles
      where auth.uid() = profiles.id and profiles.role = 'admin'
    )
  )
  with check (
    exists (
      select 1 from public.profiles
      where auth.uid() = profiles.id and profiles.role = 'admin'
    )
  );

-- Anyone can submit a registration (insert only)
create policy "Anyone can submit an agent registration"
  on public.agent_registrations for insert
  to anon, authenticated
  with check (true);

-- Create a function to update the updated_at column
create or replace function public.handle_updated_at()
returns trigger as $$
begin
  new.updated_at = now();
  return new;
end;
$$ language plpgsql;

-- Create a trigger to update the updated_at column
create trigger set_updated_at
before update on public.agent_registrations
for each row
execute function public.handle_updated_at();



================================================
FILE: supabase/migrations/20250709043041_create_user_profile_on_signup.sql
================================================
-- Migration: Create function and trigger to handle new user sign-ups.
-- Description: This migration adds a trigger that automatically creates a new
-- entry in the public.profiles table whenever a new user is created in auth.users.
-- This ensures that user profile data is kept in sync with authentication data.

-- Step 1: Drop the existing trigger if it exists to ensure idempotency.
DROP TRIGGER IF EXISTS on_auth_user_created ON auth.users;

-- Step 2: Create or replace the function to handle new user creation.
-- This function now correctly maps the full_name from Google to first_name and last_name,
-- and sets a default 'user' role.
create or replace function public.handle_new_user()
returns trigger as $$
begin
  insert into public.profiles (id, email, first_name, last_name, avatar_url, role)
  values (
    new.id,
    new.email,
    split_part(new.raw_user_meta_data->>'full_name', ' ', 1),
    substring(new.raw_user_meta_data->>'full_name' from position(' ' in new.raw_user_meta_data->>'full_name') + 1),
    new.raw_user_meta_data->>'avatar_url',
    'user' -- Sets default role
  );
  return new;
end;
$$ language plpgsql security definer set search_path = public;

-- Step 3: Recreate the trigger to execute the function after a new user is inserted.
create trigger on_auth_user_created
after insert on auth.users
for each row execute function public.handle_new_user();



================================================
FILE: supabase/migrations/20250709050800_drop_public_users_table.sql
================================================
-- Migration: Drop the redundant public.users table
-- Description: This migration removes the public.users table, which has been
-- replaced by the public.profiles table to avoid confusion and potential bugs.
-- All application code and RLS policies have been updated to use public.profiles.

DROP TABLE IF EXISTS public.users;



================================================
FILE: supabase/migrations/20250709051700_create_search_properties_within_radius_function.sql
================================================
-- Migration: Create function to search for properties within a radius
-- Description: This migration adds a PostgreSQL function that allows searching for
-- property listings within a specified radius from a given latitude and longitude.

-- Step 1: Create the function to search for properties within a radius
create or replace function public.search_properties_within_radius(
  latitude float,
  longitude float,
  radius_meters float
)
returns setof public.property_listings as $$
begin
  return query
  select *
  from public.property_listings
  where ST_DWithin(
    location,
    ST_SetSRID(ST_MakePoint(longitude, latitude), 4326)::geography,
    radius_meters
  );
end;
$$ language plpgsql stable;



================================================
FILE: types/agent.ts
================================================
// Agent-related types for the platform
export interface AgentRegistrationData {
  firstName: string;
  lastName: string;
  salesVolume: string;
  email: string;
  phone: string;
  zipCode: string;
}

export interface AgentFormState {
  isSubmitting: boolean;
  isSuccess: boolean;
  error: string | null;
}



================================================
FILE: types/property.ts
================================================
/**
 * Property types available in the Vietnamese market for Korean expatriates
 * Note: No '전세' (jeonse/lease) option as this system doesn't exist in Vietnam
 */
export type PropertyType = "월세" | "매매"; // Monthly rent or Purchase

/**
 * Vietnamese cities with significant Korean expatriate populations
 */
export type VietnamCity =
  | "Ho Chi Minh City"
  | "Hanoi"
  | "Da Nang"
  | "Nha Trang"
  | "Vung Tau"
  | "Hai Phong";

/**
 * Represents a single image associated with a property, matching the DB schema.
 * Includes a dynamically added field for the public URL after processing.
 */
export interface PropertyImage {
  id: string;
  property_id: string;
  url?: string | null; // Original URL column from schema (might be unused)
  storage_path: string; // Path/key in Supabase Storage bucket (Confirmed from schema)
  alt_text: string | null;
  display_order?: number; // Use schema column name
  is_primary?: boolean; // Use schema column name
  created_at: string;
  updated_at: string;
  created_by: string | null;
  publicUrl?: string | null; // Dynamically added field for processed URL
}

/**
 * Property listing interface that matches the database schema
 * Based on the columns in the property_listings table
 * Designed for Vietnamese properties targeting Korean expatriates
 */
export interface PropertyListing {
  id?: string;
  title: string;
  description: string;
  price: number; // In USD
  property_type: PropertyType;
  bedrooms: number;
  bathrooms: number;
  square_footage: number;
  location: any; // Type for PostGIS location data might need refinement
  address: string;
  features: PropertyFeatures; // Consider defining this more strictly if possible
  created_at?: string;
  updated_at?: string;
  created_by?: string; // User ID of creator
  // This field holds the image data fetched from the DB, potentially processed later
  property_images?: PropertyImage[]; // Use the correct field name matching the DB relation
  // This field will be added dynamically after processing images
  primary_image?: string | null;
}

/**
 * Features available in Vietnamese properties
 * Includes standard amenities and features specifically relevant to Korean expatriates
 */
export interface PropertyFeatures {
  // Standard amenities
  parking?: boolean;
  airConditioning?: boolean;
  elevator?: boolean;
  balcony?: boolean;
  security?: boolean;
  pool?: boolean;
  gym?: boolean;
  furnished?: boolean;

  // Korean expatriate specific features
  koreanCommunity?: boolean; // Proximity to Korean community
  koreanRestaurants?: boolean; // Proximity to Korean restaurants
  internationalSchool?: boolean; // Proximity to international schools
  koreanSchool?: boolean; // Proximity to Korean schools
  koreanSupermarket?: boolean; // Proximity to Korean supermarkets

  // Allow other potential features, but avoid 'any' if possible
  [key: string]: boolean | undefined; // Changed 'any' to 'boolean | undefined'
}

/**
 * Search parameters for property listings
 */
export interface PropertySearchParams {
  searchText?: string;
  minPrice?: number;
  maxPrice?: number;
  propertyType?: PropertyType;
  minBedrooms?: number;
  minBathrooms?: number;
  city?: VietnamCity;
  district?: string;
  features?: Partial<PropertyFeatures>;
  lat?: number;
  lng?: number;
  radiusMeters?: number;
  limit?: number;
  offset?: number;
}

/**
 * Validation result for property listings
 */
export interface ValidationResult {
  valid: boolean;
  errors: string[];
}



================================================
FILE: types/supabase.ts
================================================
import { PropertyType } from "./property";

export interface PropertyListing {
  id: string;
  title: string;
  description: string | null;
  price: number;
  property_type: PropertyType;
  bedrooms: number | null;
  bathrooms: number | null;
  square_footage: number | null;
  location: any; // Geography type
  address: string;
  features: Record<string, any>;
  created_by: string | null;
  created_at: string;
  updated_at: string;
}

export interface Database {
  public: {
    Tables: {
      property_listings: {
        Row: PropertyListing;
        Insert: Omit<PropertyListing, "id" | "created_at" | "updated_at">;
        Update: Partial<
          Omit<PropertyListing, "id" | "created_at" | "updated_at">
        >;
      };
    };
    Functions: {
      find_properties_within_radius: (
        lat: number,
        lng: number,
        radius_meters: number,
      ) => PropertyListing[];
      get_properties_with_distance: (
        lat: number,
        lng: number,
      ) => (PropertyListing & { distance_meters: number })[];
      search_properties: (
        search_text?: string | null,
        min_price?: number | null,
        max_price?: number | null,
        property_type_filter?: PropertyType | null,
        min_bedrooms?: number | null,
        min_bathrooms?: number | null,
        lat?: number | null,
        lng?: number | null,
        radius_meters?: number | null,
      ) => (PropertyListing & { distance_meters: number | null })[];
    };
  };
}


