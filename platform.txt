Directory structure:
└── bk202042-platform/
    ├── README.md
    ├── components.json
    ├── eslint.config.mjs
    ├── middleware.ts
    ├── next.config.mjs
    ├── package.json
    ├── postcss.config.mjs
    ├── shadcn.json
    ├── tsconfig.json
    ├── .env.example
    ├── app/
    │   ├── globals.css
    │   ├── layout.tsx
    │   ├── page.tsx
    │   ├── (main)/
    │   │   ├── layout.tsx
    │   │   ├── loading.tsx
    │   │   ├── properties/
    │   │   │   ├── page.tsx
    │   │   │   └── [id]/
    │   │   │       ├── error.tsx
    │   │   │       ├── not-found.tsx
    │   │   │       ├── page.tsx
    │   │   │       └── _components/
    │   │   │           ├── PropertyCosts.tsx
    │   │   │           ├── PropertyDetail.tsx
    │   │   │           ├── PropertyFeatures.tsx
    │   │   │           ├── PropertyGallery.tsx
    │   │   │           └── RequestInfoForm.tsx
    │   │   └── search/
    │   │       ├── page.tsx
    │   │       └── _components/
    │   │           ├── SearchForm.tsx
    │   │           └── SearchResults.tsx
    │   ├── admin/
    │   │   ├── layout.tsx
    │   │   ├── page.tsx
    │   │   ├── _components/
    │   │   │   └── AdminSidebar.tsx
    │   │   ├── profile/
    │   │   │   ├── page.tsx
    │   │   │   └── _components/
    │   │   │       ├── ProfileDetails.tsx
    │   │   │       └── ProfileDropdown.tsx
    │   │   ├── properties/
    │   │   │   └── page.tsx
    │   │   ├── saved-homes/
    │   │   │   └── page.tsx
    │   │   ├── settings/
    │   │   │   └── page.tsx
    │   │   └── users/
    │   │       └── page.tsx
    │   ├── api/
    │   │   ├── properties/
    │   │   │   ├── route.ts
    │   │   │   ├── [id]/
    │   │   │   │   ├── route.ts
    │   │   │   │   └── delete/
    │   │   │   │       └── route.ts
    │   │   │   ├── create/
    │   │   │   │   └── route.ts
    │   │   │   ├── nearby/
    │   │   │   │   └── route.ts
    │   │   │   ├── search/
    │   │   │   │   └── route.ts
    │   │   │   └── stats/
    │   │   │       └── route.ts
    │   │   ├── request-info/
    │   │   │   └── route.ts
    │   │   └── test-db/
    │   │       └── route.ts
    │   ├── auth/
    │   │   ├── callback/
    │   │   │   └── route.ts
    │   │   ├── confirm/
    │   │   │   └── route.ts
    │   │   ├── error/
    │   │   │   └── page.tsx
    │   │   ├── forgot-password/
    │   │   │   └── page.tsx
    │   │   ├── reset-password/
    │   │   │   └── route.ts
    │   │   ├── sign-in/
    │   │   │   ├── page.tsx
    │   │   │   └── _components/
    │   │   │       └── SignInForm.tsx
    │   │   ├── sign-up/
    │   │   │   ├── page.tsx
    │   │   │   └── _components/
    │   │   │       └── SignUpForm.tsx
    │   │   ├── sign-up-success/
    │   │   │   └── page.tsx
    │   │   └── update-password/
    │   │       └── page.tsx
    │   ├── emails/
    │   │   └── RequestInfoEmail.tsx
    │   ├── profile/
    │   │   └── page.tsx
    │   └── search/
    ├── components/
    │   ├── error/
    │   │   └── ErrorBoundary.tsx
    │   ├── featured/
    │   │   └── FeaturedPropertiesClient.tsx
    │   ├── layout/
    │   │   ├── Container.tsx
    │   │   ├── Footer.tsx
    │   │   └── Header.tsx
    │   ├── property/
    │   │   ├── FeaturedPropertyTabs.tsx
    │   │   ├── PropertyCard.tsx
    │   │   ├── PropertyCardSkeleton.tsx
    │   │   ├── PropertyContact.tsx
    │   │   ├── PropertyFeatures.tsx
    │   │   ├── PropertyImageGallery.tsx
    │   │   ├── PropertyListings.tsx
    │   │   ├── PropertyLocation.tsx
    │   │   ├── PropertyStatistics.tsx
    │   │   ├── PropertyTypeSelector.tsx
    │   │   ├── PropertyTypeTabs.tsx
    │   │   └── SimilarProperties.tsx
    │   ├── providers/
    │   │   └── PropertyDataProvider.tsx
    │   ├── sections/
    │   │   ├── ExploreSection.tsx
    │   │   ├── FeaturedPropertiesSection.tsx
    │   │   ├── FeatureHighlightsSection.tsx
    │   │   ├── HeroSection.tsx
    │   │   └── KoreanExpatriatesSection.tsx
    │   └── ui/
    │       ├── button.tsx
    │       ├── card.tsx
    │       ├── carousel.tsx
    │       ├── checkbox.tsx
    │       ├── dialog.tsx
    │       ├── dropdown-menu.tsx
    │       ├── input.tsx
    │       ├── label.tsx
    │       ├── select.tsx
    │       ├── separator.tsx
    │       ├── sonner.tsx
    │       └── textarea.tsx
    ├── lib/
    │   ├── utils.ts
    │   ├── data/
    │   │   └── property.ts
    │   ├── supabase/
    │   │   ├── client.ts
    │   │   ├── server-anon.ts
    │   │   ├── server-api.ts
    │   │   └── server.ts
    │   └── validation/
    │       ├── property.ts
    │       └── request-info.ts
    ├── public/
    │   └── manifest.webmanifest
    ├── supabase/
    │   └── migrations/
    │       ├── 20240320000001_create_property_images.sql
    │       └── 20250425061530_fix_property_images_fk.sql
    ├── types/
    │   ├── property.ts
    │   └── supabase.ts
    ├── .cursor/
    │   └── rules/
    │       ├── code-format-sql.mdc
    │       ├── dababase-functions.mdc
    │       ├── database-create-migration.mdc
    │       ├── database-rls-policies.mdc
    │       ├── edge-functions.mdc
    │       ├── nextjs-project-structre.mdc
    │       ├── nextjs-supabase-auth.mdc
    │       └── tailwindcss.mdc
    └── .github/

================================================
FILE: README.md
================================================
# Vietnam Property Platform

A property listing platform designed for Korean expatriates in Vietnam.

## Features

- [Next.js](https://nextjs.org) with App Router
- [TypeScript](https://www.typescriptlang.org/) for type safety
- [Tailwind CSS v4.1.4](https://tailwindcss.com/) for styling
- [shadcn/ui](https://ui.shadcn.com/) for beautiful, accessible components
- [Supabase](https://supabase.com/) for backend services
- Feature-based project structure
- Dark mode support
- Performance-optimized

## Getting Started

1. Clone this repository
2. Install dependencies:

```bash
npm install
# or
yarn install
# or
pnpm install
```

3. Run the development server:

```bash
npm run dev
# or
yarn dev
# or
pnpm dev
```

4. Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

## Project Structure

The project follows a feature-based structure with the Next.js App Router:

```
/app
  /(main)                     # Route group for main public pages
    /layout.tsx               # Layout for main pages
    /page.tsx                 # Home page
    /properties               # Properties feature
      /[id]                   # Property detail page
        /_components          # Property detail components
          /PropertyDetail.tsx
          /PropertyGallery.tsx
        /page.tsx
      /page.tsx               # Properties listing page
    /search                   # Search feature
      /_components            # Search-specific components
        /SearchForm.tsx
        /SearchResults.tsx
      /page.tsx
  /api                        # API routes
    /properties               # Properties API
      /[id]                   # Property by ID
        /route.ts
      /search                 # Search endpoint
        /route.ts
      /route.ts               # List properties
/components                   # Shared components
  /ui                         # UI primitives
    /button.tsx
    /card.tsx
    /input.tsx
    /select.tsx
  /layout                     # Layout components
    /Container.tsx
  /providers                  # Context providers
    /PropertyDataProvider.tsx
/lib                          # Shared utilities
  /data                       # Data Access Layer
    /property.ts              # Property data functions
  /supabase                   # Supabase client
    /client.ts
    /server.ts
  /utils.ts                   # Utility functions
/types                        # TypeScript types
  /property.ts
  /supabase.ts
```

## Core Features

1. **Property Search**: Search for properties by various criteria including location, price, and property type.
2. **Property Listings**: Browse all available properties with filtering options.
3. **Property Details**: View detailed information about a specific property.

## Technology Stack

- **Frontend**: Next.js with App Router, React, Tailwind CSS v4.1.4, shadcn/ui
- **Backend**: Supabase (PostgreSQL, PostGIS, Authentication)
- **Styling**: Tailwind CSS v4.1.4 with zinc color theme

## Data Access Layer

The project uses a data access layer to abstract database operations:

- `lib/data/property.ts`: Functions for property data operations
- API routes use the data access layer instead of direct database access

## API Routes

- `GET /api/properties`: List properties with filtering options
- `GET /api/properties/[id]`: Get a specific property by ID
- `PATCH /api/properties/[id]`: Update a property
- `DELETE /api/properties/[id]/delete`: Delete a property

## Project Philosophy

- **Simplicity**: Focus on core features only (search, list, detail)
- **Performance**: Optimize for speed throughout development
- **Minimal Dependencies**: Use built-in Next.js capabilities whenever possible

## Learn More

- [Next.js Documentation](https://nextjs.org/docs)
- [Supabase Documentation](https://supabase.com/docs)
- [Tailwind CSS Documentation](https://tailwindcss.com/docs)
- [shadcn/ui Documentation](https://ui.shadcn.com/docs)



================================================
FILE: components.json
================================================
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "new-york",
  "rsc": true,
  "tsx": true,
  "tailwind": {
    "config": "tailwind.config.js",
    "css": "app/globals.css",
    "baseColor": "zinc",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/lib",
    "hooks": "@/hooks"
  },
  "iconLibrary": "lucide"
}



================================================
FILE: eslint.config.mjs
================================================
import { dirname } from "path";
import { fileURLToPath } from "url";
import { FlatCompat } from "@eslint/eslintrc";

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const compat = new FlatCompat({
  baseDirectory: __dirname,
});

const eslintConfig = [
  ...compat.extends("next/core-web-vitals", "next/typescript"),
];

export default eslintConfig;



================================================
FILE: middleware.ts
================================================
import { createServerClient, type CookieOptions } from "@supabase/ssr";
import { NextResponse, type NextRequest } from "next/server";

export async function middleware(request: NextRequest) {
  const supabaseResponse = NextResponse.next({
    request,
  });

  const supabase = createServerClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
    {
      cookies: {
        get(name: string) {
          return request.cookies.get(name)?.value;
        },
        set(name: string, value: string, options: CookieOptions) {
          supabaseResponse.cookies.set(name, value, options);
        },
        remove(name: string, options: CookieOptions) {
          supabaseResponse.cookies.set(name, "", options);
        },
      },
    },
  );

  // Get both user and session to check authentication status
  const {
    data: { user },
  } = await supabase.auth.getUser();

  const {
    data: { session },
  } = await supabase.auth.getSession();

  // List of public routes that don't require authentication
  const publicRoutes = ["/", "/search", "/properties", "/auth"];

  // Special callback routes that must be excluded from auth checks
  const authCallbackRoutes = [
    "/auth/callback",
    "/auth/reset-password",
    "/auth/confirm",
  ];
  const isAuthCallback = authCallbackRoutes.some(
    (route) => request.nextUrl.pathname === route,
  );

  const isPublicRoute =
    publicRoutes.some((route) => request.nextUrl.pathname.startsWith(route)) ||
    isAuthCallback;

  // For debugging - log auth status to server console
  console.log({
    path: request.nextUrl.pathname,
    isPublicRoute,
    isAuthCallback: authCallbackRoutes.some(
      (route) => request.nextUrl.pathname === route,
    ),
    hasUser: !!user,
    hasSession: !!session,
    userId: user?.id,
  });

  // Only redirect to sign-in for protected routes when user is not authenticated
  if (!session && !isPublicRoute) {
    // Debug session information
    console.log("Missing session for protected route", {
      cookies: request.cookies.getAll().map((c) => c.name),
      authCookies: request.cookies
        .getAll()
        .filter((c) => c.name.includes("supabase"))
        .map((c) => c.name),
      path: request.nextUrl.pathname,
    });

    const url = request.nextUrl.clone();
    url.pathname = "/auth/sign-in";
    // Add a return parameter to redirect back to the intended page after sign-in
    url.searchParams.set("returnTo", request.nextUrl.pathname);
    return NextResponse.redirect(url);
  }

  return supabaseResponse;
}

// Apply middleware to all routes except static files and authentication callback routes
export const config = {
  matcher: [
    "/((?!_next/static|_next/image|favicon.ico|.*\\.(?:svg|png|jpg|jpeg|gif|webp)$).*)",
  ],
};



================================================
FILE: next.config.mjs
================================================
/** @type {import('next').NextConfig} */
const nextConfig = {
  images: {
    remotePatterns: [
      {
        protocol: "https",
        hostname: "images.unsplash.com",
      },
      {
        protocol: "https",
        hostname: "khtcoztdkxhhrudwhhjv.supabase.co",
      },
    ],
  },
};

export default nextConfig;



================================================
FILE: package.json
================================================
{
  "name": "platform",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint",
    "load-data": "tsx scripts/load-property-data.ts"
  },
  "dependencies": {
    "@hookform/resolvers": "^5.0.1",
    "@radix-ui/react-checkbox": "^1.2.2",
    "@radix-ui/react-dialog": "^1.1.10",
    "@radix-ui/react-dropdown-menu": "^2.1.12",
    "@radix-ui/react-label": "^2.1.4",
    "@radix-ui/react-select": "^2.2.2",
    "@radix-ui/react-separator": "^1.1.4",
    "@radix-ui/react-slot": "^1.0.2",
    "@supabase/ssr": "^0.1.0",
    "@supabase/supabase-js": "^2.39.8",
    "class-variance-authority": "^0.7.0",
    "clsx": "^2.1.0",
    "embla-carousel-react": "^8.6.0",
    "lucide-react": "^0.488.0",
    "next": "^15.3.1",
    "next-themes": "^0.4.6",
    "react": "^19.0.0",
    "react-dom": "^19.0.0",
    "react-hook-form": "^7.56.0",
    "resend": "^4.5.0",
    "sonner": "^2.0.3",
    "tailwind-merge": "^2.2.2",
    "zod": "^3.24.3"
  },
  "devDependencies": {
    "@tailwindcss/cli": "^4.1.4",
    "@tailwindcss/postcss": "^4.1.4",
    "@types/node": "^20",
    "@types/react": "^19",
    "@types/react-dom": "^19",
    "dotenv": "^16.3.1",
    "eslint": "^9",
    "eslint-config-next": "15.3.0",
    "tailwindcss": "^4.1.4",
    "tsx": "^4.7.0",
    "typescript": "^5.8.3"
  },
  "type": "module"
}



================================================
FILE: postcss.config.mjs
================================================
const config = {
  plugins: ["@tailwindcss/postcss"],
};

export default config;



================================================
FILE: shadcn.json
================================================
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "default",
  "rsc": true,
  "tsx": true,
  "tailwind": {
    "config": "tailwind.config.js",
    "css": "app/globals.css",
    "baseColor": "neutral",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils"
  }
}



================================================
FILE: tsconfig.json
================================================
{
  "compilerOptions": {
    "target": "ES2017",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "forceConsistentCasingInFileNames": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}



================================================
FILE: .env.example
================================================
# Supabase Configuration
NEXT_PUBLIC_SUPABASE_URL=your-project-url.supabase.co
NEXT_PUBLIC_SUPABASE_ANON_KEY=your-anon-key
SUPABASE_SERVICE_ROLE_KEY=your-service-role-key
SUPABASE_STORAGE_BUCKET=platform

# Next.js Configuration
NEXT_PUBLIC_SITE_URL=http://localhost:3000

# Application Settings
NODE_ENV=development



================================================
FILE: app/globals.css
================================================
@import "tailwindcss";

:root {
  --background: #ffffff;
  --foreground: #171717;

  --card: #ffffff;
  --card-foreground: #171717;

  --popover: #ffffff;
  --popover-foreground: #171717;

  --primary: #171717;
  --primary-foreground: #ffffff;

  --secondary: #f5f5f5;
  --secondary-foreground: #171717;

  --muted: #f5f5f5;
  --muted-foreground: #737373;

  --accent: #f5f5f5;
  --accent-foreground: #171717;

  --destructive: #ef4444;
  --destructive-foreground: #ffffff;

  --border: #e5e5e5;
  --input: #e5e5e5;
  --ring: #171717;

  --radius: 0.5rem;
}

@theme inline {
  --color-background: var(--background);
  --color-foreground: var(--foreground);
  --color-card: var(--card);
  --color-card-foreground: var(--card-foreground);
  --color-popover: var(--popover);
  --color-popover-foreground: var(--popover-foreground);
  --color-primary: var(--primary);
  --color-primary-foreground: var(--primary-foreground);
  --color-secondary: var(--secondary);
  --color-secondary-foreground: var(--secondary-foreground);
  --color-muted: var(--muted);
  --color-muted-foreground: var(--muted-foreground);
  --color-accent: var(--accent);
  --color-accent-foreground: var(--accent-foreground);
  --color-destructive: var(--destructive);
  --color-destructive-foreground: var(--destructive-foreground);
  --color-border: var(--border);
  --color-input: var(--input);
  --color-ring: var(--ring);
  --radius: var(--radius);
}

@media (prefers-color-scheme: dark) {
  :root {
    --background: #0a0a0a;
    --foreground: #ededed;

    --card: #0a0a0a;
    --card-foreground: #ededed;

    --popover: #0a0a0a;
    --popover-foreground: #ededed;

    --primary: #ededed;
    --primary-foreground: #0a0a0a;

    --secondary: #1a1a1a;
    --secondary-foreground: #ededed;

    --muted: #1a1a1a;
    --muted-foreground: #a3a3a3;

    --accent: #1a1a1a;
    --accent-foreground: #ededed;

    --destructive: #7f1d1d;
    --destructive-foreground: #ededed;

    --border: #262626;
    --input: #262626;
    --ring: #ededed;
  }
}

/* Custom animations */
@keyframes spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

@keyframes ping {
  75%,
  100% {
    transform: scale(2);
    opacity: 0;
  }
}

@keyframes pulse {
  50% {
    opacity: 0.5;
  }
}

@keyframes bounce {
  0%,
  100% {
    transform: translateY(-25%);
    animation-timing-function: cubic-bezier(0.8, 0, 1, 1);
  }
  50% {
    transform: none;
    animation-timing-function: cubic-bezier(0, 0, 0.2, 1);
  }
}

@layer utilities {
  .animate-spin {
    animation: spin 1s linear infinite;
  }
  .animate-ping {
    animation: ping 1s cubic-bezier(0, 0, 0.2, 1) infinite;
  }
  .animate-pulse {
    animation: pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;
  }
  .animate-bounce {
    animation: bounce 1s infinite;
  }
}

body {
  background: var(--background);
  color: var(--foreground);
  font-family:
    system-ui,
    -apple-system,
    BlinkMacSystemFont,
    "Segoe UI",
    Roboto,
    sans-serif;
}



================================================
FILE: app/layout.tsx
================================================
import type { Metadata } from "next";
import "./globals.css";
import { Header } from "@/components/layout/Header";
import { Footer } from "@/components/layout/Footer";
import { Toaster } from "@/components/ui/sonner"; // Import Toaster component for notifications

export const metadata: Metadata = {
  title: "Vietnam Property Platform | Find Your Perfect Home",
  description:
    "Discover properties tailored for Korean expatriates in Vietnam's most popular locations",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en">
      <body
        suppressHydrationWarning
        className="antialiased bg-background text-foreground" // Use theme variables
      >
        <div className="relative flex min-h-screen flex-col bg-background">
          <Header />
          <main className="flex-1">{children}</main>
          <Toaster />
          <Footer /> {/* Add the Footer component */}
        </div>
      </body>
    </html>
  );
}



================================================
FILE: app/page.tsx
================================================
import { getPropertyListings } from "@/lib/data/property";
import { KoreanExpatriatesSection } from "@/components/sections/KoreanExpatriatesSection";
import { HeroSection } from "@/components/sections/HeroSection";
import { FeatureHighlightsSection } from "@/components/sections/FeatureHighlightsSection";
import { ExploreSection } from "@/components/sections/ExploreSection";
import { FeaturedPropertiesClient } from "@/components/featured/FeaturedPropertiesClient";

// Direct implementation at root level to avoid route group client reference issues
export default async function Home() {
  // Fetch featured properties on the server
  const rentResult = await getPropertyListings({
    propertyType: "월세",
    limit: 3,
  });
  const buyResult = await getPropertyListings({
    propertyType: "매매",
    limit: 3,
  });

  // Get total properties count on the server
  const allPropertiesResult = await getPropertyListings({ limit: 1 });

  return (
    <div className="flex flex-col w-full">
      {/* Hero Section (Server Component) */}
      <HeroSection />

      {/* Explore Section (Server Component) */}
      <ExploreSection />

      {/* Featured Properties Section (Client Component, receives server-fetched data) */}
      <FeaturedPropertiesClient
        rentProperties={rentResult.data || []}
        buyProperties={buyResult.data || []}
        totalProperties={allPropertiesResult.total || 0}
      />

      {/* Feature Highlights Section (Client Component) */}
      <FeatureHighlightsSection />

      {/* For Korean Expatriates Section (Server Component) */}
      <KoreanExpatriatesSection />
    </div>
  );
}



================================================
FILE: app/(main)/layout.tsx
================================================
import Container from "@/components/layout/Container";

export default function MainLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return <Container>{children}</Container>;
}



================================================
FILE: app/(main)/loading.tsx
================================================
import { PropertyCardSkeleton } from "@/components/property/PropertyCardSkeleton";
import { Card } from "@/components/ui/card";

export default function Loading() {
  return (
    <div className="flex flex-col w-full">
      {/* Hero Section Skeleton */}
      <section className="relative w-full min-h-[600px] rounded-lg overflow-hidden mb-16 bg-muted animate-pulse">
        <div className="relative z-20 container mx-auto px-4 py-16 flex flex-col items-center justify-center min-h-[600px]">
          <div className="h-16 bg-muted-foreground/20 rounded-lg w-3/4 max-w-2xl mb-8"></div>
          <div className="h-12 bg-muted-foreground/20 rounded-lg w-1/2 max-w-xl mb-8"></div>
          <div className="h-14 bg-muted-foreground/20 rounded-lg w-full max-w-2xl"></div>
        </div>
      </section>

      {/* Explore Section Skeleton */}
      <section className="container mx-auto px-4 mb-16">
        <div className="mb-8">
          <div className="h-10 bg-muted rounded-md w-1/3 animate-pulse mb-4"></div>
          <div className="h-6 bg-muted rounded-md w-1/2 animate-pulse"></div>
        </div>

        {/* City Cards Skeleton */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-16">
          {Array.from({ length: 6 }).map((_, index) => (
            <div
              key={index}
              className="h-[240px] bg-muted rounded-lg animate-pulse"
            ></div>
          ))}
        </div>
      </section>

      {/* Featured Properties Section Skeleton */}
      <section className="container mx-auto px-4 mb-16">
        <div className="mb-8">
          <div className="h-10 bg-muted rounded-md w-1/3 animate-pulse mb-4"></div>
          <div className="h-6 bg-muted rounded-md w-1/2 animate-pulse"></div>
        </div>

        <div className="mb-8">
          <div className="h-10 bg-muted rounded-md w-full animate-pulse"></div>
        </div>

        {/* Property Cards Skeleton */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-8">
          {Array.from({ length: 3 }).map((_, index) => (
            <PropertyCardSkeleton key={index} />
          ))}
        </div>

        {/* Property Statistics Skeleton */}
        <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
          {Array.from({ length: 3 }).map((_, index) => (
            <Card key={index} className="p-6 flex items-center animate-pulse">
              <div className="h-12 w-12 bg-muted rounded-full mr-4"></div>
              <div>
                <div className="h-8 bg-muted rounded-md w-16 mb-2"></div>
                <div className="h-4 bg-muted rounded-md w-24"></div>
              </div>
            </Card>
          ))}
        </div>
      </section>

      {/* Korean Expatriates Section Skeleton */}
      <section className="bg-muted py-12 px-4 rounded-lg mb-16">
        <div className="container mx-auto">
          <div className="h-8 bg-muted-foreground/20 rounded-md w-1/3 mx-auto mb-4"></div>
          <div className="h-4 bg-muted-foreground/20 rounded-md w-1/2 mx-auto mb-6"></div>
          <div className="h-10 bg-muted-foreground/20 rounded-md w-32 mx-auto"></div>
        </div>
      </section>
    </div>
  );
}



================================================
FILE: app/(main)/properties/page.tsx
================================================
import { getPropertyListings } from "@/lib/data/property";
import Link from "next/link";
import { Button } from "@/components/ui/button";
import {
  Card,
  CardContent,
  CardHeader,
  CardTitle,
  CardDescription,
  CardFooter,
} from "@/components/ui/card";

export const metadata = {
  title: "All Properties | Vietnam Property Platform",
  description: "Browse all available properties in Vietnam",
};

export default async function PropertiesPage() {
  const result = await getPropertyListings({ limit: 12 });

  // Format price based on property type
  const formatPrice = (price: number, type: string) => {
    if (type === "월세") {
      return `$${price.toLocaleString()}/month`;
    } else {
      return `$${price.toLocaleString()}`;
    }
  };

  return (
    <div className="py-8">
      <div className="flex justify-between items-center mb-8">
        <h1 className="text-3xl font-bold">All Properties</h1>
        <Link href="/search">
          <Button>Advanced Search</Button>
        </Link>
      </div>

      {result.data.length === 0 ? (
        <div className="text-center py-12">
          <p className="text-muted-foreground">No properties found.</p>
        </div>
      ) : (
        <>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-8">
            {result.data.map((property) => (
              <Card key={property.id} className="h-full flex flex-col">
                <CardHeader className="pb-2">
                  <CardTitle className="text-lg line-clamp-2">
                    {property.title}
                  </CardTitle>
                  <CardDescription>{property.address}</CardDescription>
                </CardHeader>
                <CardContent className="py-2 flex-grow">
                  <div className="space-y-2">
                    <p className="font-semibold text-lg">
                      {formatPrice(property.price, property.property_type)}
                      <span className="ml-2 text-sm font-normal text-muted-foreground">
                        {property.property_type === "월세"
                          ? "Monthly Rent"
                          : "Purchase"}
                      </span>
                    </p>
                    <div className="flex space-x-4 text-sm">
                      <div>
                        {property.bedrooms}{" "}
                        <span className="text-muted-foreground">Bed</span>
                      </div>
                      <div>
                        {property.bathrooms}{" "}
                        <span className="text-muted-foreground">Bath</span>
                      </div>
                      <div>
                        {property.square_footage}{" "}
                        <span className="text-muted-foreground">sqft</span>
                      </div>
                    </div>
                    <p className="text-sm line-clamp-3 text-muted-foreground">
                      {property.description}
                    </p>
                  </div>
                </CardContent>
                <CardFooter className="pt-2">
                  <Link href={`/properties/${property.id}`} className="w-full">
                    <Button variant="outline" className="w-full">
                      View Details
                    </Button>
                  </Link>
                </CardFooter>
              </Card>
            ))}
          </div>

          {result.hasMore && (
            <div className="flex justify-center">
              <Link href="/search">
                <Button variant="outline">View More Properties</Button>
              </Link>
            </div>
          )}
        </>
      )}
    </div>
  );
}



================================================
FILE: app/(main)/properties/[id]/error.tsx
================================================
"use client";

import { useEffect } from "react";
import { Button } from "@/components/ui/button";
import Link from "next/link";

interface ErrorProps {
  error: Error;
  reset: () => void;
}

export default function Error({ error, reset }: ErrorProps) {
  useEffect(() => {
    // Log the error to an error reporting service
    console.error("Property page error:", error);
  }, [error]);

  return (
    <div className="flex flex-col items-center justify-center min-h-[50vh] text-center px-4">
      <h2 className="text-2xl font-bold mb-4">Something went wrong</h2>
      <p className="text-muted-foreground mb-6">
        We encountered an error while loading this property.
      </p>
      <div className="flex flex-col sm:flex-row gap-4">
        <Button onClick={reset} variant="outline">
          Try again
        </Button>
        <Link href="/properties">
          <Button>View all properties</Button>
        </Link>
      </div>
    </div>
  );
}



================================================
FILE: app/(main)/properties/[id]/not-found.tsx
================================================
import { Button } from "@/components/ui/button";
import Link from "next/link";

export default function NotFound() {
  return (
    <div className="flex flex-col items-center justify-center min-h-[50vh] text-center px-4">
      <h2 className="text-2xl font-bold mb-4">Property Not Found</h2>
      <p className="text-muted-foreground mb-6">
        The property you are looking for does not exist or has been removed.
      </p>
      <div className="flex flex-col sm:flex-row gap-4">
        <Link href="/properties">
          <Button variant="outline">View all properties</Button>
        </Link>
        <Link href="/search">
          <Button>Search properties</Button>
        </Link>
      </div>
    </div>
  );
}



================================================
FILE: app/(main)/properties/[id]/page.tsx
================================================
import { notFound } from 'next/navigation';
import { Button } from '@/components/ui/button';
import { Card } from '@/components/ui/card';
import Link from 'next/link';
import PropertyDetail from './_components/PropertyDetail';
import PropertyGallery from './_components/PropertyGallery';
import PropertyFeatures from './_components/PropertyFeatures';
import PropertyCosts from './_components/PropertyCosts';
import RequestInfoForm from './_components/RequestInfoForm';
import { getPropertyById, getPropertyListings } from '@/lib/data/property';

// Generate metadata for the property page
export async function generateMetadata({ params }: { params: Promise<{ id: string }> }) {
  // Await the params Promise to get the ID
  const resolvedParams = await params;
  const property = await getPropertyById(resolvedParams.id);

  if (!property) {
    return {
      title: 'Property Not Found',
      description: 'The requested property could not be found.'
    };
  }

  return {
    title: `${property.title} | Vietnam Property Platform`,
    description: property.description?.substring(0, 160) || `View details for ${property.title} located in ${property.address}`
  };
}

export default async function PropertyPage({ params }: { params: Promise<{ id: string }> }) {
  // Await the params Promise to get the ID
  const resolvedParams = await params;

  // Fetch the property data using the ID from URL params
  const property = await getPropertyById(resolvedParams.id);

  // If property is not found, trigger the not-found page
  if (!property) {
    notFound();
  }

  // Fetch similar properties (optional) - using same property type with different ID
  // Only fetch properties of the same type, and we'll filter out the current one client-side
  const similarPropertiesResult = await getPropertyListings({
    propertyType: property.property_type,
    limit: 4 // Request one extra since we'll filter one out
  });

  // Filter out the current property from the results and limit to 3 max
  const similarProperties = (similarPropertiesResult.data || [])
    .filter(p => p.id !== property.id)
    .slice(0, 3);

  return (
    <div className="min-h-screen bg-[#f7f9fa]">
      <div className="container mx-auto py-10">
        {/* Back button */}
        <div className="mb-6">
          <Link href="/">
            <Button
              variant="outline"
              size="sm"
              className="rounded-full border-gray-300 bg-white shadow-sm hover:bg-gray-50"
            >
              ← Back to Home
            </Button>
          </Link>
        </div>
        {/* Main content */}
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-10">
          {/* Left column - Main content */}
          <div className="lg:col-span-2 space-y-8">
            {/* Gallery */}
            <div className="bg-white border border-gray-200 rounded-2xl shadow-lg p-4 sm:p-6">
              <PropertyGallery property={property} />
            </div>
            {/* Property details */}
            <div className="bg-white border border-gray-200 rounded-2xl shadow-lg p-6">
              <PropertyDetail property={property} />
            </div>
            {/* Features */}
            <div className="bg-white border border-gray-200 rounded-2xl shadow-lg p-6">
              <h2 className="text-2xl font-semibold mb-6">Property Features</h2>
              <PropertyFeatures property={property} />
            </div>
          </div>
          {/* Right column - Sticky sidebar */}
          <div className="lg:col-span-1">
            <div className="sticky top-8 space-y-8">
              {/* Request Info card */}
              <Card className="p-6 border border-gray-200 rounded-2xl shadow-lg bg-white">
                <RequestInfoForm property={property} />
              </Card>
              {/* Costs breakdown */}
              <div className="bg-white border border-gray-200 rounded-2xl shadow-lg p-6">
                <PropertyCosts property={property} />
              </div>
              {/* Similar properties */}
              {similarProperties.length > 0 && (
                <Card className="p-6 border border-gray-200 rounded-2xl shadow-lg bg-white">
                  <h3 className="text-lg font-semibold mb-4">
                    Similar Properties
                  </h3>
                  <div className="space-y-4">
                    {similarProperties.map((similarProperty) => (
                      <Link
                        key={similarProperty.id}
                        href={`/properties/${similarProperty.id}`}
                        className="block"
                      >
                        <div className="border border-gray-200 rounded-lg p-4 hover:bg-muted transition-colors">
                          <h4 className="font-medium line-clamp-1">
                            {similarProperty.title}
                          </h4>
                          <p className="text-sm text-muted-foreground line-clamp-1">
                            {similarProperty.address}
                          </p>
                          <p className="font-medium mt-2">
                            ${similarProperty.price.toLocaleString()}
                            {similarProperty.property_type === '월세'
                              ? '/month'
                              : ''}
                          </p>
                        </div>
                      </Link>
                    ))}
                  </div>
                </Card>
              )}
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}



================================================
FILE: app/(main)/properties/[id]/_components/PropertyCosts.tsx
================================================
"use client";

import { PropertyListing } from "@/types/property";
import { Separator } from "@/components/ui/separator";

interface PropertyCostsProps {
  property: PropertyListing;
}

export default function PropertyCosts({ property }: PropertyCostsProps) {
  const monthlyCosts = [
    { label: "Base rent", amount: property.price },
    { label: "Parking fee", amount: 5 },
    { label: "Pet fee (if applicable)", amount: 40 },
  ];

  const oneTimeCosts = [
    { label: "Security deposit", amount: property.price * 2 },
    { label: "Application fee", amount: 50 },
    { label: "Administrative fee", amount: 300 },
    { label: "Pet deposit (if applicable)", amount: 500 },
  ];

  const formatCurrency = (amount: number) => {
    return new Intl.NumberFormat("en-US", {
      style: "currency",
      currency: "USD",
    }).format(amount);
  };

  const totalMonthlyCosts = monthlyCosts.reduce(
    (acc, cost) => acc + cost.amount,
    0,
  );

  return (
    <div className="bg-white border border-gray-200 rounded-2xl shadow-lg p-6">
      <div className="mb-6">
        <h2 className="text-xl font-bold text-gray-900">Costs & Fees</h2>
      </div>
      {/* Monthly Costs */}
      <div className="mb-6">
        <h4 className="font-semibold mb-3 text-gray-800">Monthly Costs</h4>
        <div className="space-y-2">
          {monthlyCosts.map((cost) => (
            <div key={cost.label} className="flex justify-between text-sm">
              <span className="text-muted-foreground">{cost.label}</span>
              <span>{formatCurrency(cost.amount)}</span>
            </div>
          ))}
          <Separator className="my-2" />
          <div className="flex justify-between font-semibold text-gray-900">
            <span>Total Monthly Costs</span>
            <span>{formatCurrency(totalMonthlyCosts)}</span>
          </div>
        </div>
      </div>
      {/* One-time Costs */}
      <div className="mb-6">
        <h4 className="font-semibold mb-3 text-gray-800">One-time Costs</h4>
        <div className="space-y-2">
          {oneTimeCosts.map((cost) => (
            <div key={cost.label} className="flex justify-between text-sm">
              <span className="text-muted-foreground">{cost.label}</span>
              <span>{formatCurrency(cost.amount)}</span>
            </div>
          ))}
        </div>
      </div>
      <div className="text-xs text-muted-foreground">
        <p>
          * Prices shown are estimates. Additional costs and fees may apply.
        </p>
        <p>* Pet fees and deposits only apply to pet owners.</p>
        <p>* Security deposit is typically two months&apos; rent.</p>
      </div>
    </div>
  );
}



================================================
FILE: app/(main)/properties/[id]/_components/PropertyDetail.tsx
================================================
"use client";

import { PropertyListing } from "@/types/property";
import { Heart, MapPin, BedDouble, Bath, Maximize2 } from "lucide-react";

interface PropertyDetailProps {
  property: PropertyListing;
}

export default function PropertyDetail({ property }: PropertyDetailProps) {
  // Format price based on property type
  const formatPrice = (price: number, type: string) => {
    if (type === "월세") {
      return `$${price.toLocaleString()}/month`;
    } else {
      return `$${price.toLocaleString()}`;
    }
  };

  return (
    <div className="bg-white border border-gray-200 rounded-2xl shadow-lg p-6 space-y-6">
      <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4">
        <div className="flex items-center gap-3">
          <h1 className="text-3xl font-bold text-gray-900 leading-tight">
            {property.title}
          </h1>
          <button
            className="ml-2 p-2 rounded-full border border-gray-200 bg-white hover:bg-gray-100 text-[#007882] shadow-sm transition-colors"
            aria-label="Save property"
          >
            <Heart className="h-5 w-5" />
          </button>
        </div>
        <div className="flex items-center gap-2">
          <span className="text-2xl font-bold text-[#E94F1D]">
            {formatPrice(property.price, property.property_type)}
          </span>
          <span className="ml-2 text-sm text-muted-foreground font-medium">
            {property.property_type === "월세" ? "Monthly Rent" : "Purchase"}
          </span>
        </div>
      </div>
      <div className="flex flex-wrap items-center gap-4 text-sm text-muted-foreground mt-2">
        <span className="flex items-center gap-1">
          <MapPin className="h-4 w-4" />
          {property.address}
        </span>
        <span className="flex items-center gap-1">
          <BedDouble className="h-4 w-4" />
          {property.bedrooms} Bed
        </span>
        <span className="flex items-center gap-1">
          <Bath className="h-4 w-4" />
          {property.bathrooms} Bath
        </span>
        <span className="flex items-center gap-1">
          <Maximize2 className="h-4 w-4" />
          {property.square_footage} sqft
        </span>
      </div>
      <div>
        <h3 className="text-lg font-semibold mb-2">Description</h3>
        <p className="text-gray-700 whitespace-pre-line leading-relaxed">
          {property.description}
        </p>
      </div>
      {/* Features (legacy, keep for compatibility) */}
      {Array.isArray(property.features) && property.features.length > 0 && (
        <div>
          <h3 className="text-xl font-semibold mb-2">Features</h3>
          <ul className="grid grid-cols-1 md:grid-cols-2 gap-2">
            {property.features.map((feature: string, index: number) => (
              <li key={index} className="flex items-center">
                <span className="mr-2">•</span>
                {feature}
              </li>
            ))}
          </ul>
        </div>
      )}
    </div>
  );
}



================================================
FILE: app/(main)/properties/[id]/_components/PropertyFeatures.tsx
================================================
"use client";

import { PropertyListing } from "@/types/property";
import { CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Bath, BedDouble, Home, Maximize, Wifi } from "lucide-react";

interface PropertyFeaturesProps {
  property: PropertyListing;
}

export default function PropertyFeatures({ property }: PropertyFeaturesProps) {
  const featureSections = {
    interior: [
      { icon: BedDouble, label: `${property.bedrooms} Bedrooms` },
      { icon: Bath, label: `${property.bathrooms} Bathrooms` },
      { icon: Maximize, label: `${property.square_footage} Sq Ft` },
      { icon: Home, label: "Modern Kitchen" },
      { icon: Wifi, label: "High-Speed Internet" },
    ],
    building: [
      "Elevator Access",
      "Fitness Center",
      "Package Receiving",
      "Security System",
      "Parking Available",
    ],
    exterior: [
      "Private Balcony",
      "Garden Access",
      "BBQ Area",
      "Swimming Pool",
      "Children's Playground",
    ],
    additional: [
      "24/7 Security",
      "Pet Friendly",
      "Close to Public Transport",
      "Near International Schools",
      "Shopping Centers Nearby",
    ],
  };

  return (
    <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
      {/* Interior Features */}
      <div className="bg-white border border-gray-200 rounded-2xl shadow-lg">
        <CardHeader>
          <CardTitle className="text-lg font-semibold">
            Interior Features
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="space-y-4">
            {featureSections.interior.map(({ icon: Icon, label }) => (
              <div key={label} className="flex items-center gap-3">
                <Icon className="h-5 w-5 text-muted-foreground" />
                <span>{label}</span>
              </div>
            ))}
          </div>
        </CardContent>
      </div>
      {/* Building Amenities */}
      <div className="bg-white border border-gray-200 rounded-2xl shadow-lg">
        <CardHeader>
          <CardTitle className="text-lg font-semibold">
            Building Amenities
          </CardTitle>
        </CardHeader>
        <CardContent>
          <ul className="space-y-2">
            {featureSections.building.map((feature) => (
              <li key={feature} className="flex items-center gap-2">
                <span className="h-1.5 w-1.5 rounded-full bg-primary" />
                {feature}
              </li>
            ))}
          </ul>
        </CardContent>
      </div>
      {/* Exterior Features */}
      <div className="bg-white border border-gray-200 rounded-2xl shadow-lg">
        <CardHeader>
          <CardTitle className="text-lg font-semibold">
            Exterior Features
          </CardTitle>
        </CardHeader>
        <CardContent>
          <ul className="space-y-2">
            {featureSections.exterior.map((feature) => (
              <li key={feature} className="flex items-center gap-2">
                <span className="h-1.5 w-1.5 rounded-full bg-primary" />
                {feature}
              </li>
            ))}
          </ul>
        </CardContent>
      </div>
      {/* Additional Information */}
      <div className="bg-white border border-gray-200 rounded-2xl shadow-lg">
        <CardHeader>
          <CardTitle className="text-lg font-semibold">
            Additional Information
          </CardTitle>
        </CardHeader>
        <CardContent>
          <ul className="space-y-2">
            {featureSections.additional.map((feature) => (
              <li key={feature} className="flex items-center gap-2">
                <span className="h-1.5 w-1.5 rounded-full bg-primary" />
                {feature}
              </li>
            ))}
          </ul>
        </CardContent>
      </div>
    </div>
  );
}



================================================
FILE: app/(main)/properties/[id]/_components/PropertyGallery.tsx
================================================
"use client";

import { useState } from "react";
import Image from "next/image";
import { PropertyListing, PropertyImage } from "@/types/property"; // Import PropertyImage
import { Dialog, DialogContent } from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { ChevronLeft, ChevronRight, Expand, X } from "lucide-react";

interface PropertyGalleryProps {
  // Expect the property object which includes the processed property_images array
  property: PropertyListing & {
    property_images?: (PropertyImage & { publicUrl: string | null })[];
  };
}

export default function PropertyGallery({ property }: PropertyGalleryProps) {
  const [currentImageIndex, setCurrentImageIndex] = useState(0);
  const [isFullscreen, setIsFullscreen] = useState(false);

  // Use the processed property_images array
  const images = property.property_images?.length
    ? property.property_images
    : // Provide a default structure if no images exist
      [
        {
          storage_path: "",
          publicUrl: "/assets/images/property-placeholder.jpg",
        } as PropertyImage,
      ];

  const nextImage = () => {
    setCurrentImageIndex((prev) => (prev + 1) % images.length);
  };

  const previousImage = () => {
    setCurrentImageIndex((prev) => (prev - 1 + images.length) % images.length);
  };

  // Ensure images array is not empty before accessing index
  const currentImageUrl =
    images[currentImageIndex]?.publicUrl ||
    "/assets/images/property-placeholder.jpg";
  const currentImageAlt =
    images[currentImageIndex]?.alt_text ||
    `Property image ${currentImageIndex + 1}`;

  return (
    <div className="relative bg-white border border-gray-200 rounded-2xl shadow-lg p-2 sm:p-4">
      {/* Price badge (example, can be replaced with dynamic value) */}
      <div className="absolute top-4 left-4 z-10">
        <span className="inline-block bg-[#eaf6f3] text-[#007882] text-sm font-semibold px-4 py-1 rounded-full shadow-sm border border-[#b2e2d6]">
          For Sale
        </span>
      </div>
      {/* Main Image */}
      <div className="relative aspect-[16/9] w-full overflow-hidden rounded-xl border border-gray-100">
        <Image
          src={currentImageUrl}
          alt={currentImageAlt}
          fill
          className="object-cover"
          priority={currentImageIndex === 0}
        />
        <Button
          variant="ghost"
          size="icon"
          className="absolute top-4 right-4 bg-white/80 hover:bg-white text-[#007882] border border-gray-200 shadow-sm"
          onClick={() => setIsFullscreen(true)}
          aria-label="View fullscreen"
        >
          <Expand className="h-5 w-5" />
        </Button>
        {images.length > 1 && (
          <>
            <Button
              variant="ghost"
              size="icon"
              className="absolute left-4 top-1/2 -translate-y-1/2 bg-white/80 hover:bg-white text-[#007882] border border-gray-200 shadow-sm"
              onClick={previousImage}
              aria-label="Previous image"
            >
              <ChevronLeft className="h-6 w-6" />
            </Button>
            <Button
              variant="ghost"
              size="icon"
              className="absolute right-4 top-1/2 -translate-y-1/2 bg-white/80 hover:bg-white text-[#007882] border border-gray-200 shadow-sm"
              onClick={nextImage}
              aria-label="Next image"
            >
              <ChevronRight className="h-6 w-6" />
            </Button>
          </>
        )}
        <div className="absolute bottom-4 right-4 bg-white/80 px-3 py-1 rounded-full text-[#007882] text-sm border border-gray-200 shadow-sm">
          {currentImageIndex + 1} / {images.length}
        </div>
      </div>
      {/* Thumbnail Strip */}
      {images.length > 1 && (
        <div className="flex gap-2 mt-4 overflow-x-auto pb-2">
          {images.map((image, index) => (
            <button
              key={image.id || `thumb-${index}`}
              onClick={() => setCurrentImageIndex(index)}
              className={`relative w-20 h-20 flex-shrink-0 rounded-md overflow-hidden border-2 ${currentImageIndex === index ? "border-[#007882]" : "border-gray-200"}`}
              aria-label={`View image ${index + 1}`}
            >
              <Image
                src={
                  image.publicUrl || "/assets/images/property-placeholder.jpg"
                }
                alt={image.alt_text || `Thumbnail ${index + 1}`}
                fill
                className="object-cover"
              />
            </button>
          ))}
        </div>
      )}
      {/* Fullscreen Dialog */}
      <Dialog open={isFullscreen} onOpenChange={setIsFullscreen}>
        <DialogContent className="max-w-7xl w-full h-[90vh] p-0">
          <div className="relative w-full h-full bg-white rounded-2xl">
            <Image
              src={currentImageUrl}
              alt={currentImageAlt}
              fill
              className="object-contain rounded-2xl"
            />
            <Button
              variant="ghost"
              size="icon"
              className="absolute top-4 right-4 bg-white/80 hover:bg-white text-[#007882] border border-gray-200 shadow-sm"
              onClick={() => setIsFullscreen(false)}
              aria-label="Close fullscreen"
            >
              <X className="h-5 w-5" />
            </Button>
            {images.length > 1 && (
              <>
                <Button
                  variant="ghost"
                  size="icon"
                  className="absolute left-4 top-1/2 -translate-y-1/2 bg-white/80 hover:bg-white text-[#007882] border border-gray-200 shadow-sm"
                  onClick={previousImage}
                  aria-label="Previous image"
                >
                  <ChevronLeft className="h-6 w-6" />
                </Button>
                <Button
                  variant="ghost"
                  size="icon"
                  className="absolute right-4 top-1/2 -translate-y-1/2 bg-white/80 hover:bg-white text-[#007882] border border-gray-200 shadow-sm"
                  onClick={nextImage}
                  aria-label="Next image"
                >
                  <ChevronRight className="h-6 w-6" />
                </Button>
              </>
            )}
            <div className="absolute bottom-4 right-4 bg-white/80 px-3 py-1 rounded-full text-[#007882] text-sm border border-gray-200 shadow-sm">
              {currentImageIndex + 1} / {images.length}
            </div>
          </div>
        </DialogContent>
      </Dialog>
    </div>
  );
}



================================================
FILE: app/(main)/properties/[id]/_components/RequestInfoForm.tsx
================================================
'use client';

import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { RequestInfoSchema, RequestInfo } from '@/lib/validation/request-info';
import { toast } from 'sonner';
import type { PropertyListing } from '@/types/property';

export default function RequestInfoForm({ property }: { property: PropertyListing }) {
  const {
    register,
    handleSubmit,
    reset,
    formState: { errors, isSubmitting },
  } = useForm<RequestInfo>({
    resolver: zodResolver(RequestInfoSchema),
    defaultValues: {
      name: '',
      phone: '',
      email: '',
      message: `I am interested in ${property.title} at ${property.address}`,
    },
  });

  const onSubmit = async (data: RequestInfo) => {
    try {
      const res = await fetch('/api/request-info', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(data),
      });
      if (!res.ok) {
        const errorData = await res.json();
        throw new Error(errorData.error || 'Failed to send request');
      }
      toast.success('Your request has been sent! We\'ll get back to you soon.');
      reset();
    } catch (err) {
      toast.error(err instanceof Error ? err.message : 'Something went wrong.');
    }
  };

  return (
    <form className="space-y-4" onSubmit={handleSubmit(onSubmit)} noValidate>
      <div className="flex gap-2">
        <div className="flex-1">
          <label
            htmlFor="request-name"
            className="block text-sm font-semibold text-gray-700 mb-1"
          >
            Name
          </label>
          <input
            id="request-name"
            type="text"
            {...register('name')}
            className="w-full rounded-md border border-gray-300 px-3 py-2 bg-gray-50 focus:outline-none focus:ring-2 focus:ring-[#007882]"
            disabled={isSubmitting}
          />
          {errors.name && (
            <p className="ml-1 mt-1 text-xs text-rose-500">
              {errors.name.message}
            </p>
          )}
        </div>
        <div className="flex-1">
          <label
            htmlFor="request-phone"
            className="block text-sm font-semibold text-gray-700 mb-1"
          >
            Phone
          </label>
          <input
            id="request-phone"
            type="tel"
            {...register('phone')}
            className="w-full rounded-md border border-gray-300 px-3 py-2 bg-gray-50 focus:outline-none focus:ring-2 focus:ring-[#007882]"
            disabled={isSubmitting}
          />
          {errors.phone && (
            <p className="ml-1 mt-1 text-xs text-rose-500">
              {errors.phone.message}
            </p>
          )}
        </div>
      </div>
      <div>
        <label
          htmlFor="request-email"
          className="block text-sm font-semibold text-gray-700 mb-1"
        >
          Email
        </label>
        <input
          id="request-email"
          type="email"
          {...register('email')}
          className="w-full rounded-md border border-gray-300 px-3 py-2 bg-gray-50 focus:outline-none focus:ring-2 focus:ring-[#007882]"
          disabled={isSubmitting}
        />
        {errors.email && (
          <p className="ml-1 mt-1 text-xs text-rose-500">
            {errors.email.message}
          </p>
        )}
      </div>
      <div>
        <label
          htmlFor="request-message"
          className="block text-sm font-semibold text-gray-700 mb-1"
        >
          Message
        </label>
        <textarea
          id="request-message"
          rows={4}
          {...register('message')}
          className="w-full rounded-md border border-gray-300 px-3 py-2 bg-gray-50 focus:outline-none focus:ring-2 focus:ring-[#007882]"
          disabled={isSubmitting}
        />
        {errors.message && (
          <p className="ml-1 mt-1 text-xs text-rose-500">
            {errors.message.message}
          </p>
        )}
      </div>
      <button
        type="submit"
        className="w-full bg-[#007882] hover:bg-[#006670] text-white py-3 px-6 rounded-lg font-semibold transition-colors disabled:opacity-70"
        disabled={isSubmitting}
      >
        {isSubmitting ? 'Sending...' : 'Request Info'}
      </button>
    </form>
  );
}



================================================
FILE: app/(main)/search/page.tsx
================================================
import { Suspense } from "react";
import SearchForm from "./_components/SearchForm";
import SearchResults from "./_components/SearchResults";
import { PropertyDataProvider } from "@/components/providers/PropertyDataProvider";

export const metadata = {
  title: "Search Properties | Vietnam Property Platform",
  description: "Search for properties in Vietnam that match your criteria",
};

// In Next.js 15.3.1, searchParams must be a Promise type
export default async function SearchPage({
  searchParams,
}: {
  searchParams: Promise<{ [key: string]: string | string[] | undefined }>
}) {
  // Await the searchParams Promise to access its values
  const resolvedSearchParams = await searchParams;
  
  return (
    <PropertyDataProvider>
      <div className="py-8">
        <h1 className="text-3xl font-bold mb-8 text-center">
          Search Properties
        </h1>

        <div className="grid grid-cols-1 lg:grid-cols-4 gap-8">
          <div className="lg:col-span-1">
            <SearchForm />
          </div>

          <div className="lg:col-span-3">
            <Suspense fallback={<div>Loading...</div>}>
              <SearchResults
                searchParams={Object.fromEntries(
                  Object.entries(resolvedSearchParams).map(([key, value]) => [
                    key,
                    Array.isArray(value)
                      ? value[0] ?? ''
                      : value ?? ''
                  ])
                )}
              />
            </Suspense>
          </div>
        </div>
      </div>
    </PropertyDataProvider>
  );
}



================================================
FILE: app/(main)/search/_components/SearchForm.tsx
================================================
"use client";

import { useState, useTransition } from "react";
import { PropertyType } from "@/types/property";
import { usePropertyData } from "@/components/providers/PropertyDataProvider";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import {
  Card,
  CardContent,
  CardHeader,
  CardTitle,
  CardDescription,
  CardFooter,
} from "@/components/ui/card";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Checkbox } from "@/components/ui/checkbox"; // Import Checkbox
import { Label } from "@/components/ui/label"; // Import Label

interface SearchFormProps {
  className?: string;
  onSearch?: (searchParams: Record<string, string>) => void;
}

export default function SearchForm({ className, onSearch }: SearchFormProps) {
  const { searchParams, updateSearchParams, resetSearchParams } =
    usePropertyData();
  const [, startTransition] = useTransition(); // Remove isPending

  // Initialize form state from URL search params
  const [searchText, setSearchText] = useState(searchParams.search || "");
  const [minPrice, setMinPrice] = useState(searchParams.minPrice || "");
  const [maxPrice, setMaxPrice] = useState(searchParams.maxPrice || "");
  const [propertyType, setPropertyType] = useState<PropertyType | "any">(
    (searchParams.propertyType as PropertyType) || "any",
  );
  const [minBedrooms, setMinBedrooms] = useState(
    searchParams.minBedrooms || "",
  );
  const [minBathrooms, setMinBathrooms] = useState(
    searchParams.minBathrooms || "",
  );
  const [lat, setLat] = useState(searchParams.lat || "");
  const [lng, setLng] = useState(searchParams.lng || "");
  const [radiusMeters, setRadiusMeters] = useState(
    searchParams.radiusMeters || "5000",
  );
  // Add state for features
  const [features, setFeatures] = useState<Record<string, boolean>>({
    parking: searchParams.parking === "true",
    pool: searchParams.pool === "true",
    gym: searchParams.gym === "true",
    furnished: searchParams.furnished === "true",
  });

  // Form validation
  const [errors, setErrors] = useState<Record<string, string>>({});

  const validateForm = () => {
    const newErrors: Record<string, string> = {};

    // Validate numeric fields
    if (minPrice && isNaN(Number(minPrice))) {
      newErrors.minPrice = "Must be a valid number";
    }

    if (maxPrice && isNaN(Number(maxPrice))) {
      newErrors.maxPrice = "Must be a valid number";
    }

    if (minBedrooms && isNaN(Number(minBedrooms))) {
      newErrors.minBedrooms = "Must be a valid number";
    }

    if (minBathrooms && isNaN(Number(minBathrooms))) {
      newErrors.minBathrooms = "Must be a valid number";
    }

    if ((lat && !lng) || (!lat && lng)) {
      newErrors.location = "Both latitude and longitude are required";
    }

    if (lat && isNaN(Number(lat))) {
      newErrors.lat = "Must be a valid number";
    }

    if (lng && isNaN(Number(lng))) {
      newErrors.lng = "Must be a valid number";
    }

    if (radiusMeters && isNaN(Number(radiusMeters))) {
      newErrors.radiusMeters = "Must be a valid number";
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();

    if (!validateForm()) {
      return;
    }

    // Build search params
    const params: Record<string, string> = {};

    if (searchText) params.search = searchText;
    if (minPrice) params.minPrice = minPrice;
    if (maxPrice) params.maxPrice = maxPrice;
    if (propertyType && propertyType !== "any")
      params.propertyType = propertyType;
    if (minBedrooms) params.minBedrooms = minBedrooms;
    if (minBathrooms) params.minBathrooms = minBathrooms;
    if (lat && lng) {
      params.lat = lat;
      params.lng = lng;
      params.lng = lng;
      params.radiusMeters = radiusMeters;
    }
    // Add features to params if true
    Object.entries(features).forEach(([key, value]) => {
      if (value) {
        params[key] = "true";
      }
    });

    // If onSearch prop is provided, call it with the search params
    if (onSearch) {
      onSearch(params);
    } else {
      // Otherwise, update the search params using the provider
      startTransition(() => {
        updateSearchParams(params);
      });
    }
  };

  const handleReset = () => {
    setSearchText("");
    setMinPrice("");
    setMaxPrice("");
    setPropertyType("any");
    setMinBedrooms("");
    setMinBathrooms("");
    setLat("");
    setLng("");
    setRadiusMeters("5000");
    // Reset features state
    setFeatures({
      parking: false,
      pool: false,
      gym: false,
      furnished: false,
    });
    setErrors({});

    // Reset search params in the URL
    startTransition(() => {
      resetSearchParams();
    });
  };

  return (
    <Card className={className}>
      <CardHeader>
        <CardTitle className="text-2xl">Find Your Property</CardTitle>
        <CardDescription>
          Search for properties in Vietnam that match your criteria
        </CardDescription>
      </CardHeader>
      <CardContent>
        <form onSubmit={handleSubmit} className="space-y-4">
          {/* Search Text */}
          <div className="space-y-2">
            <label htmlFor="search" className="text-sm font-medium">
              Search
            </label>
            <Input
              id="search"
              placeholder="Enter keywords..."
              value={searchText}
              onChange={(e) => setSearchText(e.target.value)}
            />
          </div>

          {/* Property Type */}
          <div className="space-y-2">
            <label htmlFor="propertyType" className="text-sm font-medium">
              Property Type
            </label>
            <Select
              value={propertyType}
              onValueChange={(value) => setPropertyType(value as PropertyType)}
            >
              <SelectTrigger id="propertyType">
                <SelectValue placeholder="Select property type" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="any">Any</SelectItem>
                <SelectItem value="월세">Monthly Rent (월세)</SelectItem>
                <SelectItem value="매매">Purchase (매매)</SelectItem>
              </SelectContent>
            </Select>
          </div>

          {/* Price Range */}
          <div className="grid grid-cols-2 gap-4">
            <div className="space-y-2">
              <label htmlFor="minPrice" className="text-sm font-medium">
                Min Price (USD)
              </label>
              <Input
                id="minPrice"
                placeholder="Min price"
                value={minPrice}
                onChange={(e) => setMinPrice(e.target.value)}
                className={errors.minPrice ? "border-red-500" : ""}
              />
              {errors.minPrice && (
                <p className="text-xs text-red-500">{errors.minPrice}</p>
              )}
            </div>
            <div className="space-y-2">
              <label htmlFor="maxPrice" className="text-sm font-medium">
                Max Price (USD)
              </label>
              <Input
                id="maxPrice"
                placeholder="Max price"
                value={maxPrice}
                onChange={(e) => setMaxPrice(e.target.value)}
                className={errors.maxPrice ? "border-red-500" : ""}
              />
              {errors.maxPrice && (
                <p className="text-xs text-red-500">{errors.maxPrice}</p>
              )}
            </div>
          </div>

          {/* Bedrooms & Bathrooms */}
          <div className="grid grid-cols-2 gap-4">
            <div className="space-y-2">
              <label htmlFor="minBedrooms" className="text-sm font-medium">
                Min Bedrooms
              </label>
              <Input
                id="minBedrooms"
                placeholder="Min bedrooms"
                value={minBedrooms}
                onChange={(e) => setMinBedrooms(e.target.value)}
                className={errors.minBedrooms ? "border-red-500" : ""}
              />
              {errors.minBedrooms && (
                <p className="text-xs text-red-500">{errors.minBedrooms}</p>
              )}
            </div>
            <div className="space-y-2">
              <label htmlFor="minBathrooms" className="text-sm font-medium">
                Min Bathrooms
              </label>
              <Input
                id="minBathrooms"
                placeholder="Min bathrooms"
                value={minBathrooms}
                onChange={(e) => setMinBathrooms(e.target.value)}
                className={errors.minBathrooms ? "border-red-500" : ""}
              />
              {errors.minBathrooms && (
                <p className="text-xs text-red-500">{errors.minBathrooms}</p>
              )}
            </div>
          </div>

          {/* Location Search */}
          <div className="space-y-2">
            <label className="text-sm font-medium">Location (Optional)</label>
            <div className="grid grid-cols-2 gap-4">
              <div className="space-y-2">
                <Input
                  id="lat"
                  placeholder="Latitude"
                  value={lat}
                  onChange={(e) => setLat(e.target.value)}
                  className={
                    errors.lat || errors.location ? "border-red-500" : ""
                  }
                />
                {errors.lat && (
                  <p className="text-xs text-red-500">{errors.lat}</p>
                )}
              </div>
              <div className="space-y-2">
                <Input
                  id="lng"
                  placeholder="Longitude"
                  value={lng}
                  onChange={(e) => setLng(e.target.value)}
                  className={
                    errors.lng || errors.location ? "border-red-500" : ""
                  }
                />
                {errors.lng && (
                  <p className="text-xs text-red-500">{errors.lng}</p>
                )}
              </div>
            </div>
            {errors.location && (
              <p className="text-xs text-red-500">{errors.location}</p>
            )}
          </div>

          {/* Features */}
          <div className="space-y-4">
            <label className="text-sm font-medium block mb-2">Features</label>
            <div className="grid grid-cols-2 gap-x-4 gap-y-2">
              {Object.keys(features).map((key) => (
                <div key={key} className="flex items-center space-x-2">
                  <Checkbox
                    id={`feature-${key}`}
                    checked={features[key]}
                    onCheckedChange={(checked) => {
                      setFeatures((prev) => ({
                        ...prev,
                        [key]: Boolean(checked),
                      }));
                    }}
                  />
                  <Label
                    htmlFor={`feature-${key}`}
                    className="text-sm font-normal capitalize"
                  >
                    {key}
                  </Label>
                </div>
              ))}
            </div>
          </div>

          {/* Radius */}
          <div className="space-y-2">
            <label htmlFor="radiusMeters" className="text-sm font-medium">
              Search Radius (meters)
            </label>
            <Input
              id="radiusMeters"
              placeholder="Radius in meters"
              value={radiusMeters}
              onChange={(e) => setRadiusMeters(e.target.value)}
              className={errors.radiusMeters ? "border-red-500" : ""}
            />
            {errors.radiusMeters && (
              <p className="text-xs text-red-500">{errors.radiusMeters}</p>
            )}
          </div>
        </form>
      </CardContent>
      <CardFooter className="flex justify-between">
        <Button variant="outline" onClick={handleReset}>
          Reset
        </Button>
        <Button onClick={handleSubmit}>Search</Button>
      </CardFooter>
    </Card>
  );
}



================================================
FILE: app/(main)/search/_components/SearchResults.tsx
================================================
"use client";

import { useState, useEffect } from "react";
import { PropertyListing } from "@/types/property";
import { Card, CardContent } from "@/components/ui/card"; // Removed unused Card parts
import { Button } from "@/components/ui/button";
// Removed unused Link import
import { PropertyCard } from "@/components/property/PropertyCard"; // Corrected to named import

interface SearchResultsProps {
  searchParams: Record<string, string>;
  className?: string;
}

interface SearchResponse {
  success: boolean;
  data: PropertyListing[];
  pagination: {
    total: number;
    limit: number;
    offset: number;
    hasMore: boolean;
  };
}

export default function SearchResults({
  searchParams,
  className,
}: SearchResultsProps) {
  const [results, setResults] = useState<PropertyListing[]>([]);
  const [pagination, setPagination] = useState({
    total: 0,
    limit: 10,
    offset: 0,
    hasMore: false,
  });
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  const fetchResults = async (params: Record<string, string>) => {
    try {
      setLoading(true);
      setError(null);

      // Build query string
      const queryString = new URLSearchParams(params).toString();
      const response = await fetch(`/api/properties?${queryString}`);

      if (!response.ok) {
        throw new Error("Failed to fetch properties");
      }

      const data: SearchResponse = await response.json();

      if (!data.success) {
        // Throw a generic error as 'message' might not exist on the response
        throw new Error("API returned unsuccessful status");
      }

      setResults(data.data);
      setPagination(data.pagination);
    } catch (err) {
      console.error("Error fetching properties:", err);
      setError(
        err instanceof Error ? err.message : "An unknown error occurred",
      );
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchResults(searchParams);
  }, [searchParams]);

  const loadMore = () => {
    const newOffset = pagination.offset + pagination.limit;
    const newParams = {
      ...searchParams,
      offset: newOffset.toString(),
    };

    fetchResults(newParams);
  };

  if (loading && results.length === 0) {
    return (
      <Card className={className}>
        <CardContent className="pt-6">
          <div className="flex justify-center items-center h-40">
            <div className="animate-spin h-8 w-8 border-4 border-primary border-t-transparent rounded-full"></div>
          </div>
        </CardContent>
      </Card>
    );
  }

  if (error) {
    return (
      <Card className={className}>
        <CardContent className="pt-6">
          <div className="text-center text-red-500">
            <p>Error: {error}</p>
          </div>
        </CardContent>
      </Card>
    );
  }

  if (results.length === 0) {
    return (
      <Card className={className}>
        <CardContent className="pt-6">
          <div className="text-center">
            <p className="text-muted-foreground">
              No properties found matching your criteria.
            </p>
          </div>
        </CardContent>
      </Card>
    );
  }

  return (
    <div className={className}>
      <div className="mb-4">
        <h2 className="text-xl font-semibold">
          {pagination.total}{" "}
          {pagination.total === 1 ? "Property" : "Properties"} Found
        </h2>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {results.map((property) => (
          <PropertyCard key={property.id} property={property} />
        ))}
      </div>

      {pagination.hasMore && (
        <div className="mt-8 flex justify-center">
          <Button onClick={loadMore} variant="outline">
            Load More
          </Button>
        </div>
      )}
    </div>
  );
}

// Removed the internal PropertyCard definition



================================================
FILE: app/admin/layout.tsx
================================================
import { createClient } from "@/lib/supabase/server";
import { redirect } from "next/navigation";
import AdminSidebar from "./_components/AdminSidebar";

export const metadata = {
  title: "Admin Dashboard | Vietnam Property Platform",
  description: "Admin dashboard for managing properties and users",
};

export default async function AdminLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  const supabase = await createClient();
  const {
    data: { session },
  } = await supabase.auth.getSession();

  if (!session) {
    redirect("/auth/sign-in");
  }

  return (
    <div className="flex min-h-screen bg-gray-50">
      <AdminSidebar user={session.user} />
      <main className="flex-1 p-6 overflow-auto">{children}</main>
    </div>
  );
}



================================================
FILE: app/admin/page.tsx
================================================
import { createClient } from "@/lib/supabase/server";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";

export default async function AdminDashboardPage() {
  const supabase = await createClient();

  // Fetch basic stats for the dashboard
  const { count: propertyCount, error: propertyError } = await supabase
    .from("property_listings")
    .select("*", { count: "exact", head: true });

  // You would need to have a users table to count users
  // This is a placeholder that can be updated once that table exists
  const userCount = 0;

  return (
    <div className="space-y-6">
      <h1 className="text-3xl font-bold">Admin Dashboard</h1>

      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        <Card>
          <CardHeader className="pb-2">
            <CardTitle className="text-lg">Total Properties</CardTitle>
          </CardHeader>
          <CardContent>
            <p className="text-3xl font-bold">
              {propertyError ? "—" : propertyCount || 0}
            </p>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="pb-2">
            <CardTitle className="text-lg">Total Users</CardTitle>
          </CardHeader>
          <CardContent>
            <p className="text-3xl font-bold">{userCount}</p>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="pb-2">
            <CardTitle className="text-lg">Admin Actions</CardTitle>
          </CardHeader>
          <CardContent className="space-y-2">
            <p className="text-sm text-gray-500">
              Quick access to common tasks
            </p>
            <div className="flex flex-col space-y-2">
              <a
                href="/admin/properties"
                className="text-sm text-blue-600 hover:underline"
              >
                Manage Properties
              </a>
              <a
                href="/admin/users"
                className="text-sm text-blue-600 hover:underline"
              >
                Manage Users
              </a>
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  );
}



================================================
FILE: app/admin/_components/AdminSidebar.tsx
================================================
"use client";

import Link from "next/link";
import { User, Heart } from "lucide-react";

interface AdminSidebarProps {
  user: {
    email?: string;
    user_metadata?: {
      full_name?: string;
    };
  };
}

export default function AdminSidebar({ user }: AdminSidebarProps) {
  const fullName = user?.user_metadata?.full_name || user?.email || "User";

  return (
    <aside className="w-56 border-r bg-white h-full sticky top-0 flex flex-col items-center py-8">
      <div className="flex flex-col items-center mb-8">
        <div className="w-16 h-16 rounded-full bg-gray-200 flex items-center justify-center text-2xl font-bold text-gray-600 mb-2">
          {fullName[0]}
        </div>
        <div className="font-semibold text-base text-center break-all">
          {fullName}
        </div>
      </div>
      <nav className="w-full">
        <ul className="space-y-2">
          <li>
            <Link
              href="/admin/profile"
              className="flex items-center p-3 rounded-lg transition-colors text-gray-700 hover:bg-gray-100 w-full"
            >
              <User className="h-5 w-5 mr-3" />
              Edit Profile
            </Link>
          </li>
          <li>
            <Link
              href="/admin/saved-homes"
              className="flex items-center p-3 rounded-lg transition-colors text-gray-700 hover:bg-gray-100 w-full"
            >
              <Heart className="h-5 w-5 mr-3" />
              Saved Homes
            </Link>
          </li>
        </ul>
      </nav>
    </aside>
  );
}



================================================
FILE: app/admin/profile/page.tsx
================================================
import { createClient } from "@/lib/supabase/server";
import { redirect } from "next/navigation";
import ProfileDetails from "./_components/ProfileDetails";

export const metadata = {
  title: "관리자 프로필 | Vietnam Property Platform",
  description: "관리자 계정 정보 관리 및 설정",
};

export default async function AdminProfilePage() {
  const supabase = await createClient();

  // Check if user is authenticated
  const {
    data: { session },
  } = await supabase.auth.getSession();

  if (!session) {
    redirect("/auth/sign-in");
  }

  const user = session.user;
  const fullName = user.user_metadata?.full_name || user.email;
  const role = user.user_metadata?.role || "Admin";

  return (
    <div className="min-h-screen bg-gray-50 flex flex-col items-center justify-center px-2 sm:px-4 py-8">
      <div className="w-full max-w-2xl bg-white rounded-lg shadow p-4 sm:p-8 flex flex-col items-center">
        <div className="flex flex-col items-center mb-6 sm:mb-8 w-full">
          <div className="w-16 h-16 sm:w-20 sm:h-20 rounded-full bg-gray-200 flex items-center justify-center text-2xl sm:text-3xl font-bold text-gray-600 mb-2">
            {fullName ? fullName[0] : "?"}
          </div>
          <div className="font-semibold text-base sm:text-lg text-center break-all">
            {fullName}
          </div>
          <div className="text-gray-500 text-sm text-center">{role}</div>
        </div>
        <h1 className="text-xl sm:text-2xl font-bold mb-4 sm:mb-6 text-center w-full">
          Edit Profile
        </h1>
        <div className="w-full">
          <ProfileDetails user={user} />
        </div>
      </div>
    </div>
  );
}



================================================
FILE: app/admin/profile/_components/ProfileDetails.tsx
================================================
"use client";

import { useState } from "react";
import { Button } from "@/components/ui/button";
import { createClient } from "@/lib/supabase/client";
import { useRouter } from "next/navigation";
import { Dialog } from "@/components/ui/dialog";

interface ProfileDetailsProps {
  user: {
    id: string;
    email?: string;
    user_metadata?: {
      full_name?: string;
      phone?: string;
      role?: string;
    };
    last_sign_in_at?: string;
  };
}

export default function ProfileDetails({ user }: ProfileDetailsProps) {
  const router = useRouter();
  const supabase = createClient();
  const [isLoading, setIsLoading] = useState(false);
  const [statusMessage, setStatusMessage] = useState<{
    type: "success" | "error";
    text: string;
  } | null>(null);
  const [showEmailModal, setShowEmailModal] = useState(false);
  const [showPasswordModal, setShowPasswordModal] = useState(false);
  const [newEmail, setNewEmail] = useState(user.email || "");
  const [emailStatus, setEmailStatus] = useState<string | null>(null);
  const [passwordFields, setPasswordFields] = useState({
    current: "",
    new: "",
  });
  const [passwordStatus, setPasswordStatus] = useState<string | null>(null);

  const [formData, setFormData] = useState({
    fullName: user.user_metadata?.full_name || "",
    phone: user.user_metadata?.phone || "",
  });

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    setFormData((prev) => ({ ...prev, [name]: value }));
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setIsLoading(true);
    setStatusMessage(null);

    try {
      const { error } = await supabase.auth.updateUser({
        data: {
          full_name: formData.fullName,
          phone: formData.phone,
        },
      });

      if (error) throw error;

      setStatusMessage({
        type: "success",
        text: "프로필이 성공적으로 업데이트되었습니다.",
      });

      router.refresh();
    } catch (error) {
      setStatusMessage({
        type: "error",
        text:
          "프로필 업데이트 중 오류가 발생했습니다: " + (error as Error).message,
      });
    } finally {
      setIsLoading(false);
    }
  };

  const handleEmailSave = async (e: React.FormEvent) => {
    e.preventDefault();
    setEmailStatus(null);
    try {
      const { error } = await supabase.auth.updateUser({ email: newEmail });
      if (error) throw error;
      setEmailStatus("A confirmation email has been sent to your new address.");
      setShowEmailModal(false);
      router.refresh();
    } catch (err) {
      setEmailStatus("Failed to update email: " + (err as Error).message);
    }
  };

  const handlePasswordSave = async (e: React.FormEvent) => {
    e.preventDefault();
    setPasswordStatus(null);
    try {
      const { error } = await supabase.auth.updateUser({
        password: passwordFields.new,
      });
      if (error) throw error;
      setPasswordStatus("Password updated successfully.");
      setShowPasswordModal(false);
      setPasswordFields({ current: "", new: "" });
    } catch (err) {
      setPasswordStatus("Failed to update password: " + (err as Error).message);
    }
  };

  return (
    <>
      {/* Email Edit Modal */}
      {showEmailModal && (
        <Dialog open={showEmailModal} onOpenChange={setShowEmailModal}>
          <div className="fixed inset-0 z-50 flex items-center justify-center bg-black/30">
            <div className="bg-white rounded-lg shadow-lg p-6 w-full max-w-sm">
              <h2 className="text-lg font-bold mb-4">Edit Email</h2>
              <form onSubmit={handleEmailSave} className="space-y-4">
                <input
                  type="email"
                  className="w-full rounded-md border border-gray-300 px-3 py-2 bg-gray-50 focus:outline-none focus:ring-2 focus:ring-[#007882]"
                  value={newEmail}
                  onChange={(e) => setNewEmail(e.target.value)}
                  required
                  autoFocus
                  placeholder="Enter new email"
                  title="New email address"
                />
                {emailStatus && (
                  <div className="text-sm text-red-600">{emailStatus}</div>
                )}
                <div className="flex justify-end gap-2">
                  <Button
                    type="button"
                    variant="outline"
                    onClick={() => setShowEmailModal(false)}
                  >
                    Cancel
                  </Button>
                  <Button
                    type="submit"
                    className="bg-[#007882] hover:bg-[#005F67] text-white"
                  >
                    Save
                  </Button>
                </div>
              </form>
            </div>
          </div>
        </Dialog>
      )}
      {/* Password Edit Modal */}
      {showPasswordModal && (
        <Dialog open={showPasswordModal} onOpenChange={setShowPasswordModal}>
          <div className="fixed inset-0 z-50 flex items-center justify-center bg-black/30">
            <div className="bg-white rounded-lg shadow-lg p-6 w-full max-w-sm">
              <h2 className="text-lg font-bold mb-4">Change Password</h2>
              <form onSubmit={handlePasswordSave} className="space-y-4">
                <input
                  type="password"
                  className="w-full rounded-md border border-gray-300 px-3 py-2 bg-gray-50 focus:outline-none focus:ring-2 focus:ring-[#007882]"
                  value={passwordFields.current}
                  onChange={(e) =>
                    setPasswordFields((f) => ({
                      ...f,
                      current: e.target.value,
                    }))
                  }
                  placeholder="Current Password"
                  title="Current password"
                  autoFocus
                />
                <input
                  type="password"
                  className="w-full rounded-md border border-gray-300 px-3 py-2 bg-gray-50 focus:outline-none focus:ring-2 focus:ring-[#007882]"
                  value={passwordFields.new}
                  onChange={(e) =>
                    setPasswordFields((f) => ({ ...f, new: e.target.value }))
                  }
                  placeholder="New Password"
                  title="New password"
                  required
                />
                {passwordStatus && (
                  <div className="text-sm text-red-600">{passwordStatus}</div>
                )}
                <div className="flex justify-end gap-2">
                  <Button
                    type="button"
                    variant="outline"
                    onClick={() => setShowPasswordModal(false)}
                  >
                    Cancel
                  </Button>
                  <Button
                    type="submit"
                    className="bg-[#007882] hover:bg-[#005F67] text-white"
                  >
                    Save
                  </Button>
                </div>
              </form>
            </div>
          </div>
        </Dialog>
      )}
      <form
        onSubmit={handleSubmit}
        className="max-w-lg w-full space-y-10 bg-white border border-gray-200 rounded-xl shadow-sm p-6 sm:p-8"
        aria-label="Edit Profile Form"
      >
        {/* Email & Password */}
        <div className="space-y-6">
          <div className="flex items-center justify-between">
            <div>
              <label
                htmlFor="profile-email"
                className="block text-sm font-semibold text-gray-700"
              >
                Email
              </label>
              <div id="profile-email" className="text-gray-900 text-base">
                {user.email}
              </div>
            </div>
            <button
              type="button"
              className="text-blue-600 text-sm font-semibold hover:underline focus:underline focus:outline-none transition-colors duration-150"
              onClick={() => setShowEmailModal(true)}
              aria-label="Edit Email"
            >
              Edit
            </button>
          </div>
          <div className="flex items-center justify-between">
            <div>
              <label
                htmlFor="profile-password"
                className="block text-sm font-semibold text-gray-700"
              >
                Password
              </label>
              <div id="profile-password" className="text-gray-900 text-base">
                ********
              </div>
            </div>
            <button
              type="button"
              className="text-blue-600 text-sm font-semibold hover:underline focus:underline focus:outline-none transition-colors duration-150"
              onClick={() => setShowPasswordModal(true)}
              aria-label="Edit Password"
            >
              Edit
            </button>
          </div>
        </div>
        {/* Editable Fields */}
        <div className="space-y-6">
          <div>
            <label
              htmlFor="profile-fullname"
              className="block text-sm font-semibold text-gray-700 mb-1"
            >
              Full Name
            </label>
            <input
              id="profile-fullname"
              type="text"
              name="fullName"
              className="w-full rounded-md border border-gray-300 px-3 py-2 bg-gray-50 focus:outline-none focus:ring-2 focus:ring-[#007882] transition-colors duration-150"
              value={formData.fullName}
              onChange={handleInputChange}
              placeholder="Enter your name"
              autoComplete="name"
              aria-required="true"
            />
          </div>
          <div>
            <label
              htmlFor="profile-phone"
              className="block text-sm font-semibold text-gray-700 mb-1"
            >
              Phone
            </label>
            <input
              id="profile-phone"
              type="tel"
              name="phone"
              className="w-full rounded-md border border-gray-300 px-3 py-2 bg-gray-50 focus:outline-none focus:ring-2 focus:ring-[#007882] transition-colors duration-150"
              value={formData.phone}
              onChange={handleInputChange}
              placeholder="Enter your phone number"
              autoComplete="tel"
              aria-required="false"
            />
          </div>
        </div>
        {/* Feedback */}
        {statusMessage && (
          <div
            className={`rounded-md p-4 mt-2 text-sm ${
              statusMessage.type === "success"
                ? "bg-green-50 text-green-700"
                : "bg-red-50 text-red-700"
            }`}
            aria-live="polite"
            role="alert"
            tabIndex={-1}
          >
            {statusMessage.text}
          </div>
        )}
        {/* Save Button */}
        <div className="flex justify-end">
          <Button
            type="submit"
            className="bg-[#007882] hover:bg-[#005F67] min-w-[140px] focus:outline-none focus:ring-2 focus:ring-[#007882] focus:ring-offset-2 transition-colors duration-150 shadow-sm"
            disabled={isLoading}
            aria-label="Save Changes"
          >
            {isLoading ? "저장 중..." : "Save Changes"}
          </Button>
        </div>
      </form>
    </>
  );
}



================================================
FILE: app/admin/profile/_components/ProfileDropdown.tsx
================================================
"use client";

import { User } from "@supabase/supabase-js";
import { createClient } from "@/lib/supabase/client";
import { useRouter } from "next/navigation";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import { Button } from "@/components/ui/button";
import { LogOut, User as UserIcon } from "lucide-react";

interface ProfileDropdownProps {
  user: User;
}

export default function ProfileDropdown({ user }: ProfileDropdownProps) {
  const router = useRouter();
  const supabase = createClient();

  const handleSignOut = async () => {
    await supabase.auth.signOut();
    router.refresh();
    router.push("/");
  };

  return (
    <DropdownMenu>
      <DropdownMenuTrigger asChild>
        <Button
          variant="ghost"
          className="rounded-full h-9 w-9 p-0 overflow-hidden"
        >
          <UserIcon className="h-5 w-5" />
          <span className="sr-only">프로필</span>
        </Button>
      </DropdownMenuTrigger>
      <DropdownMenuContent align="end" className="w-56">
        <div className="px-2 py-1.5 text-sm font-medium">{user.email}</div>
        <DropdownMenuSeparator />
        <DropdownMenuItem
          className="cursor-pointer"
          onClick={() => router.push("/admin/profile")}
        >
          <UserIcon className="mr-2 h-4 w-4" />
          <span>내 프로필</span>
        </DropdownMenuItem>

        <DropdownMenuSeparator />
        <DropdownMenuItem
          className="cursor-pointer text-red-600"
          onClick={handleSignOut}
        >
          <LogOut className="mr-2 h-4 w-4" />
          <span>로그아웃</span>
        </DropdownMenuItem>
      </DropdownMenuContent>
    </DropdownMenu>
  );
}



================================================
FILE: app/admin/properties/page.tsx
================================================
import { createClient } from "@/lib/supabase/server";
import { Button } from "@/components/ui/button";
import Link from "next/link";

export const metadata = {
  title: "Property Management | Admin Dashboard",
  description: "Manage property listings on the Vietnam Property Platform",
};

export default async function AdminPropertiesPage() {
  const supabase = await createClient();

  // Fetch the latest properties with pagination
  const { data: properties, error } = await supabase
    .from("property_listings")
    .select("id, title, price, property_type, created_at")
    .order("created_at", { ascending: false })
    .limit(10);

  return (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <h1 className="text-3xl font-bold">Property Management</h1>
        <Button className="bg-[#007882] hover:bg-[#005F67]">
          Add New Property
        </Button>
      </div>

      {error ? (
        <div className="rounded-md bg-red-50 p-4">
          <p className="text-sm text-red-700">
            Error loading properties: {error.message}
          </p>
        </div>
      ) : properties && properties.length > 0 ? (
        <div className="bg-white overflow-hidden shadow rounded-lg">
          <div className="overflow-x-auto">
            <table className="min-w-full divide-y divide-gray-200">
              <thead className="bg-gray-50">
                <tr>
                  <th
                    scope="col"
                    className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
                  >
                    Title
                  </th>
                  <th
                    scope="col"
                    className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
                  >
                    Price
                  </th>
                  <th
                    scope="col"
                    className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
                  >
                    Type
                  </th>
                  <th
                    scope="col"
                    className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
                  >
                    Created
                  </th>
                  <th
                    scope="col"
                    className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider"
                  >
                    Actions
                  </th>
                </tr>
              </thead>
              <tbody className="bg-white divide-y divide-gray-200">
                {properties.map((property) => (
                  <tr key={property.id}>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <div className="text-sm font-medium text-gray-900 truncate max-w-xs">
                        {property.title}
                      </div>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <div className="text-sm text-gray-900">
                        ${property.price.toLocaleString()}
                      </div>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <span className="inline-flex text-xs leading-5 font-semibold rounded-full bg-green-100 px-2 py-1 text-green-800">
                        {property.property_type === "월세"
                          ? "Monthly Rent"
                          : "Purchase"}
                      </span>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                      {new Date(property.created_at).toLocaleDateString()}
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                      <Link
                        href={`/properties/${property.id}`}
                        className="text-blue-600 hover:text-blue-900 mr-4"
                      >
                        View
                      </Link>
                      <Link
                        href={`/admin/properties/edit/${property.id}`}
                        className="text-indigo-600 hover:text-indigo-900 mr-4"
                      >
                        Edit
                      </Link>
                      <button className="text-red-600 hover:text-red-900">
                        Delete
                      </button>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </div>
      ) : (
        <div className="bg-white rounded-lg shadow p-6 text-center">
          <p className="text-gray-500 mb-4">No properties found</p>
          <Button className="bg-[#007882] hover:bg-[#005F67]">
            Create Your First Property
          </Button>
        </div>
      )}
    </div>
  );
}



================================================
FILE: app/admin/saved-homes/page.tsx
================================================
import Link from "next/link";

export const metadata = {
  title: "Saved Homes | Vietnam Property Platform",
  description: "View and manage your saved homes",
};

export default function SavedHomesPage() {
  return (
    <div className="min-h-screen bg-white flex flex-col lg:flex-row px-0">
      <div className="hidden lg:flex w-1/3 flex-col items-end pt-16 pr-8">
        <h1 className="text-4xl font-bold text-gray-800">Saved Homes</h1>
      </div>
      <div className="flex-1 flex flex-col lg:flex-row items-start justify-start bg-white pt-16">
        <h1 className="text-3xl font-bold text-gray-800 mb-8 block lg:hidden w-full text-left px-4">
          Saved Homes
        </h1>
        <div className="flex flex-col items-center lg:items-start justify-start max-w-xl w-full px-4 lg:px-0">
          <p className="text-xl text-gray-700 mb-2 text-center lg:text-left">
            You haven&apos;t added any homes yet.
          </p>
          <p className="text-xl text-gray-700 mb-8 text-center lg:text-left">
            Start searching for properties to add now.
          </p>
          <Link
            href="/search"
            className="bg-[#E94F1D] hover:bg-[#c43e13] text-white font-semibold py-3 px-8 rounded-lg text-lg transition-colors"
          >
            Search Homes
          </Link>
        </div>
      </div>
    </div>
  );
}



================================================
FILE: app/admin/settings/page.tsx
================================================
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Separator } from "@/components/ui/separator";

export const metadata = {
  title: "Admin Settings | Vietnam Property Platform",
  description: "Configure system settings for the Vietnam Property Platform",
};

export default function AdminSettingsPage() {
  return (
    <div className="space-y-6">
      <h1 className="text-3xl font-bold">Admin Settings</h1>

      <Card>
        <CardHeader>
          <CardTitle>Site Configuration</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Site Name
              </label>
              <input
                type="text"
                className="w-full rounded-md border border-gray-300 px-3 py-2 focus:outline-none focus:ring-1 focus:ring-[#007882]"
                defaultValue="Vietnam Property Platform"
                disabled
              />
              <p className="mt-1 text-xs text-gray-500">
                Contact system administrator to change site name
              </p>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Contact Email
              </label>
              <input
                type="email"
                className="w-full rounded-md border border-gray-300 px-3 py-2 focus:outline-none focus:ring-1 focus:ring-[#007882]"
                defaultValue="admin@example.com"
              />
            </div>
          </div>

          <div className="flex justify-end">
            <Button className="bg-[#007882] hover:bg-[#005F67]">
              Save Changes
            </Button>
          </div>
        </CardContent>
      </Card>

      <Card>
        <CardHeader>
          <CardTitle>Property Settings</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Default Currency
              </label>
              <select className="w-full rounded-md border border-gray-300 px-3 py-2 focus:outline-none focus:ring-1 focus:ring-[#007882]">
                <option value="USD">USD ($)</option>
                <option value="VND">VND (₫)</option>
                <option value="KRW">KRW (₩)</option>
              </select>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Max Featured Properties
              </label>
              <input
                type="number"
                className="w-full rounded-md border border-gray-300 px-3 py-2 focus:outline-none focus:ring-1 focus:ring-[#007882]"
                defaultValue="6"
              />
            </div>
          </div>

          <Separator className="my-4" />

          <div>
            <label className="flex items-center">
              <input type="checkbox" className="rounded text-[#007882] mr-2" />
              <span className="text-sm">
                Require admin approval for new listings
              </span>
            </label>
          </div>

          <div className="flex justify-end">
            <Button className="bg-[#007882] hover:bg-[#005F67]">
              Save Changes
            </Button>
          </div>
        </CardContent>
      </Card>

      <Card>
        <CardHeader>
          <CardTitle>Maintenance Mode</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <p className="text-sm text-gray-500">
            Enabling maintenance mode will make the site inaccessible to regular
            users. Administrators will still be able to log in.
          </p>

          <div className="flex items-center">
            <label className="flex items-center">
              <input type="checkbox" className="rounded text-[#007882] mr-2" />
              <span className="text-sm font-medium">
                Enable Maintenance Mode
              </span>
            </label>
          </div>

          <div className="flex justify-end">
            <Button className="bg-[#007882] hover:bg-[#005F67]">
              Save Changes
            </Button>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}



================================================
FILE: app/admin/users/page.tsx
================================================
import { createClient } from "@/lib/supabase/server";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";

export const metadata = {
  title: "User Management | Admin Dashboard",
  description: "Manage users on the Vietnam Property Platform",
};

export default async function AdminUsersPage() {
  const supabase = await createClient();

  // Fetch users from Supabase Auth - this is a placeholder approach
  // In production, you might want to store additional user data in a users table
  const { data: authUsers, error } = await supabase.auth.admin
    .listUsers({
      page: 1,
      perPage: 10,
    })
    .catch((err) => {
      // Auth admin API might not be available in all environments
      console.error("Error accessing auth admin API:", err);
      return { data: null, error: err };
    });

  return (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <h1 className="text-3xl font-bold">User Management</h1>
        <Button className="bg-[#007882] hover:bg-[#005F67]">Invite User</Button>
      </div>

      {error ? (
        <Card>
          <CardHeader>
            <CardTitle className="text-red-600">Error Loading Users</CardTitle>
          </CardHeader>
          <CardContent>
            <p className="text-sm text-gray-600">
              Admin API access is limited in some environments. Please check
              your Supabase configuration.
            </p>
            <p className="text-sm text-gray-500 mt-2">
              Error details: {error.message || "Unknown error"}
            </p>
          </CardContent>
        </Card>
      ) : authUsers?.users && authUsers.users.length > 0 ? (
        <div className="bg-white overflow-hidden shadow rounded-lg">
          <div className="overflow-x-auto">
            <table className="min-w-full divide-y divide-gray-200">
              <thead className="bg-gray-50">
                <tr>
                  <th
                    scope="col"
                    className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
                  >
                    Email
                  </th>
                  <th
                    scope="col"
                    className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
                  >
                    Status
                  </th>
                  <th
                    scope="col"
                    className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
                  >
                    Created
                  </th>
                  <th
                    scope="col"
                    className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
                  >
                    Last Sign In
                  </th>
                  <th
                    scope="col"
                    className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider"
                  >
                    Actions
                  </th>
                </tr>
              </thead>
              <tbody className="bg-white divide-y divide-gray-200">
                {authUsers.users.map((user) => (
                  <tr key={user.id}>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <div className="text-sm font-medium text-gray-900">
                        {user.email}
                      </div>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      {user.confirmed_at ? (
                        <span className="inline-flex text-xs leading-5 font-semibold rounded-full bg-green-100 px-2 py-1 text-green-800">
                          Active
                        </span>
                      ) : (
                        <span className="inline-flex text-xs leading-5 font-semibold rounded-full bg-yellow-100 px-2 py-1 text-yellow-800">
                          Pending
                        </span>
                      )}
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                      {user.created_at
                        ? new Date(user.created_at).toLocaleDateString()
                        : "N/A"}
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                      {user.last_sign_in_at
                        ? new Date(user.last_sign_in_at).toLocaleDateString()
                        : "Never"}
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                      <button className="text-indigo-600 hover:text-indigo-900 mr-4">
                        Edit
                      </button>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </div>
      ) : (
        <Card>
          <CardHeader>
            <CardTitle>User Management</CardTitle>
          </CardHeader>
          <CardContent className="text-center">
            <p className="text-gray-500 mb-4">
              No users found or limited admin API access
            </p>
            <p className="text-sm text-gray-400 mb-6">
              You might need to set up a users table to store additional user
              data beyond authentication.
            </p>
            <Button className="bg-[#007882] hover:bg-[#005F67]">
              Invite First User
            </Button>
          </CardContent>
        </Card>
      )}
    </div>
  );
}



================================================
FILE: app/api/properties/route.ts
================================================
import { NextRequest, NextResponse } from "next/server";
import { getPropertyListings, PropertySearchParams } from "@/lib/data/property";
import { PropertyType } from "@/types/property";

/**
 * GET handler for property listings
 * Supports various search and filter parameters
 */
export async function GET(request: NextRequest) {
  try {
    const searchParams = request.nextUrl.searchParams;

    // Parse search parameters
    const searchText = searchParams.get("search") || undefined;
    const minPrice = searchParams.get("minPrice")
      ? Number(searchParams.get("minPrice"))
      : undefined;
    const maxPrice = searchParams.get("maxPrice")
      ? Number(searchParams.get("maxPrice"))
      : undefined;
    const propertyType = searchParams.get("propertyType") as
      | PropertyType
      | undefined;
    const minBedrooms = searchParams.get("minBedrooms")
      ? Number(searchParams.get("minBedrooms"))
      : undefined;
    const minBathrooms = searchParams.get("minBathrooms")
      ? Number(searchParams.get("minBathrooms"))
      : undefined;
    const lat = searchParams.get("lat")
      ? Number(searchParams.get("lat"))
      : undefined;
    const lng = searchParams.get("lng")
      ? Number(searchParams.get("lng"))
      : undefined;
    const radiusMeters = searchParams.get("radiusMeters")
      ? Number(searchParams.get("radiusMeters"))
      : undefined;
    const limit = searchParams.get("limit")
      ? Number(searchParams.get("limit"))
      : 10;
    const offset = searchParams.get("offset")
      ? Number(searchParams.get("offset"))
      : 0;

    // Validate numeric parameters
    if (
      (minPrice !== undefined && isNaN(minPrice)) ||
      (maxPrice !== undefined && isNaN(maxPrice)) ||
      (minBedrooms !== undefined && isNaN(minBedrooms)) ||
      (minBathrooms !== undefined && isNaN(minBathrooms)) ||
      (lat !== undefined && isNaN(lat)) ||
      (lng !== undefined && isNaN(lng)) ||
      (radiusMeters !== undefined && isNaN(radiusMeters)) ||
      isNaN(limit) ||
      isNaN(offset)
    ) {
      return NextResponse.json(
        { success: false, message: "Invalid numeric parameter" },
        { status: 400 },
      );
    }

    // Validate property type
    if (propertyType && !["월세", "매매"].includes(propertyType)) {
      return NextResponse.json(
        { success: false, message: "Invalid property type" },
        { status: 400 },
      );
    }

    // Use the data access layer to get property listings
    const params: PropertySearchParams = {
      searchText,
      minPrice,
      maxPrice,
      propertyType,
      minBedrooms,
      minBathrooms,
      lat,
      lng,
      radiusMeters,
      limit,
      offset,
    };

    const result = await getPropertyListings(params);

    return NextResponse.json({
      success: true,
      data: result.data,
      pagination: {
        total: result.total,
        limit,
        offset,
        hasMore: result.hasMore,
      },
    });
  } catch (error) {
    console.error("Error fetching properties:", error);
    return NextResponse.json(
      { success: false, message: "Failed to fetch properties", error },
      { status: 500 },
    );
  }
}



================================================
FILE: app/api/properties/[id]/route.ts
================================================
import { NextRequest, NextResponse } from "next/server";
import { getPropertyById, updateProperty } from "@/lib/data/property";

// Updated for Next.js 15.3.1 - params must be a Promise
interface RouteParams {
  params: Promise<{
    id: string;
  }>;
}

/**
 * GET handler for retrieving a single property by ID
 */
export async function GET(request: NextRequest, { params }: RouteParams) {
  try {
    // Await the params Promise
    const resolvedParams = await params;
    const { id } = resolvedParams;

    // Validate UUID format
    const uuidRegex =
      /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;
    if (!uuidRegex.test(id)) {
      return NextResponse.json(
        { success: false, message: "Invalid property ID format" },
        { status: 400 },
      );
    }

    // Use the data access layer to get property by ID
    const data = await getPropertyById(id);

    if (!data) {
      return NextResponse.json(
        { success: false, message: "Property not found" },
        { status: 404 },
      );
    }

    return NextResponse.json({
      success: true,
      data,
    });
  } catch (error) {
    console.error("Error fetching property:", error);
    return NextResponse.json(
      { success: false, message: "Failed to fetch property", error },
      { status: 500 },
    );
  }
}

/**
 * PATCH handler for updating a property
 */
export async function PATCH(request: NextRequest, { params }: RouteParams) {
  try {
    // Await the params Promise
    const resolvedParams = await params;
    const { id } = resolvedParams;

    // Validate UUID format
    const uuidRegex =
      /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;
    if (!uuidRegex.test(id)) {
      return NextResponse.json(
        { success: false, message: "Invalid property ID format" },
        { status: 400 },
      );
    }

    // Parse request body
    const updates = await request.json();

    // Validate updates
    const allowedFields = [
      "title",
      "description",
      "price",
      "property_type",
      "bedrooms",
      "bathrooms",
      "square_footage",
      "location",
      "address",
      "features",
    ];

    // Filter out any fields that are not allowed to be updated
    const filteredUpdates = Object.keys(updates)
      .filter((key) => allowedFields.includes(key))
      .reduce(
        (obj, key) => {
          obj[key] = updates[key];
          return obj;
        },
        {} as Record<string, unknown>,
      );

    if (Object.keys(filteredUpdates).length === 0) {
      return NextResponse.json(
        { success: false, message: "No valid fields to update" },
        { status: 400 },
      );
    }

    // Check if property exists
    const existingProperty = await getPropertyById(id);

    if (!existingProperty) {
      return NextResponse.json(
        { success: false, message: "Property not found" },
        { status: 404 },
      );
    }

    // Use the data access layer to update the property
    const data = await updateProperty(id, filteredUpdates);

    return NextResponse.json({
      success: true,
      data,
      message: "Property updated successfully",
    });
  } catch (error) {
    console.error("Error updating property:", error);
    return NextResponse.json(
      { success: false, message: "Failed to update property", error },
      { status: 500 },
    );
  }
}



================================================
FILE: app/api/properties/[id]/delete/route.ts
================================================
import { NextRequest, NextResponse } from "next/server";
import { getPropertyById, deleteProperty } from "@/lib/data/property";

// Updated for Next.js 15.3.1 - params must be a Promise
interface RouteParams {
  params: Promise<{
    id: string;
  }>;
}

/**
 * DELETE handler for removing a property
 */
export async function DELETE(request: NextRequest, { params }: RouteParams) {
  try {
    // Await the params Promise
    const resolvedParams = await params;
    const { id } = resolvedParams;

    // Validate UUID format
    const uuidRegex =
      /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;
    if (!uuidRegex.test(id)) {
      return NextResponse.json(
        { success: false, message: "Invalid property ID format" },
        { status: 400 },
      );
    }

    // Check if property exists
    const existingProperty = await getPropertyById(id);

    if (!existingProperty) {
      return NextResponse.json(
        { success: false, message: "Property not found" },
        { status: 404 },
      );
    }

    // Delete property using the data access layer
    await deleteProperty(id);

    return NextResponse.json({
      success: true,
      message: "Property deleted successfully",
    });
  } catch (error) {
    console.error("Error deleting property:", error);
    return NextResponse.json(
      { success: false, message: "Failed to delete property", error },
      { status: 500 },
    );
  }
}



================================================
FILE: app/api/properties/create/route.ts
================================================
import { NextRequest, NextResponse } from "next/server";
import { createClient } from "@/lib/supabase/server"; // Keep using authenticated client for write operations
import { validatePropertyListing } from "@/lib/validation/property";

/**
 * POST handler for creating a new property
 */
export async function POST(request: NextRequest) {
  try {
    // Parse request body
    const propertyData = await request.json();

    // Validate property data
    const validation = validatePropertyListing(propertyData);
    if (!validation.valid) {
      return NextResponse.json(
        {
          success: false,
          message: "Invalid property data",
          errors: validation.errors,
        },
        { status: 400 },
      );
    }

    const supabase = await createClient();

    // Insert property
    const { data, error } = await supabase
      .from("property_listings")
      .insert(propertyData)
      .select()
      .single();

    if (error) throw error;

    return NextResponse.json(
      {
        success: true,
        data,
        message: "Property created successfully",
      },
      { status: 201 },
    );
  } catch (error) {
    console.error("Error creating property:", error);
    return NextResponse.json(
      { success: false, message: "Failed to create property", error },
      { status: 500 },
    );
  }
}



================================================
FILE: app/api/properties/nearby/route.ts
================================================
import { NextRequest, NextResponse } from "next/server";
import { createApiClient } from "@/lib/supabase/server-api";

/**
 * GET handler for finding properties near a specific location
 */
export async function GET(request: NextRequest) {
  try {
    const searchParams = request.nextUrl.searchParams;

    // Parse location parameters
    const lat = searchParams.get("lat")
      ? Number(searchParams.get("lat"))
      : undefined;
    const lng = searchParams.get("lng")
      ? Number(searchParams.get("lng"))
      : undefined;
    const radiusMeters = searchParams.get("radiusMeters")
      ? Number(searchParams.get("radiusMeters"))
      : 5000; // Default 5km
    const limit = searchParams.get("limit")
      ? Number(searchParams.get("limit"))
      : 10;
    const offset = searchParams.get("offset")
      ? Number(searchParams.get("offset"))
      : 0;

    // Validate required parameters
    if (lat === undefined || lng === undefined) {
      return NextResponse.json(
        { success: false, message: "Latitude and longitude are required" },
        { status: 400 },
      );
    }

    // Validate numeric parameters
    if (
      isNaN(lat) ||
      isNaN(lng) ||
      isNaN(radiusMeters) ||
      isNaN(limit) ||
      isNaN(offset)
    ) {
      return NextResponse.json(
        { success: false, message: "Invalid numeric parameter" },
        { status: 400 },
      );
    }

    const supabase = await createApiClient();

    // Use the get_properties_with_distance function
    const { data, error, count } = await supabase
      .rpc("get_properties_with_distance", {
        lat,
        lng,
      })
      .lt("distance_meters", radiusMeters)
      .range(offset, offset + limit - 1)
      .select("*");

    if (error) throw error;

    return NextResponse.json({
      success: true,
      data,
      pagination: {
        total: count || 0,
        limit,
        offset,
        hasMore: (count || 0) > offset + limit,
      },
    });
  } catch (error) {
    console.error("Error fetching nearby properties:", error);
    return NextResponse.json(
      { success: false, message: "Failed to fetch nearby properties", error },
      { status: 500 },
    );
  }
}



================================================
FILE: app/api/properties/search/route.ts
================================================
import { NextRequest, NextResponse } from "next/server";
import { createApiClient } from "@/lib/supabase/server-api";

/**
 * POST handler for advanced property search
 * Supports searching by features and other complex criteria
 */
export async function POST(request: NextRequest) {
  try {
    // Parse request body
    const searchCriteria = await request.json();

    // Extract search parameters
    const {
      searchText,
      minPrice,
      maxPrice,
      propertyType,
      minBedrooms,
      minBathrooms,
      features,
      lat,
      lng,
      radiusMeters,
      limit = 10,
      offset = 0,
    } = searchCriteria;

    // Validate property type
    if (propertyType && !["월세", "매매"].includes(propertyType)) {
      return NextResponse.json(
        { success: false, message: "Invalid property type" },
        { status: 400 },
      );
    }

    const supabase = await createApiClient();

    // Start building the query
    let query = supabase
      .from("property_listings")
      .select("*", { count: "exact" });

    // Apply basic filters
    if (searchText) {
      query = query.or(
        `title.ilike.%${searchText}%,description.ilike.%${searchText}%`,
      );
    }

    if (minPrice !== undefined) {
      query = query.gte("price", minPrice);
    }

    if (maxPrice !== undefined) {
      query = query.lte("price", maxPrice);
    }

    if (propertyType) {
      query = query.eq("property_type", propertyType);
    }

    if (minBedrooms !== undefined) {
      query = query.gte("bedrooms", minBedrooms);
    }

    if (minBathrooms !== undefined) {
      query = query.gte("bathrooms", minBathrooms);
    }

    // Apply feature filters
    if (features && Object.keys(features).length > 0) {
      // For each feature, add a containment check
      Object.entries(features).forEach(([feature, value]) => {
        if (value === true) {
          // Check if the feature exists and is true
          query = query.contains("features", { [feature]: true });
        }
      });
    }

    // If location parameters are provided, we need to use a different approach
    // since we can't easily combine the RPC function with other filters
    if (lat !== undefined && lng !== undefined) {
      // First, get all properties that match our filters
      const { data: filteredProperties, error: filterError } = await query;

      if (filterError) throw filterError;

      if (!filteredProperties || filteredProperties.length === 0) {
        return NextResponse.json({
          success: true,
          data: [],
          pagination: {
            total: 0,
            limit,
            offset,
            hasMore: false,
          },
        });
      }

      // Get the IDs of the filtered properties
      const propertyIds = filteredProperties.map((p) => p.id);

      // Now use the search_properties function to get properties with distance
      const { data, error, count } = await supabase
        .rpc("search_properties", {
          search_text: null, // We've already filtered by search text
          min_price: null, // We've already filtered by price
          max_price: null,
          property_type_filter: null, // We've already filtered by property type
          min_bedrooms: null, // We've already filtered by bedrooms
          min_bathrooms: null, // We've already filtered by bathrooms
          lat,
          lng,
          radius_meters: radiusMeters || 5000, // Default 5km radius
        })
        .in("id", propertyIds) // Only include properties that matched our filters
        .range(offset, offset + limit - 1)
        .order("distance_meters", { ascending: true });

      if (error) throw error;

      return NextResponse.json({
        success: true,
        data,
        pagination: {
          total: count || 0,
          limit,
          offset,
          hasMore: (count || 0) > offset + limit,
        },
      });
    }

    // Apply pagination and ordering
    const { data, error, count } = await query
      .range(offset, offset + limit - 1)
      .order("created_at", { ascending: false });

    if (error) throw error;

    return NextResponse.json({
      success: true,
      data,
      pagination: {
        total: count || 0,
        limit,
        offset,
        hasMore: (count || 0) > offset + limit,
      },
    });
  } catch (error) {
    console.error("Error searching properties:", error);
    return NextResponse.json(
      { success: false, message: "Failed to search properties", error },
      { status: 500 },
    );
  }
}



================================================
FILE: app/api/properties/stats/route.ts
================================================
import { NextResponse } from "next/server";
import { createApiClient } from "@/lib/supabase/server-api";

/**
 * GET handler for property statistics
 * Returns counts by property type, price ranges, etc.
 */
export async function GET() {
  try {
    const supabase = await createApiClient();

    // Get total count
    const { count: totalCount, error: countError } = await supabase
      .from("property_listings")
      .select("*", { count: "exact", head: true });

    if (countError) throw countError;

    // Get all property listings (grouping to be done in JS if needed)
    const { data: allProperties, error: allPropertiesError } = await supabase
      .from("property_listings")
      .select("*");

    if (allPropertiesError) throw allPropertiesError;

    // Format price ranges
    const priceRanges = [
      { min: 0, max: 1000, count: 0 },
      { min: 1000, max: 2000, count: 0 },
      { min: 2000, max: 3000, count: 0 },
      { min: 3000, max: 5000, count: 0 },
      { min: 5000, max: 10000, count: 0 },
      { min: 10000, max: null, count: 0 },
    ];

    // Count properties in each price range
    for (const range of priceRanges) {
      const { count, error } = await supabase
        .from("property_listings")
        .select("*", { count: "exact", head: true })
        .gte("price", range.min)
        .lt("price", range.max || 1000000000); // Use a very large number if max is null

      if (error) throw error;
      range.count = count || 0;
    }

    return NextResponse.json({
      success: true,
      data: {
        totalCount,
        allProperties,
        priceRanges,
      },
    });
  } catch (error) {
    console.error("Error fetching property statistics:", error);
    return NextResponse.json(
      { success: false, message: "Failed to fetch property statistics", error },
      { status: 500 },
    );
  }
}



================================================
FILE: app/api/request-info/route.ts
================================================
import { NextRequest, NextResponse } from "next/server";
import { Resend } from "resend";
import { RequestInfoSchema } from "@/lib/validation/request-info";
import RequestInfoEmail from "@/app/emails/RequestInfoEmail";

const resend = new Resend(process.env.RESEND_API_KEY);

export async function POST(req: NextRequest) {
  try {
    const body = await req.json();
    const result = RequestInfoSchema.safeParse(body);

    if (!result.success) {
      return NextResponse.json(
        { error: result.error.format() },
        { status: 400 },
      );
    }

    const { name, email, phone, message } = result.data;

    const data = await resend.emails.send({
      from: "admin@bkmind.com",
      to: ["admin@bkmind.com"],
      cc: [email],
      subject: "Property Info Request",
      react: RequestInfoEmail({ name, email, phone, message }),
    });

    return NextResponse.json({ data });
  } catch (error) {
    return NextResponse.json(
      { error: error instanceof Error ? error.message : "Server error" },
      { status: 500 },
    );
  }
}



================================================
FILE: app/api/test-db/route.ts
================================================
import { NextResponse } from "next/server";
import { createApiClient } from "@/lib/supabase/server-api";

export async function GET() {
  try {
    const supabase = await createApiClient();

    // Simple query to test connection
    const { data, error } = await supabase
      .from("property_listings")
      .select("count()", { count: "exact" })
      .limit(1);

    if (error) throw error;

    return NextResponse.json({
      success: true,
      message: "Database connection successful",
      count: data.length > 0 ? data[0].count : 0,
    });
  } catch (error) {
    console.error("Database connection error:", error);
    return NextResponse.json(
      { success: false, message: "Database connection failed", error },
      { status: 500 },
    );
  }
}



================================================
FILE: app/auth/callback/route.ts
================================================
import { createServerClient } from "@supabase/ssr";
import { NextResponse } from "next/server";

export async function GET(request: Request) {
  const requestUrl = new URL(request.url);
  const code = requestUrl.searchParams.get("code");

  // Return empty response if code is missing
  if (!code) {
    return new Response(null, { status: 400 });
  }

  // Create response object for redirect
  const response = NextResponse.redirect(new URL("/", requestUrl.origin));

  // Create Supabase server client
  const supabase = createServerClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
    {
      cookies: {
        get(name) {
          return request.headers
            .get("cookie")
            ?.split("; ")
            .find((row) => row.startsWith(`${name}=`))
            ?.split("=")?.[1];
        },
        set(name, value, options) {
          // Set cookies on the NextResponse object directly
          response.cookies.set({
            name,
            value,
            ...options,
          });
        },
        remove(name, options) {
          // Delete cookies on the NextResponse object directly
          response.cookies.delete({
            name,
            ...options,
          });
        },
      },
    },
  );

  // Exchange the code for a session
  await supabase.auth.exchangeCodeForSession(code);

  // Return the response with the updated cookies
  return response;
}



================================================
FILE: app/auth/confirm/route.ts
================================================
import { createClient } from "@/lib/supabase/server";
import { type EmailOtpType } from "@supabase/supabase-js";
import { redirect } from "next/navigation";
import { type NextRequest } from "next/server";

export async function GET(request: NextRequest) {
  const { searchParams } = new URL(request.url);
  const token_hash = searchParams.get("token_hash");
  const type = searchParams.get("type") as EmailOtpType | null;
  const next = searchParams.get("next") ?? "/";

  if (token_hash && type) {
    const supabase = await createClient();

    const { error } = await supabase.auth.verifyOtp({
      type,
      token_hash,
    });
    if (!error) {
      redirect(next);
    } else {
      redirect(`/auth/error?error=${error?.message}`);
    }
  }

  redirect(`/auth/error?error=No token hash or type`);
}



================================================
FILE: app/auth/error/page.tsx
================================================
"use client";

import Link from "next/link";
import { Suspense } from "react";
import { useSearchParams } from "next/navigation";

// Extract the error message part into a separate component with useSearchParams
function ErrorMessage() {
  const searchParams = useSearchParams();
  const error = searchParams.get("error");
  
  return (
    <p className="text-[#D32F2F] text-base leading-relaxed">
      {error || "An error occurred during authentication"}
    </p>
  );
}

export default function AuthErrorPage() {
  return (
    <div className="min-h-screen bg-gray-50 flex flex-col items-center justify-center px-4 sm:px-6 lg:px-8">
      <div className="w-full max-w-lg">
        <h1 className="text-4xl font-bold text-[#2A2A33] text-center tracking-tight mb-2">
          Authentication Error
        </h1>
        <p className="text-lg text-center text-[#54545A] mb-8">
          There was a problem with your authentication
        </p>

        <div className="bg-white rounded-xl shadow-lg p-8">
          <div className="bg-[#FDE7E7] rounded-lg p-6 mb-6">
            <h3 className="text-[#B71C1C] text-xl font-semibold mb-3">
              Error Details
            </h3>
            {/* Wrap the component using useSearchParams in a Suspense boundary */}
            <Suspense fallback={<p className="text-[#D32F2F] text-base leading-relaxed">Loading error details...</p>}>
              <ErrorMessage />
            </Suspense>
          </div>

          <div className="border-t border-gray-200 pt-6">
            <Link
              href="/auth/sign-in"
              className="block w-full bg-[#006AFF] hover:bg-[#0053C6] text-white font-semibold py-3 px-4 rounded-lg text-center transition duration-150"
            >
              Back to Sign In
            </Link>
          </div>
        </div>
      </div>
    </div>
  );
}



================================================
FILE: app/auth/forgot-password/page.tsx
================================================
"use client";

import { useState } from "react";
import Link from "next/link";
import { createClient } from "@/lib/supabase/client";

export default function ForgotPasswordPage() {
  const [email, setEmail] = useState("");
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [success, setSuccess] = useState(false);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setIsLoading(true);
    setError(null);

    try {
      const supabase = createClient();
      const { error } = await supabase.auth.resetPasswordForEmail(email, {
        redirectTo: `${window.location.origin}/auth/update-password`,
      });

      if (error) {
        throw error;
      }

      setSuccess(true);
    } catch (err) {
      setError(err instanceof Error ? err.message : "An error occurred");
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="min-h-screen bg-gray-50 flex flex-col items-center justify-center px-4 sm:px-6 lg:px-8">
      <div className="w-full max-w-lg">
        <h1 className="text-4xl font-bold text-[#2A2A33] text-center tracking-tight mb-2">
          Reset your password
        </h1>
        <p className="text-lg text-center text-[#54545A] mb-8">
          Enter your email address and we&apos;ll send you instructions
        </p>

        <div className="bg-white rounded-xl shadow-lg p-8">
          {success ? (
            <div className="bg-[#E6F4EA] rounded-lg p-6">
              <h3 className="text-[#1B5E20] text-xl font-semibold mb-3">
                Check your email
              </h3>
              <p className="text-[#2E7D32] text-base leading-relaxed">
                We&apos;ve sent password reset instructions to your email
                address.
              </p>
            </div>
          ) : (
            <form className="space-y-6" onSubmit={handleSubmit}>
              <div>
                <label
                  htmlFor="email"
                  className="block text-[#2A2A33] text-sm font-semibold mb-2"
                >
                  Email address
                </label>
                <input
                  id="email"
                  name="email"
                  type="email"
                  autoComplete="email"
                  required
                  value={email}
                  onChange={(e) => setEmail(e.target.value)}
                  className="w-full px-4 py-3 rounded-lg border border-gray-300 focus:border-[#006AFF] focus:ring-[#006AFF] focus:ring-opacity-50 focus:outline-none transition duration-150"
                  placeholder="Enter your email"
                />
              </div>

              {error && (
                <div className="bg-[#FDE7E7] rounded-lg p-6">
                  <p className="text-[#B71C1C] text-base">{error}</p>
                </div>
              )}

              <button
                type="submit"
                disabled={isLoading}
                className="w-full bg-[#006AFF] hover:bg-[#0053C6] text-white font-semibold py-3 px-4 rounded-lg transition duration-150 disabled:opacity-50 disabled:cursor-not-allowed"
              >
                {isLoading ? "Sending..." : "Send reset instructions"}
              </button>
            </form>
          )}

          <div className="border-t border-gray-200 mt-6 pt-6">
            <div className="flex justify-center">
              <Link
                href="/auth/sign-in"
                className="inline-flex items-center text-[#006AFF] hover:text-[#0053C6] font-semibold"
              >
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  className="h-5 w-5 mr-2"
                  viewBox="0 0 20 20"
                  fill="currentColor"
                >
                  <path
                    fillRule="evenodd"
                    d="M9.707 16.707a1 1 0 01-1.414 0l-6-6a1 1 0 010-1.414l6-6a1 1 0 011.414 1.414L5.414 9H17a1 1 0 110 2H5.414l4.293 4.293a1 1 0 010 1.414z"
                    clipRule="evenodd"
                  />
                </svg>
                Back to sign in
              </Link>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}



================================================
FILE: app/auth/reset-password/route.ts
================================================
import { createServerClient } from "@supabase/ssr";
import { NextResponse } from "next/server";

export async function GET(request: Request) {
  const requestUrl = new URL(request.url);
  const code = requestUrl.searchParams.get("code");

  // Return empty response if code is missing
  if (!code) {
    return new Response(null, { status: 400 });
  }

  // Create response object for redirect
  const response = NextResponse.redirect(
    new URL("/auth/update-password", requestUrl.origin),
  );

  // Create Supabase server client
  const supabase = createServerClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
    {
      cookies: {
        get(name) {
          return request.headers
            .get("cookie")
            ?.split("; ")
            .find((row) => row.startsWith(`${name}=`))
            ?.split("=")?.[1];
        },
        set(name, value, options) {
          // Set cookies on the NextResponse object directly
          response.cookies.set({
            name,
            value,
            ...options,
          });
        },
        remove(name, options) {
          // Delete cookies on the NextResponse object directly
          response.cookies.delete({
            name,
            ...options,
          });
        },
      },
    },
  );

  // Exchange the code for a session
  await supabase.auth.exchangeCodeForSession(code);

  // Return the response with the updated cookies
  return response;
}



================================================
FILE: app/auth/sign-in/page.tsx
================================================
import { createClient } from "@/lib/supabase/server";
import { redirect } from "next/navigation";
import SignInForm from "./_components/SignInForm";

export default async function SignInPage() {
  const supabase = await createClient();
  const {
    data: { session },
  } = await supabase.auth.getSession();

  if (session) {
    redirect("/");
  }

  return (
    <div className="flex min-h-screen flex-col items-center justify-center py-12 sm:px-6 lg:px-8">
      <div className="sm:mx-auto sm:w-full sm:max-w-md">
        <h2 className="mt-6 text-center text-3xl font-bold tracking-tight text-gray-900">
          Sign in to your account
        </h2>
      </div>
      <div className="mt-8 sm:mx-auto sm:w-full sm:max-w-md">
        <div className="bg-white px-4 py-8 shadow sm:rounded-lg sm:px-10">
          <SignInForm />
        </div>
      </div>
    </div>
  );
}



================================================
FILE: app/auth/sign-in/_components/SignInForm.tsx
================================================
"use client";

import { createClient } from "@/lib/supabase/client";
import { zodResolver } from "@hookform/resolvers/zod";
import { useForm } from "react-hook-form";
import { z } from "zod";
import { useState, useEffect } from "react";
import { useRouter, useSearchParams } from "next/navigation";
import Link from "next/link";

const signInSchema = z.object({
  email: z.string().email("Invalid email address"),
  password: z.string().min(6, "Password must be at least 6 characters"),
});

type SignInFormData = z.infer<typeof signInSchema>;

export default function SignInForm() {
  const [error, setError] = useState<string | null>(null);
  const [isLoading, setIsLoading] = useState(false);
  const [returnTo, setReturnTo] = useState<string>("/");
  const router = useRouter();
  const searchParams = useSearchParams();
  const supabase = createClient();

  useEffect(() => {
    // Get returnTo from URL parameters if it exists
    const returnPath = searchParams.get("returnTo");
    if (returnPath) {
      setReturnTo(returnPath);
    }
  }, [searchParams]);

  const {
    register,
    handleSubmit,
    formState: { errors },
  } = useForm<SignInFormData>({
    resolver: zodResolver(signInSchema),
  });

  const onSubmit = async (data: SignInFormData) => {
    try {
      setIsLoading(true);
      setError(null);

      const { error } = await supabase.auth.signInWithPassword({
        email: data.email,
        password: data.password,
      });

      if (error) {
        throw error;
      }

      router.refresh();
      router.push(returnTo);
    } catch (err) {
      setError(err instanceof Error ? err.message : "An error occurred");
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <form onSubmit={handleSubmit(onSubmit)} className="space-y-6">
      <div>
        <label
          htmlFor="email"
          className="block text-sm font-medium text-gray-700"
        >
          Email address
        </label>
        <div className="mt-1">
          <input
            id="email"
            type="email"
            autoComplete="email"
            disabled={isLoading}
            {...register("email")}
            className="block w-full appearance-none rounded-md border border-gray-300 px-3 py-2 placeholder-gray-400 shadow-sm focus:border-indigo-500 focus:outline-none focus:ring-indigo-500 sm:text-sm"
          />
          {errors.email && (
            <p className="mt-1 text-sm text-red-600">{errors.email.message}</p>
          )}
        </div>
      </div>

      <div>
        <label
          htmlFor="password"
          className="block text-sm font-medium text-gray-700"
        >
          Password
        </label>
        <div className="mt-1">
          <input
            id="password"
            type="password"
            autoComplete="current-password"
            disabled={isLoading}
            {...register("password")}
            className="block w-full appearance-none rounded-md border border-gray-300 px-3 py-2 placeholder-gray-400 shadow-sm focus:border-indigo-500 focus:outline-none focus:ring-indigo-500 sm:text-sm"
          />
          {errors.password && (
            <p className="mt-1 text-sm text-red-600">
              {errors.password.message}
            </p>
          )}
        </div>
      </div>

      {error && (
        <div className="rounded-md bg-red-50 p-4">
          <div className="flex">
            <div className="ml-3">
              <h3 className="text-sm font-medium text-red-800">{error}</h3>
            </div>
          </div>
        </div>
      )}

      <div className="flex items-center justify-between">
        <div className="text-sm">
          <Link
            href="/auth/forgot-password"
            className="font-medium text-indigo-600 hover:text-indigo-500"
          >
            Forgot your password?
          </Link>
        </div>
        <div className="text-sm">
          <Link
            href="/auth/sign-up"
            className="font-medium text-indigo-600 hover:text-indigo-500"
          >
            Dont have an account?
          </Link>
        </div>
      </div>

      <div>
        <button
          type="submit"
          disabled={isLoading}
          className="flex w-full justify-center rounded-md border border-transparent bg-indigo-600 px-4 py-2 text-sm font-medium text-white shadow-sm hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 disabled:opacity-50"
        >
          {isLoading ? "Signing in..." : "Sign in"}
        </button>
      </div>
    </form>
  );
}



================================================
FILE: app/auth/sign-up/page.tsx
================================================
import { createClient } from "@/lib/supabase/server";
import { redirect } from "next/navigation";
import SignUpForm from "./_components/SignUpForm";

export default async function SignUpPage() {
  const supabase = await createClient();
  const {
    data: { session },
  } = await supabase.auth.getSession();

  if (session) {
    redirect("/");
  }

  return (
    <div className="flex min-h-screen flex-col items-center justify-center py-12 sm:px-6 lg:px-8">
      <div className="sm:mx-auto sm:w-full sm:max-w-md">
        <h2 className="mt-6 text-center text-3xl font-bold tracking-tight text-gray-900">
          Create your account
        </h2>
      </div>
      <div className="mt-8 sm:mx-auto sm:w-full sm:max-w-md">
        <div className="bg-white px-4 py-8 shadow sm:rounded-lg sm:px-10">
          <SignUpForm />
        </div>
      </div>
    </div>
  );
}



================================================
FILE: app/auth/sign-up/_components/SignUpForm.tsx
================================================
"use client";

import { createClient } from "@/lib/supabase/client";
import { zodResolver } from "@hookform/resolvers/zod";
import { useForm } from "react-hook-form";
import { z } from "zod";
import { useState } from "react";
import { useRouter } from "next/navigation";
import Link from "next/link";

const signUpSchema = z
  .object({
    email: z.string().email("Invalid email address"),
    password: z.string().min(6, "Password must be at least 6 characters"),
    confirmPassword: z.string(),
  })
  .refine((data) => data.password === data.confirmPassword, {
    message: "Passwords don't match",
    path: ["confirmPassword"],
  });

type SignUpFormData = z.infer<typeof signUpSchema>;

export default function SignUpForm() {
  const [error, setError] = useState<string | null>(null);
  const [isLoading, setIsLoading] = useState(false);
  const router = useRouter();
  const supabase = createClient();

  const {
    register,
    handleSubmit,
    formState: { errors },
  } = useForm<SignUpFormData>({
    resolver: zodResolver(signUpSchema),
  });

  const onSubmit = async (data: SignUpFormData) => {
    try {
      setIsLoading(true);
      setError(null);

      const { error } = await supabase.auth.signUp({
        email: data.email,
        password: data.password,
        options: {
          emailRedirectTo: `${window.location.origin}/auth/confirm`,
        },
      });

      if (error) {
        throw error;
      }

      router.push("/auth/sign-up-success");
    } catch (err) {
      setError(err instanceof Error ? err.message : "An error occurred");
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <form onSubmit={handleSubmit(onSubmit)} className="space-y-6">
      <div>
        <label
          htmlFor="email"
          className="block text-sm font-medium text-gray-700"
        >
          Email address
        </label>
        <div className="mt-1">
          <input
            id="email"
            type="email"
            autoComplete="email"
            disabled={isLoading}
            {...register("email")}
            className="block w-full appearance-none rounded-md border border-gray-300 px-3 py-2 placeholder-gray-400 shadow-sm focus:border-indigo-500 focus:outline-none focus:ring-indigo-500 sm:text-sm"
          />
          {errors.email && (
            <p className="mt-1 text-sm text-red-600">{errors.email.message}</p>
          )}
        </div>
      </div>

      <div>
        <label
          htmlFor="password"
          className="block text-sm font-medium text-gray-700"
        >
          Password
        </label>
        <div className="mt-1">
          <input
            id="password"
            type="password"
            autoComplete="new-password"
            disabled={isLoading}
            {...register("password")}
            className="block w-full appearance-none rounded-md border border-gray-300 px-3 py-2 placeholder-gray-400 shadow-sm focus:border-indigo-500 focus:outline-none focus:ring-indigo-500 sm:text-sm"
          />
          {errors.password && (
            <p className="mt-1 text-sm text-red-600">
              {errors.password.message}
            </p>
          )}
        </div>
      </div>

      <div>
        <label
          htmlFor="confirmPassword"
          className="block text-sm font-medium text-gray-700"
        >
          Confirm Password
        </label>
        <div className="mt-1">
          <input
            id="confirmPassword"
            type="password"
            autoComplete="new-password"
            disabled={isLoading}
            {...register("confirmPassword")}
            className="block w-full appearance-none rounded-md border border-gray-300 px-3 py-2 placeholder-gray-400 shadow-sm focus:border-indigo-500 focus:outline-none focus:ring-indigo-500 sm:text-sm"
          />
          {errors.confirmPassword && (
            <p className="mt-1 text-sm text-red-600">
              {errors.confirmPassword.message}
            </p>
          )}
        </div>
      </div>

      {error && (
        <div className="rounded-md bg-red-50 p-4">
          <div className="flex">
            <div className="ml-3">
              <h3 className="text-sm font-medium text-red-800">{error}</h3>
            </div>
          </div>
        </div>
      )}

      <div className="text-sm">
        <Link
          href="/auth/sign-in"
          className="font-medium text-indigo-600 hover:text-indigo-500"
        >
          Already have an account?
        </Link>
      </div>

      <div>
        <button
          type="submit"
          disabled={isLoading}
          className="flex w-full justify-center rounded-md border border-transparent bg-indigo-600 px-4 py-2 text-sm font-medium text-white shadow-sm hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 disabled:opacity-50"
        >
          {isLoading ? "Creating account..." : "Create account"}
        </button>
      </div>
    </form>
  );
}



================================================
FILE: app/auth/sign-up-success/page.tsx
================================================
"use client";

import Link from "next/link";

export default function SignUpSuccessPage() {
  return (
    <div className="min-h-screen bg-gray-50 flex flex-col items-center justify-center px-4 sm:px-6 lg:px-8">
      <div className="w-full max-w-lg">
        <h1 className="text-4xl font-bold text-[#2A2A33] text-center tracking-tight mb-2">
          Check your email
        </h1>
        <p className="text-lg text-center text-[#54545A] mb-8">
          We sent you a confirmation link to complete your registration
        </p>

        <div className="bg-white rounded-xl shadow-lg p-8">
          <div className="bg-[#E6F4EA] rounded-lg p-6 mb-6">
            <h3 className="text-[#1B5E20] text-xl font-semibold mb-3">
              Registration successful
            </h3>
            <p className="text-[#2E7D32] text-base leading-relaxed">
              Please check your email for a confirmation link to complete your
              registration. If you don&apos;t see it, check your spam folder.
            </p>
          </div>

          <div className="border-t border-gray-200 pt-6">
            <div className="flex justify-center">
              <Link
                href="/auth/sign-in"
                className="inline-flex items-center text-[#006AFF] hover:text-[#0053C6] font-semibold"
              >
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  className="h-5 w-5 mr-2"
                  viewBox="0 0 20 20"
                  fill="currentColor"
                >
                  <path
                    fillRule="evenodd"
                    d="M9.707 16.707a1 1 0 01-1.414 0l-6-6a1 1 0 010-1.414l6-6a1 1 0 011.414 1.414L5.414 9H17a1 1 0 110 2H5.414l4.293 4.293a1 1 0 010 1.414z"
                    clipRule="evenodd"
                  />
                </svg>
                Back to sign in
              </Link>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}



================================================
FILE: app/auth/update-password/page.tsx
================================================
"use client";

import { useState } from "react";
import { createClient } from "@supabase/supabase-js";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { useRouter } from "next/navigation";

export default function UpdatePassword() {
  const [password, setPassword] = useState("");
  const [confirmPassword, setConfirmPassword] = useState("");
  const [error, setError] = useState<string | null>(null);
  const [loading, setLoading] = useState(false);
  const [success, setSuccess] = useState(false);
  const router = useRouter();
  const supabase = createClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
  );

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setError(null);
    setLoading(true);

    if (password !== confirmPassword) {
      setError("Passwords do not match");
      setLoading(false);
      return;
    }

    try {
      const { error } = await supabase.auth.updateUser({
        password,
      });

      if (error) {
        setError(error.message);
        return;
      }

      setSuccess(true);
      // Redirect after successful password reset
      setTimeout(() => {
        router.push("/auth/sign-in");
      }, 2000);
    } catch (err) {
      setError("An error occurred while updating your password");
      console.error("Password update error:", err);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="flex min-h-screen items-center justify-center p-4">
      <Card className="w-full max-w-md">
        <CardHeader>
          <CardTitle>Set New Password</CardTitle>
          <CardDescription>Enter your new password below.</CardDescription>
        </CardHeader>
        <form onSubmit={handleSubmit}>
          <CardContent className="space-y-4">
            {error && (
              <div className="bg-destructive/10 text-destructive p-3 rounded-md text-sm">
                {error}
              </div>
            )}
            {success && (
              <div className="bg-green-100 text-green-700 p-3 rounded-md text-sm">
                Password updated successfully. Redirecting to login...
              </div>
            )}
            <div className="space-y-2">
              <label htmlFor="password" className="text-sm font-medium">
                New Password
              </label>
              <Input
                id="password"
                type="password"
                value={password}
                onChange={(e) => setPassword(e.target.value)}
                required
                disabled={loading || success}
                className="w-full"
              />
            </div>
            <div className="space-y-2">
              <label htmlFor="confirmPassword" className="text-sm font-medium">
                Confirm Password
              </label>
              <Input
                id="confirmPassword"
                type="password"
                value={confirmPassword}
                onChange={(e) => setConfirmPassword(e.target.value)}
                required
                disabled={loading || success}
                className="w-full"
              />
            </div>
          </CardContent>
          <CardFooter>
            <Button
              type="submit"
              disabled={loading || success}
              className="w-full"
            >
              {loading ? "Updating..." : "Update Password"}
            </Button>
          </CardFooter>
        </form>
      </Card>
    </div>
  );
}



================================================
FILE: app/emails/RequestInfoEmail.tsx
================================================
import * as React from "react";

interface RequestInfoEmailProps {
  name: string;
  email: string;
  phone?: string;
  message: string;
}

export default function RequestInfoEmail({
  name,
  email,
  phone,
  message,
}: RequestInfoEmailProps) {
  return (
    <div
      style={{ fontFamily: "Arial, sans-serif", color: "#222", fontSize: 16 }}
    >
      <h2>New Property Info Request</h2>
      <p>
        <strong>Name:</strong> {name}
      </p>
      <p>
        <strong>Email:</strong> {email}
      </p>
      {phone && (
        <p>
          <strong>Phone:</strong> {phone}
        </p>
      )}
      <p>
        <strong>Message:</strong>
      </p>
      <p>{message}</p>
    </div>
  );
}



================================================
FILE: app/profile/page.tsx
================================================
"use client";

import { useEffect, useState } from "react";
import type { User } from "@supabase/supabase-js";
import { createClient } from "@/lib/supabase/client";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Separator } from "@/components/ui/separator";
import { useRouter } from "next/navigation";

export default function ClientProfilePage() {
  const [user, setUser] = useState<User | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [formData, setFormData] = useState({
    fullName: "",
    phone: "",
    role: "관리자",
  });
  const router = useRouter();
  const supabase = createClient();

  useEffect(() => {
    async function loadUser() {
      setIsLoading(true);
      const { data } = await supabase.auth.getUser();

      if (!data.user) {
        router.push("/auth/sign-in");
        return;
      }

      setUser(data.user);
      setFormData({
        fullName: data.user.user_metadata?.full_name || "",
        phone: data.user.user_metadata?.phone || "",
        role: data.user.user_metadata?.role || "관리자",
      });
      setIsLoading(false);
    }

    loadUser();
  }, [router, supabase.auth]);

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    setFormData((prev) => ({ ...prev, [name]: value }));
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    try {
      await supabase.auth.updateUser({
        data: {
          full_name: formData.fullName,
          phone: formData.phone,
          role: formData.role,
        },
      });

      alert("프로필이 업데이트되었습니다.");
    } catch (error) {
      console.error("Error updating profile:", error);
      alert("프로필 업데이트 중 오류가 발생했습니다.");
    }
  };

  if (isLoading) {
    return (
      <div className="py-8 max-w-4xl mx-auto flex items-center justify-center min-h-[300px]">
        <div className="h-8 w-8 rounded-full border-4 border-t-[#007882] border-r-transparent border-b-transparent border-l-transparent animate-spin"></div>
      </div>
    );
  }

  return (
    <div className="py-8 max-w-4xl mx-auto">
      <h1 className="text-3xl font-bold mb-8">내 프로필</h1>

      <form onSubmit={handleSubmit} className="space-y-6">
        <Card>
          <CardHeader>
            <CardTitle>계정 정보</CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  이메일
                </label>
                <input
                  type="email"
                  className="w-full rounded-md border border-gray-300 px-3 py-2 bg-gray-50"
                  value={user?.email || ""}
                  disabled
                  placeholder="이메일"
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  사용자 ID
                </label>
                <input
                  type="text"
                  className="w-full rounded-md border border-gray-300 px-3 py-2 bg-gray-50"
                  value={user?.id || ""}
                  disabled
                  placeholder="사용자 ID"
                />
              </div>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardHeader>
            <CardTitle>프로필 설정</CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  이름
                </label>
                <input
                  type="text"
                  name="fullName"
                  className="w-full rounded-md border border-gray-300 px-3 py-2 focus:outline-none focus:ring-1 focus:ring-[#007882]"
                  value={formData.fullName}
                  onChange={handleInputChange}
                  placeholder="이름을 입력하세요"
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  전화번호
                </label>
                <input
                  type="tel"
                  name="phone"
                  className="w-full rounded-md border border-gray-300 px-3 py-2 focus:outline-none focus:ring-1 focus:ring-[#007882]"
                  value={formData.phone}
                  onChange={handleInputChange}
                  placeholder="전화번호를 입력하세요"
                />
              </div>
            </div>

            <Separator className="my-4" />

            <div className="flex justify-end">
              <Button type="submit" className="bg-[#007882] hover:bg-[#005F67]">
                변경사항 저장
              </Button>
            </div>
          </CardContent>
        </Card>
      </form>
    </div>
  );
}




================================================
FILE: components/error/ErrorBoundary.tsx
================================================
"use client";

import { useEffect } from "react";
import { Button } from "@/components/ui/button";
import {
  Card,
  CardContent,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";

interface ErrorBoundaryProps {
  error: Error & { digest?: string };
  reset: () => void;
}

export default function ErrorBoundary({ error, reset }: ErrorBoundaryProps) {
  useEffect(() => {
    // Log the error to an error reporting service
    console.error("Error caught by error boundary:", error);
  }, [error]);

  return (
    <div className="flex items-center justify-center min-h-[400px] p-4">
      <Card className="w-full max-w-md">
        <CardHeader>
          <CardTitle className="text-xl text-red-500">
            Something went wrong
          </CardTitle>
        </CardHeader>
        <CardContent>
          <p className="mb-4 text-muted-foreground">
            {error.message ||
              "An unexpected error occurred while loading this content."}
          </p>
          <div className="bg-muted p-3 rounded-md text-xs overflow-auto max-h-32">
            <code>
              {error.digest
                ? `Error ID: ${error.digest}`
                : "No error details available"}
            </code>
          </div>
        </CardContent>
        <CardFooter className="flex justify-end space-x-2">
          <Button
            variant="outline"
            onClick={() => (window.location.href = "/")}
          >
            Go Home
          </Button>
          <Button onClick={() => reset()}>Try Again</Button>
        </CardFooter>
      </Card>
    </div>
  );
}



================================================
FILE: components/featured/FeaturedPropertiesClient.tsx
================================================
"use client";

import { useState } from "react";
import {
  Carousel,
  CarouselContent,
  CarouselItem,
  CarouselNext,
  CarouselPrevious,
} from "@/components/ui/carousel";
import {
  Building2,
  Home as HomeIcon,
  ArrowRight,
} from "lucide-react";
import { cn } from "@/lib/utils";
import type { PropertyListing } from "@/types/property";
import Link from "next/link";
import { PropertyCard } from "@/components/property/PropertyCard";

// Animated Tabs component (kept internal to this client component)
function AnimatedTabs({
  tabs,
  activeTab,
  onTabChange,
}: {
  tabs: { id: string; label: string; icon?: React.ReactNode }[];
  activeTab: string;
  onTabChange: (id: string) => void;
}) {
  return (
    <div className="flex space-x-1 rounded-lg bg-muted p-1 mb-8">
      <div className="relative flex">
        {tabs.map((tab) => (
          <button
            key={tab.id}
            onClick={() => onTabChange(tab.id)}
            className={cn(
              "relative px-6 py-2 text-sm font-medium transition-all duration-200 z-10",
              activeTab === tab.id
                ? "text-primary-foreground"
                : "text-muted-foreground hover:text-foreground",
            )}
          >
            <div className="flex items-center gap-2">
              {tab.icon}
              {tab.label}
            </div>
            {activeTab === tab.id && (
              <div className="absolute inset-0 bg-primary rounded-md -z-10" />
            )}
          </button>
        ))}
      </div>
    </div>
  );
}

// Main Client Component for Featured Properties Section
export function FeaturedPropertiesClient({
  rentProperties,
  buyProperties,
  totalProperties,
}: {
  rentProperties: PropertyListing[];
  buyProperties: PropertyListing[];
  totalProperties: number;
}) {
  const [activeTab, setActiveTab] = useState("rent");

  const tabs = [
    { id: "rent", label: "For Rent", icon: <Building2 className="h-4 w-4" /> },
    { id: "buy", label: "For Sale", icon: <HomeIcon className="h-4 w-4" /> },
  ];

  const properties = activeTab === "rent" ? rentProperties : buyProperties;

  return (
    <section className="w-full py-16 bg-background">
      <div className="container mx-auto px-4">
        <div className="flex flex-col md:flex-row justify-between items-start md:items-center mb-8">
          <div>
            <h2 className="text-3xl font-bold tracking-tight mb-2">
              Featured Properties
            </h2>
            <p className="text-muted-foreground">
              Discover {totalProperties}+ properties available in Korea
            </p>
          </div>
          <AnimatedTabs
            tabs={tabs}
            activeTab={activeTab}
            onTabChange={setActiveTab}
          />
        </div>

        {/* Carousel Implementation */}
        <Carousel
          opts={{
            align: "start",
            loop: properties.length > 3, // Loop only if enough items
          }}
          className="w-full"
        >
          <CarouselContent>
            {properties.map((property: PropertyListing) => (
              <CarouselItem
                key={property.id}
                className="md:basis-1/2 lg:basis-1/3"
              >
                <div className="p-1 h-full">
                  <PropertyCard property={property} />
                </div>
              </CarouselItem>
            ))}
          </CarouselContent>
          <CarouselPrevious className="hidden sm:flex" />
          <CarouselNext className="hidden sm:flex" />
        </Carousel>

        <div className="mt-10 flex justify-center">
          <Link
            href={`/search?propertyType=${activeTab === "rent" ? "월세" : "매매"}`}
            className="group inline-flex items-center gap-2 text-primary hover:text-primary/80 transition-colors"
          >
            View all properties
            <ArrowRight className="h-4 w-4 transition-transform group-hover:translate-x-1" />
          </Link>
        </div>
      </div>
    </section>
  );
}



================================================
FILE: components/layout/Container.tsx
================================================
import React from "react";

interface ContainerProps {
  children: React.ReactNode;
}

const Container: React.FC<ContainerProps> = ({ children }) => {
  return (
    <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">{children}</div>
  );
};

export default Container;



================================================
FILE: components/layout/Footer.tsx
================================================
import Link from "next/link";

export function Footer() {
  const currentYear = new Date().getFullYear();

  return (
    <footer className="bg-[#F6F7F8] border-t border-gray-200 mt-16">
      <div className="container mx-auto px-4 py-12">
        <div className="grid grid-cols-2 md:grid-cols-4 gap-8 mb-12">
          {/* Column 1: Popular Searches */}
          <div>
            <h3 className="text-[#2A2A33] font-semibold mb-4">
              Popular Searches
            </h3>
            <ul className="space-y-3">
              <li>
                <Link
                  href="#"
                  className="text-[#2A2A33] hover:text-[#007882] transition-colors text-sm"
                >
                  Apartments Near Me
                </Link>
              </li>
              <li>
                <Link
                  href="#"
                  className="text-[#2A2A33] hover:text-[#007882] transition-colors text-sm"
                >
                  Houses for Sale
                </Link>
              </li>
              <li>
                <Link
                  href="#"
                  className="text-[#2A2A33] hover:text-[#007882] transition-colors text-sm"
                >
                  Open Houses
                </Link>
              </li>
            </ul>
          </div>

          {/* Column 2: Explore */}
          <div>
            <h3 className="text-[#2A2A33] font-semibold mb-4">Explore</h3>
            <ul className="space-y-3">
              <li>
                <Link
                  href="#"
                  className="text-[#2A2A33] hover:text-[#007882] transition-colors text-sm"
                >
                  Neighborhoods
                </Link>
              </li>
              <li>
                <Link
                  href="#"
                  className="text-[#2A2A33] hover:text-[#007882] transition-colors text-sm"
                >
                  Cities
                </Link>
              </li>
              <li>
                <Link
                  href="#"
                  className="text-[#2A2A33] hover:text-[#007882] transition-colors text-sm"
                >
                  Guides
                </Link>
              </li>
            </ul>
          </div>

          {/* Column 3: About */}
          <div>
            <h3 className="text-[#2A2A33] font-semibold mb-4">About</h3>
            <ul className="space-y-3">
              <li>
                <Link
                  href="#"
                  className="text-[#2A2A33] hover:text-[#007882] transition-colors text-sm"
                >
                  About Us
                </Link>
              </li>
              <li>
                <Link
                  href="#"
                  className="text-[#2A2A33] hover:text-[#007882] transition-colors text-sm"
                >
                  Careers
                </Link>
              </li>
              <li>
                <Link
                  href="#"
                  className="text-[#2A2A33] hover:text-[#007882] transition-colors text-sm"
                >
                  Contact
                </Link>
              </li>
            </ul>
          </div>

          {/* Column 4: Legal */}
          <div>
            <h3 className="text-[#2A2A33] font-semibold mb-4">Legal</h3>
            <ul className="space-y-3">
              <li>
                <Link
                  href="#"
                  className="text-[#2A2A33] hover:text-[#007882] transition-colors text-sm"
                >
                  Terms of Use
                </Link>
              </li>
              <li>
                <Link
                  href="#"
                  className="text-[#2A2A33] hover:text-[#007882] transition-colors text-sm"
                >
                  Privacy Policy
                </Link>
              </li>
              <li>
                <Link
                  href="#"
                  className="text-[#2A2A33] hover:text-[#007882] transition-colors text-sm"
                >
                  Fair Housing
                </Link>
              </li>
            </ul>
          </div>
        </div>

        <div className="border-t border-gray-200 pt-8">
          <div className="text-center text-sm text-[#2A2A33]">
            <p className="mb-2">
              © {currentYear} VinaProp. All rights reserved. Equal Housing
              Opportunity.
            </p>
            <p className="text-xs">
              VinaProp is committed to ensuring digital accessibility for
              individuals with disabilities. We are continuously working to
              improve the accessibility of our web experience for everyone.
            </p>
          </div>
        </div>
      </div>
    </footer>
  );
}



================================================
FILE: components/layout/Header.tsx
================================================
"use client";

import Link from "next/link";
import { Home, Heart, User } from "lucide-react";
import { useEffect, useState } from "react";
import { createClient } from "@/lib/supabase/client";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import { useRouter } from "next/navigation";

interface UserWithMetadata {
  email?: string;
  user_metadata?: {
    full_name?: string;
  };
}

export function Header() {
  const [isLoggedIn, setIsLoggedIn] = useState(false);
  const [user, setUser] = useState<UserWithMetadata | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const router = useRouter();
  const supabase = createClient();

  useEffect(() => {
    const getUser = async () => {
      setIsLoading(true);
      const {
        data: { user },
      } = await supabase.auth.getUser();
      setUser(user);
      setIsLoggedIn(!!user);
      setIsLoading(false);
    };

    getUser();

    // Listen for auth changes
    const {
      data: { subscription },
    } = supabase.auth.onAuthStateChange((event, session) => {
      setUser(session?.user || null);
      setIsLoggedIn(!!session?.user);
    });

    return () => {
      subscription.unsubscribe();
    };
  }, [supabase.auth]);

  const handleSignOut = async () => {
    await supabase.auth.signOut();
    router.refresh();
  };

  return (
    <header className="sticky top-0 z-50 w-full bg-white border-b border-gray-200">
      <div className="container mx-auto px-4 h-16 flex items-center justify-between">
        {/* Left section with logo and nav */}
        <div className="flex items-center space-x-8">
          <Link href="/" className="flex items-center space-x-2">
            <Home className="h-6 w-6 text-[#007882]" />
            <span className="text-[#2A2A33] text-xl font-bold">VinaProp</span>
          </Link>

          <nav className="hidden md:flex items-center space-x-6">
            <Link
              href="/search"
              className="px-3 py-2 font-medium text-sm text-[#2A2A33] hover:bg-[#007882] hover:text-white rounded transition-colors"
            >
              Buy
            </Link>
            <Link
              href="/properties"
              className="px-3 py-2 font-medium text-sm text-[#2A2A33] hover:bg-[#007882] hover:text-white rounded transition-colors"
            >
              Rent
            </Link>
          </nav>
        </div>

        {/* Right section with auth */}
        <div className="flex items-center space-x-4">
          {isLoading ? (
            <div className="h-9 w-9 rounded-full bg-gray-200 animate-pulse"></div>
          ) : isLoggedIn ? (
            <>
              <DropdownMenu>
                <DropdownMenuTrigger asChild>
                  <button className="flex items-center gap-2 rounded-full px-4 py-2 font-medium transition-colors bg-[rgb(0,120,130)] text-white hover:bg-[rgb(0,95,103)] focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-[rgb(0,120,130)]">
                    <User className="h-5 w-5" />
                    <span>
                      {user &&
                      typeof user === "object" &&
                      "user_metadata" in user &&
                      user.user_metadata
                        ? user.user_metadata.full_name || user.email
                        : user?.email}
                    </span>
                  </button>
                </DropdownMenuTrigger>
                <DropdownMenuContent align="end" className="w-56">
                  <div className="px-2 py-1.5 text-sm font-medium">
                    {user?.email}
                  </div>
                  <DropdownMenuSeparator />
                  <DropdownMenuItem>
                    <button
                      onClick={() => router.push("/admin/profile")}
                      className="cursor-pointer w-full text-left"
                    >
                      Profile
                    </button>
                  </DropdownMenuItem>
                  <DropdownMenuItem>
                    <button
                      onClick={() => router.push("/admin/saved-homes")}
                      className="cursor-pointer w-full text-left flex items-center gap-2"
                    >
                      <Heart className="h-4 w-4" />
                      <span>Saved Homes</span>
                    </button>
                  </DropdownMenuItem>
                  <DropdownMenuSeparator />
                  <DropdownMenuItem
                    className="cursor-pointer text-red-600"
                    onClick={handleSignOut}
                  >
                    Sign Out
                  </DropdownMenuItem>
                </DropdownMenuContent>
              </DropdownMenu>
            </>
          ) : (
            <div className="flex items-center space-x-4">
              <Link href="/auth/sign-in">
                <button className="px-3 py-2 font-medium text-sm text-[#2A2A33] hover:bg-[#007882] hover:text-white rounded transition-colors">
                  Sign In
                </button>
              </Link>
              <Link href="/auth/sign-up">
                <button className="px-3 py-2 font-medium text-sm text-[#2A2A33] hover:bg-[#007882] hover:text-white rounded transition-colors">
                  Sign Up
                </button>
              </Link>
            </div>
          )}
        </div>
      </div>
    </header>
  );
}



================================================
FILE: components/property/FeaturedPropertyTabs.tsx
================================================
"use client";

import { useState } from "react";
import { PropertyCard } from "@/components/property/PropertyCard";
import { PropertyListing } from "@/types/property";

interface FeaturedPropertyTabsProps {
  rentProperties: PropertyListing[];
  buyProperties: PropertyListing[];
}

export function FeaturedPropertyTabs({
  rentProperties,
  buyProperties,
}: FeaturedPropertyTabsProps) {
  const [activeTab, setActiveTab] = useState<"rent" | "buy">("rent");

  const handleTabChange = (tab: "rent" | "buy") => {
    setActiveTab(tab);
  };

  return (
    <>
      <div className="mb-8">
        <div className="flex border-b">
          <button
            type="button"
            onClick={() => handleTabChange("rent")}
            className={`px-4 py-2 font-medium ${
              activeTab === "rent"
                ? "border-b-2 border-primary"
                : "text-muted-foreground hover:text-foreground transition-colors"
            }`}
          >
            For Rent (월세)
          </button>
          <button
            type="button"
            onClick={() => handleTabChange("buy")}
            className={`px-4 py-2 font-medium ${
              activeTab === "buy"
                ? "border-b-2 border-primary"
                : "text-muted-foreground hover:text-foreground transition-colors"
            }`}
          >
            For Sale (매매)
          </button>
        </div>
      </div>

      {/* Rental Properties */}
      {activeTab === "rent" && (
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-8">
          {rentProperties.length > 0 ? (
            rentProperties
              .slice(0, 6)
              .map((property) => (
                <PropertyCard key={property.id} property={property} />
              ))
          ) : (
            <div className="col-span-3 text-center py-12">
              <p className="text-muted-foreground">
                No rental properties found.
              </p>
            </div>
          )}
        </div>
      )}

      {/* Purchase Properties */}
      {activeTab === "buy" && (
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-8">
          {buyProperties.length > 0 ? (
            buyProperties
              .slice(0, 6)
              .map((property) => (
                <PropertyCard key={property.id} property={property} />
              ))
          ) : (
            <div className="col-span-3 text-center py-12">
              <p className="text-muted-foreground">
                No properties for sale found.
              </p>
            </div>
          )}
        </div>
      )}
    </>
  );
}



================================================
FILE: components/property/PropertyCard.tsx
================================================
"use client";

import { memo } from "react";
import Link from "next/link";
import Image from "next/image";
import { PropertyListing } from "@/types/property";
import {
  Card,
  CardContent,
  CardHeader,
  CardTitle,
  CardDescription,
  CardFooter,
} from "@/components/ui/card";
import { Button } from "@/components/ui/button";

interface PropertyCardProps {
  property: PropertyListing;
  showDistance?: boolean;
  distanceMeters?: number;
}

// Format price based on property type
const formatPrice = (price: number, type: string) => {
  // Use a fixed locale to avoid hydration mismatches
  if (type === "월세") {
    return `$${price.toLocaleString("en-US")}/month`;
  } else {
    return `$${price.toLocaleString("en-US")}`;
  }
};

// Format distance in a human-readable way
const formatDistance = (meters: number) => {
  // Use fixed precision to avoid hydration mismatches
  if (meters < 1000) {
    return `${Math.floor(meters)}m away`;
  } else {
    const km = meters / 1000;
    return `${(Math.floor(km * 10) / 10).toFixed(1)}km away`;
  }
};

function PropertyCardComponent({
  property,
  showDistance = false,
  distanceMeters,
}: PropertyCardProps) {
  return (
    <Card className="h-full flex flex-col transition-shadow hover:shadow-md">
      <CardHeader className="pb-2">
        {property.primary_image ||
        (property.property_images &&
          property.property_images.length > 0 &&
          property.property_images[0].publicUrl) ? (
          <Image
            src={
              property.primary_image ||
              (property.property_images &&
                property.property_images.length > 0 &&
                property.property_images[0].publicUrl) ||
              "/next.svg"
            }
            alt={property.title}
            className="w-full h-48 object-cover rounded-lg mb-2"
            width={384}
            height={192}
            priority={false}
          />
        ) : (
          // fallback image
          <Image
            src="/next.svg"
            alt="No image available"
            className="w-full h-48 object-cover rounded-lg mb-2"
            width={384}
            height={192}
            priority={false}
          />
        )}
        <CardTitle className="text-lg line-clamp-2">{property.title}</CardTitle>
        <CardDescription>
          {property.address}
          {showDistance && distanceMeters && (
            <span className="ml-2 text-xs font-medium text-primary">
              {formatDistance(distanceMeters)}
            </span>
          )}
        </CardDescription>
      </CardHeader>
      <CardContent className="py-2 flex-grow">
        <div className="space-y-2">
          <p className="font-semibold text-lg">
            {formatPrice(property.price, property.property_type)}
            <span className="ml-2 text-sm font-normal text-muted-foreground">
              {property.property_type === "월세" ? "Monthly Rent" : "Purchase"}
            </span>
          </p>
          <div className="flex space-x-4 text-sm">
            <div>
              {property.bedrooms}{" "}
              <span className="text-muted-foreground">Bed</span>
            </div>
            <div>
              {property.bathrooms}{" "}
              <span className="text-muted-foreground">Bath</span>
            </div>
            <div>
              {property.square_footage}{" "}
              <span className="text-muted-foreground">sqft</span>
            </div>
          </div>
          <p className="text-sm line-clamp-3 text-muted-foreground">
            {property.description}
          </p>
        </div>
      </CardContent>
      <CardFooter className="pt-2">
        <Link href={`/properties/${property.id}`} className="w-full">
          <Button variant="outline" className="w-full">
            View Details
          </Button>
        </Link>
      </CardFooter>
    </Card>
  );
}

// Memoize the component to prevent unnecessary re-renders
export const PropertyCard = memo(PropertyCardComponent);



================================================
FILE: components/property/PropertyCardSkeleton.tsx
================================================
"use client";

import {
  Card,
  CardContent,
  CardHeader,
  CardFooter,
} from "@/components/ui/card";

export function PropertyCardSkeleton() {
  return (
    <Card className="h-full flex flex-col">
      <CardHeader className="pb-2">
        <div className="h-6 bg-muted rounded-md w-3/4 animate-pulse"></div>
        <div className="h-4 bg-muted rounded-md w-1/2 mt-2 animate-pulse"></div>
      </CardHeader>
      <CardContent className="py-2 flex-grow">
        <div className="space-y-3">
          <div className="h-5 bg-muted rounded-md w-1/3 animate-pulse"></div>
          <div className="flex space-x-4">
            <div className="h-4 bg-muted rounded-md w-16 animate-pulse"></div>
            <div className="h-4 bg-muted rounded-md w-16 animate-pulse"></div>
            <div className="h-4 bg-muted rounded-md w-16 animate-pulse"></div>
          </div>
          <div className="space-y-2">
            <div className="h-4 bg-muted rounded-md w-full animate-pulse"></div>
            <div className="h-4 bg-muted rounded-md w-full animate-pulse"></div>
            <div className="h-4 bg-muted rounded-md w-2/3 animate-pulse"></div>
          </div>
        </div>
      </CardContent>
      <CardFooter className="pt-2">
        <div className="h-9 bg-muted rounded-md w-full animate-pulse"></div>
      </CardFooter>
    </Card>
  );
}



================================================
FILE: components/property/PropertyContact.tsx
================================================
"use client";

import { useState } from "react";
import { Phone, Mail, User } from "lucide-react";
import { Button } from "@/components/ui/button";
import {
  Card,
  CardContent,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Label } from "@/components/ui/label";

interface PropertyContactProps {
  propertyTitle: string;
}

export function PropertyContact({ propertyTitle }: PropertyContactProps) {
  const [name, setName] = useState("");
  const [email, setEmail] = useState("");
  const [phone, setPhone] = useState("");
  const [message, setMessage] = useState(
    `I'm interested in this property: ${propertyTitle}`,
  );
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [isSubmitted, setIsSubmitted] = useState(false);

  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();

    setIsSubmitting(true);

    // In a real implementation, this would send the data to an API
    // For now, we'll just simulate a delay
    await new Promise((resolve) => setTimeout(resolve, 1000));

    setIsSubmitting(false);
    setIsSubmitted(true);
  };

  if (isSubmitted) {
    return (
      <Card>
        <CardHeader>
          <CardTitle className="text-xl">Message Sent</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="text-center py-4">
            <div className="h-12 w-12 rounded-full bg-primary/10 text-primary flex items-center justify-center mx-auto mb-4">
              <Mail className="h-6 w-6" />
            </div>
            <p className="mb-2">Thank you for your interest!</p>
            <p className="text-sm text-muted-foreground">
              We&apos;ve received your message and will get back to you shortly.
            </p>
          </div>
        </CardContent>
        <CardFooter>
          <Button
            variant="outline"
            className="w-full"
            onClick={() => setIsSubmitted(false)}
          >
            Send Another Message
          </Button>
        </CardFooter>
      </Card>
    );
  }

  return (
    <Card>
      <CardHeader>
        <CardTitle className="text-xl">Contact Agent</CardTitle>
      </CardHeader>
      <CardContent>
        <form onSubmit={handleSubmit} className="space-y-4">
          <div className="space-y-2">
            <Label htmlFor="name">Your Name</Label>
            <div className="relative">
              <User className="absolute left-3 top-3 h-4 w-4 text-muted-foreground" />
              <Input
                id="name"
                placeholder="Enter your name"
                className="pl-10"
                value={name}
                onChange={(e) => setName(e.target.value)}
                required
              />
            </div>
          </div>

          <div className="space-y-2">
            <Label htmlFor="email">Email Address</Label>
            <div className="relative">
              <Mail className="absolute left-3 top-3 h-4 w-4 text-muted-foreground" />
              <Input
                id="email"
                type="email"
                placeholder="Enter your email"
                className="pl-10"
                value={email}
                onChange={(e) => setEmail(e.target.value)}
                required
              />
            </div>
          </div>

          <div className="space-y-2">
            <Label htmlFor="phone">Phone Number</Label>
            <div className="relative">
              <Phone className="absolute left-3 top-3 h-4 w-4 text-muted-foreground" />
              <Input
                id="phone"
                placeholder="Enter your phone number"
                className="pl-10"
                value={phone}
                onChange={(e) => setPhone(e.target.value)}
              />
            </div>
          </div>

          <div className="space-y-2">
            <Label htmlFor="message">Message</Label>
            <Textarea
              id="message"
              placeholder="Enter your message"
              rows={4}
              value={message}
              onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) =>
                setMessage(e.target.value)
              }
              required
            />
          </div>

          <Button type="submit" className="w-full" disabled={isSubmitting}>
            {isSubmitting ? "Sending..." : "Send Message"}
          </Button>
        </form>
      </CardContent>
    </Card>
  );
}



================================================
FILE: components/property/PropertyFeatures.tsx
================================================
"use client";

import { Check } from "lucide-react";
import { Separator } from "@/components/ui/separator";

interface PropertyFeaturesProps {
  features: Record<string, unknown>;
}

// Helper function to format feature names
function formatFeatureName(key: string): string {
  // Convert camelCase to Title Case with spaces
  const formatted = key
    .replace(/([A-Z])/g, " $1")
    .replace(/^./, (str) => str.toUpperCase());

  // Special cases for Korean-specific features
  if (key.startsWith("korean")) {
    return formatted.replace("Korean", "Korean ");
  }

  return formatted;
}

// Group features by category
function groupFeatures(features: Record<string, unknown>) {
  const groups: Record<string, Record<string, unknown>> = {
    "Property Features": {},
    Amenities: {},
    "Korean Features": {},
    Other: {},
  };

  Object.entries(features).forEach(([key, value]) => {
    if (key.startsWith("korean")) {
      groups["Korean Features"][key] = value;
    } else if (
      [
        "parking",
        "elevator",
        "balcony",
        "garden",
        "pool",
        "gym",
        "security",
      ].includes(key)
    ) {
      groups["Amenities"][key] = value;
    } else if (
      [
        "furnished",
        "airConditioning",
        "heating",
        "washer",
        "dryer",
        "dishwasher",
        "refrigerator",
      ].includes(key)
    ) {
      groups["Property Features"][key] = value;
    } else {
      groups["Other"][key] = value;
    }
  });

  // Remove empty groups
  Object.keys(groups).forEach((groupName) => {
    if (Object.keys(groups[groupName]).length === 0) {
      delete groups[groupName];
    }
  });

  return groups;
}

export function PropertyFeatures({ features }: PropertyFeaturesProps) {
  if (!features || Object.keys(features).length === 0) {
    return (
      <div className="text-muted-foreground">
        No features specified for this property.
      </div>
    );
  }

  const groupedFeatures = groupFeatures(features);

  return (
    <div className="space-y-6">
      {Object.entries(groupedFeatures).map(([groupName, groupFeatures]) => (
        <div key={groupName}>
          <h3 className="text-lg font-medium mb-3">{groupName}</h3>
          <div className="grid grid-cols-2 md:grid-cols-3 gap-3">
            {Object.entries(groupFeatures).map(([key, value]) => {
              if (value === true) {
                return (
                  <div key={key} className="flex items-center gap-2">
                    <div className="h-5 w-5 rounded-full bg-primary/10 flex items-center justify-center">
                      <Check className="h-3 w-3 text-primary" />
                    </div>
                    <span className="text-sm">{formatFeatureName(key)}</span>
                  </div>
                );
              } else if (value === false) {
                return null;
              } else if (
                typeof value === "string" ||
                typeof value === "number"
              ) {
                return (
                  <div key={key} className="flex items-center gap-2">
                    <span className="inline-block px-2 py-1 text-xs rounded border border-gray-300 bg-gray-100 mr-2">
                      {formatFeatureName(key)}
                    </span>
                    <span className="text-sm">{value}</span>
                  </div>
                );
              }
              return null;
            })}
          </div>
          <Separator className="mt-4" />
        </div>
      ))}
    </div>
  );
}



================================================
FILE: components/property/PropertyImageGallery.tsx
================================================
"use client";

import { useState } from "react";
import Image from "next/image";
import { cn } from "@/lib/utils";
import { Button } from "@/components/ui/button";
import { ChevronLeft, ChevronRight, Maximize2, X } from "lucide-react";

interface PropertyImageGalleryProps {
  images: string[];
  alt: string;
}

export function PropertyImageGallery({
  images,
  alt,
}: PropertyImageGalleryProps) {
  const [currentIndex, setCurrentIndex] = useState(0);
  const [fullscreen, setFullscreen] = useState(false);

  // If no images are provided, show a placeholder
  if (!images || images.length === 0) {
    return (
      <div className="relative w-full h-96 bg-muted rounded-lg overflow-hidden">
        <div className="absolute inset-0 flex items-center justify-center">
          <p className="text-muted-foreground">No images available</p>
        </div>
      </div>
    );
  }

  const handlePrevious = () => {
    setCurrentIndex((prevIndex) =>
      prevIndex === 0 ? images.length - 1 : prevIndex - 1,
    );
  };

  const handleNext = () => {
    setCurrentIndex((prevIndex) =>
      prevIndex === images.length - 1 ? 0 : prevIndex + 1,
    );
  };

  const toggleFullscreen = () => {
    setFullscreen(!fullscreen);
  };

  return (
    <>
      {/* Main gallery view */}
      <div className="relative w-full h-96 bg-muted rounded-lg overflow-hidden">
        <Image
          src={images[currentIndex]}
          alt={`${alt} - Image ${currentIndex + 1}`}
          fill
          className="object-cover"
          priority={currentIndex === 0}
        />

        {/* Navigation buttons */}
        <div className="absolute inset-0 flex items-center justify-between p-4">
          <Button
            variant="ghost"
            size="icon"
            className="h-10 w-10 rounded-full bg-background/80 backdrop-blur-sm"
            onClick={handlePrevious}
          >
            <ChevronLeft className="h-6 w-6" />
            <span className="sr-only">Previous image</span>
          </Button>

          <Button
            variant="ghost"
            size="icon"
            className="h-10 w-10 rounded-full bg-background/80 backdrop-blur-sm"
            onClick={handleNext}
          >
            <ChevronRight className="h-6 w-6" />
            <span className="sr-only">Next image</span>
          </Button>
        </div>

        {/* Fullscreen button */}
        <Button
          variant="ghost"
          size="icon"
          className="absolute top-4 right-4 h-10 w-10 rounded-full bg-background/80 backdrop-blur-sm"
          onClick={toggleFullscreen}
        >
          <Maximize2 className="h-5 w-5" />
          <span className="sr-only">View fullscreen</span>
        </Button>

        {/* Image counter */}
        <div className="absolute bottom-4 right-4 bg-background/80 backdrop-blur-sm px-3 py-1 rounded-full text-sm">
          {currentIndex + 1} / {images.length}
        </div>
      </div>

      {/* Thumbnail strip */}
      <div className="flex mt-4 space-x-2 overflow-x-auto pb-2">
        {images.map((image, index) => (
          <button
            key={index}
            title={`View image ${index + 1}`}
            className={cn(
              "relative h-20 w-20 flex-shrink-0 rounded-md overflow-hidden border-2",
              index === currentIndex ? "border-primary" : "border-transparent",
            )}
            onClick={() => setCurrentIndex(index)}
          >
            <Image
              src={image}
              alt={`${alt} - Thumbnail ${index + 1}`}
              fill
              className="object-cover"
            />
          </button>
        ))}
      </div>

      {/* Fullscreen modal */}
      {fullscreen && (
        <div className="fixed inset-0 z-50 bg-background/95 flex items-center justify-center">
          <div className="relative w-full max-w-5xl h-full max-h-screen p-8">
            <Button
              variant="ghost"
              size="icon"
              className="absolute top-4 right-4 z-10 h-10 w-10 rounded-full bg-background/80"
              onClick={toggleFullscreen}
            >
              <X className="h-6 w-6" />
              <span className="sr-only">Close fullscreen</span>
            </Button>

            <div className="relative w-full h-full">
              <Image
                src={images[currentIndex]}
                alt={`${alt} - Fullscreen Image ${currentIndex + 1}`}
                fill
                className="object-contain"
              />

              {/* Navigation buttons */}
              <div className="absolute inset-0 flex items-center justify-between p-4">
                <Button
                  variant="ghost"
                  size="icon"
                  className="h-12 w-12 rounded-full bg-background/80 backdrop-blur-sm"
                  onClick={handlePrevious}
                >
                  <ChevronLeft className="h-8 w-8" />
                  <span className="sr-only">Previous image</span>
                </Button>

                <Button
                  variant="ghost"
                  size="icon"
                  className="h-12 w-12 rounded-full bg-background/80 backdrop-blur-sm"
                  onClick={handleNext}
                >
                  <ChevronRight className="h-8 w-8" />
                  <span className="sr-only">Next image</span>
                </Button>
              </div>

              {/* Image counter */}
              <div className="absolute bottom-4 right-4 bg-background/80 backdrop-blur-sm px-3 py-1 rounded-full text-sm">
                {currentIndex + 1} / {images.length}
              </div>
            </div>
          </div>
        </div>
      )}
    </>
  );
}



================================================
FILE: components/property/PropertyListings.tsx
================================================
"use client";

import { useState, useCallback, useTransition } from "react";
import { useRouter, useSearchParams } from "next/navigation";
import { PropertyCard } from "@/components/property/PropertyCard";
import { PropertyCardSkeleton } from "@/components/property/PropertyCardSkeleton";
import { Button } from "@/components/ui/button";
import { PropertyListing } from "@/types/property";

// Extend PropertyListing to include optional distance_meters
type PropertyListingWithDistance = PropertyListing & {
  distance_meters?: number;
};

interface PropertyListingsProps {
  properties: PropertyListingWithDistance[];
  total?: number;
  initialLimit?: number;
  hasMore?: boolean;
}

export function PropertyListings({
  properties,
  total = 0,
  initialLimit = 12,
  hasMore = false,
}: PropertyListingsProps) {
  const router = useRouter();
  const searchParams = useSearchParams();
  const [isPending, startTransition] = useTransition();
  const [limit, setLimit] = useState(initialLimit);

  // Create a new URLSearchParams object to modify
  const createQueryString = useCallback(
    (name: string, value: string) => {
      const params = new URLSearchParams(searchParams.toString());
      params.set(name, value);
      return params.toString();
    },
    [searchParams],
  );

  const loadMore = () => {
    const newLimit = limit + initialLimit;
    setLimit(newLimit);

    startTransition(() => {
      router.push(
        `/properties?${createQueryString("limit", newLimit.toString())}`,
        { scroll: false },
      );
    });
  };

  if (!properties || properties.length === 0) {
    return (
      <div className="text-center py-12">
        <h2 className="text-xl font-semibold mb-2">No Properties Found</h2>
        <p className="text-muted-foreground">
          Try adjusting your search criteria to find more properties.
        </p>
      </div>
    );
  }

  return (
    <div>
      <div className="mb-6">
        <h2 className="text-xl font-semibold">
          {total} {total === 1 ? "Property" : "Properties"} Found
        </h2>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {properties.map((property) => (
          <PropertyCard
            key={property.id}
            property={property}
            showDistance={property.distance_meters !== undefined}
            distanceMeters={property.distance_meters}
          />
        ))}

        {isPending && (
          <>
            {Array.from({ length: initialLimit }).map((_, index) => (
              <PropertyCardSkeleton key={`skeleton-${index}`} />
            ))}
          </>
        )}
      </div>

      {hasMore && (
        <div className="mt-8 flex justify-center">
          <Button
            onClick={loadMore}
            variant="outline"
            disabled={isPending}
            className="min-w-[150px]"
          >
            {isPending ? "Loading..." : "Load More"}
          </Button>
        </div>
      )}
    </div>
  );
}



================================================
FILE: components/property/PropertyLocation.tsx
================================================
"use client";

import { MapPin } from "lucide-react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";

interface PropertyLocationProps {
  address: string;
  lat?: number;
  lng?: number;
}

export function PropertyLocation({ address, lat, lng }: PropertyLocationProps) {
  const hasCoordinates = lat !== undefined && lng !== undefined;

  return (
    <Card>
      <CardHeader className="pb-2">
        <CardTitle className="text-xl flex items-center gap-2">
          <MapPin className="h-5 w-5 text-primary" />
          Location
        </CardTitle>
      </CardHeader>
      <CardContent>
        <div className="space-y-4">
          <p className="text-muted-foreground">{address}</p>

          {hasCoordinates ? (
            <div className="aspect-video w-full bg-muted rounded-md overflow-hidden relative">
              {/* This would be replaced with an actual map component in a real implementation */}
              <div className="absolute inset-0 flex items-center justify-center">
                <p className="text-muted-foreground text-sm">
                  Map would be displayed here
                  <br />
                  Coordinates: {lat}, {lng}
                </p>
              </div>
            </div>
          ) : (
            <div className="aspect-video w-full bg-muted rounded-md flex items-center justify-center">
              <p className="text-muted-foreground text-sm">
                No map coordinates available
              </p>
            </div>
          )}

          <div className="text-sm text-muted-foreground">
            <p>Exact location provided after booking</p>
          </div>
        </div>
      </CardContent>
    </Card>
  );
}



================================================
FILE: components/property/PropertyStatistics.tsx
================================================
"use client";

import { Home, Building, MapPin } from "lucide-react";

interface PropertyStatisticsProps {
  totalProperties: number;
}

export function PropertyStatistics({
  totalProperties,
}: PropertyStatisticsProps) {
  return (
    <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
      <div className="bg-muted rounded-lg p-6 flex items-center">
        <div className="bg-primary/10 p-3 rounded-full mr-4">
          <Home className="h-6 w-6 text-primary" />
        </div>
        <div>
          <h3 className="text-2xl font-bold">{totalProperties}</h3>
          <p className="text-muted-foreground">Total Properties</p>
        </div>
      </div>
      <div className="bg-muted rounded-lg p-6 flex items-center">
        <div className="bg-primary/10 p-3 rounded-full mr-4">
          <Building className="h-6 w-6 text-primary" />
        </div>
        <div>
          <h3 className="text-2xl font-bold">5</h3>
          <p className="text-muted-foreground">Cities</p>
        </div>
      </div>
      <div className="bg-muted rounded-lg p-6 flex items-center">
        <div className="bg-primary/10 p-3 rounded-full mr-4">
          <MapPin className="h-6 w-6 text-primary" />
        </div>
        <div>
          <h3 className="text-2xl font-bold">24/7</h3>
          <p className="text-muted-foreground">Support Available</p>
        </div>
      </div>
    </div>
  );
}



================================================
FILE: components/property/PropertyTypeSelector.tsx
================================================
"use client";

import { useState } from "react";
import { Button } from "@/components/ui/button";
import { useRouter } from "next/navigation";

export function PropertyTypeSelector() {
  const [activeType, setActiveType] = useState<"buy" | "rent" | "all">("buy");
  const router = useRouter();

  const handleTypeChange = (type: "buy" | "rent" | "all") => {
    setActiveType(type);

    // Navigate to the appropriate search page
    switch (type) {
      case "buy":
        router.push("/search?propertyType=매매");
        break;
      case "rent":
        router.push("/search?propertyType=월세");
        break;
      case "all":
        router.push("/properties");
        break;
    }
  };

  return (
    <div className="bg-white rounded-lg p-1 flex mb-8 shadow-md">
      <Button
        variant={activeType === "buy" ? "default" : "ghost"}
        className="rounded-md px-8 py-2 text-base"
        onClick={() => handleTypeChange("buy")}
      >
        Buy
      </Button>
      <Button
        variant={activeType === "rent" ? "default" : "ghost"}
        className="rounded-md px-8 py-2 text-base"
        onClick={() => handleTypeChange("rent")}
      >
        Rent
      </Button>
      <Button
        variant={activeType === "all" ? "default" : "ghost"}
        className="rounded-md px-8 py-2 text-base"
        onClick={() => handleTypeChange("all")}
      >
        All
      </Button>
    </div>
  );
}



================================================
FILE: components/property/PropertyTypeTabs.tsx
================================================
"use client";

import { useState } from "react";
import { cn } from "@/lib/utils";

interface PropertyTypeTabsProps {
  defaultTab?: "rent" | "buy";
}

export function PropertyTypeTabs({
  defaultTab = "rent",
}: PropertyTypeTabsProps) {
  const [activeTab, setActiveTab] = useState<"rent" | "buy">(defaultTab);

  return (
    <div className="mb-8">
      <div className="flex border-b">
        <button
          onClick={() => setActiveTab("rent")}
          className={cn(
            "px-4 py-2 font-medium transition-colors",
            activeTab === "rent"
              ? "border-b-2 border-primary"
              : "text-muted-foreground hover:text-foreground",
          )}
        >
          For Rent (월세)
        </button>
        <button
          onClick={() => setActiveTab("buy")}
          className={cn(
            "px-4 py-2 font-medium transition-colors",
            activeTab === "buy"
              ? "border-b-2 border-primary"
              : "text-muted-foreground hover:text-foreground",
          )}
        >
          For Sale (매매)
        </button>
      </div>

      {/* Content for Rent Tab */}
      <div id="rent" className={cn("mt-6", activeTab !== "rent" && "hidden")}>
        <div id="rent-content"></div>
      </div>

      {/* Content for Buy Tab */}
      <div id="buy" className={cn("mt-6", activeTab !== "buy" && "hidden")}>
        <div id="buy-content"></div>
      </div>
    </div>
  );
}



================================================
FILE: components/property/SimilarProperties.tsx
================================================
"use client";

import Link from "next/link";
import { PropertyCard } from "@/components/property/PropertyCard";
import { PropertyCardSkeleton } from "@/components/property/PropertyCardSkeleton";
import { Button } from "@/components/ui/button";
import { PropertyListing } from "@/types/property";

interface SimilarPropertiesProps {
  properties: PropertyListing[];
  isLoading?: boolean;
}

export function SimilarProperties({
  properties,
  isLoading = false,
}: SimilarPropertiesProps) {
  if (isLoading) {
    return (
      <div className="space-y-4">
        <h2 className="text-2xl font-semibold">Similar Properties</h2>
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {Array.from({ length: 3 }).map((_, index) => (
            <PropertyCardSkeleton key={index} />
          ))}
        </div>
      </div>
    );
  }

  if (!properties || properties.length === 0) {
    return null;
  }

  return (
    <div className="space-y-4">
      <div className="flex items-center justify-between">
        <h2 className="text-2xl font-semibold">Similar Properties</h2>
        <Link href="/properties">
          <Button variant="ghost">View All</Button>
        </Link>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {properties.map((property) => (
          <PropertyCard key={property.id} property={property} />
        ))}
      </div>
    </div>
  );
}



================================================
FILE: components/providers/PropertyDataProvider.tsx
================================================
"use client";

import {
  createContext,
  useContext,
  useState,
  useCallback,
  useMemo,
  ReactNode,
} from "react";
import { useRouter, usePathname, useSearchParams } from "next/navigation";

interface PropertyDataContextType {
  isLoading: boolean;
  error: string | null;
  searchParams: Record<string, string>;
  updateSearchParams: (newParams: Record<string, string>) => void;
  resetSearchParams: () => void;
}

const PropertyDataContext = createContext<PropertyDataContextType | undefined>(
  undefined,
);

export function usePropertyData() {
  const context = useContext(PropertyDataContext);
  if (context === undefined) {
    throw new Error(
      "usePropertyData must be used within a PropertyDataProvider",
    );
  }
  return context;
}

interface PropertyDataProviderProps {
  children: ReactNode;
}

export function PropertyDataProvider({
  children,
}: PropertyDataProviderProps) {
  const router = useRouter();
  const pathname = usePathname();
  const searchParams = useSearchParams();

  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  // Convert searchParams to a regular object, memoized
  const currentSearchParams = useMemo(() => {
    const params: Record<string, string> = {};
    searchParams.forEach((value, key) => {
      params[key] = value;
    });
    return params;
  }, [searchParams]);

  // Update search parameters and navigate
  const updateSearchParams = useCallback(
    (newParams: Record<string, string>) => {
      setIsLoading(true);
      setError(null);

      try {
        // Merge current params with new params
        const updatedParams = { ...currentSearchParams, ...newParams };

        // Remove any params with empty values
        Object.keys(updatedParams).forEach((key) => {
          if (updatedParams[key] === "" || updatedParams[key] === undefined) {
            delete updatedParams[key];
          }
        });

        // Build query string
        const queryString = new URLSearchParams(updatedParams).toString();

        // Navigate to the new URL
        router.push(`${pathname}?${queryString}`);
      } catch (err) {
        console.error("Error updating search params:", err);
        setError("Failed to update search parameters");
      } finally {
        setIsLoading(false);
      }
    },
    [currentSearchParams, pathname, router],
  );

  // Reset all search parameters
  const resetSearchParams = useCallback(() => {
    setIsLoading(true);
    setError(null);

    try {
      // Navigate to the current path without query params
      router.push(pathname);
    } catch (err) {
      console.error("Error resetting search params:", err);
      setError("Failed to reset search parameters");
    } finally {
      setIsLoading(false);
    }
  }, [pathname, router]);

  const value = {
    isLoading,
    error,
    searchParams: currentSearchParams,
    updateSearchParams,
    resetSearchParams,
  };

  return (
    <PropertyDataContext.Provider value={value}>
      {children}
    </PropertyDataContext.Provider>
  );
}



================================================
FILE: components/sections/ExploreSection.tsx
================================================
"use client";

import { Card } from "@/components/ui/card";
import Image from "next/image";
import Link from "next/link";

interface CitiesData {
  name: string;
  imageUrl: string;
  propertyCount: number;
}

const cities: CitiesData[] = [
  {
    name: "Ho Chi Minh City",
    imageUrl:
      "https://images.unsplash.com/photo-1583417319070-4a69db38a482?q=80&w=2070&auto=format&fit=crop",
    propertyCount: 24,
  },
  {
    name: "Hanoi",
    imageUrl:
      "https://images.unsplash.com/photo-1599708153386-62bf3489c821?q=80&w=2070&auto=format&fit=crop",
    propertyCount: 18,
  },
  {
    name: "Da Nang",
    imageUrl:
      "https://images.unsplash.com/photo-1564596823821-79b97151055e?q=80&w=2070&auto=format&fit=crop",
    propertyCount: 12,
  },
  {
    name: "Nha Trang",
    imageUrl:
      "https://images.unsplash.com/photo-1540611025311-01df3cef54b5?q=80&w=2070&auto=format&fit=crop",
    propertyCount: 8,
  },
  {
    name: "Hoi An",
    imageUrl:
      "https://images.unsplash.com/photo-1558185348-c1e6420aa7d8?q=80&w=2070&auto=format&fit=crop",
    propertyCount: 6,
  },
];

export function ExploreSection() {
  return (
    <section className="container mx-auto px-4 mb-16">
      <div className="mb-8">
        <h2 className="text-3xl font-bold mb-4">Explore homes in Vietnam</h2>
        <p className="text-lg text-muted-foreground max-w-3xl">
          Take a deep dive and browse homes for sale, original neighborhood
          photos, resident reviews and local insights to find what is right for
          you.
        </p>
      </div>

      {/* City Cards */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {/* City Card 1 */}
        <CityCard
          name={cities[0].name}
          imageUrl={cities[0].imageUrl}
          propertyCount={cities[0].propertyCount}
        />

        {/* Testimonial Card */}
        <Card className="p-6 flex flex-col justify-between h-full">
          <div>
            <h3 className="font-bold text-lg mb-2">Trulia User</h3>
            <p className="text-sm text-muted-foreground mb-4">
              Vietnam Resident
            </p>
            <p className="text-muted-foreground">
              I just moved to the neighborhood 2 years ago and love it!
              It&apos;s a great mix of families, seniors and...
            </p>
          </div>
        </Card>

        {/* Remaining City Cards */}
        {cities.slice(1).map((city, index) => (
          <CityCard
            key={index}
            name={city.name}
            imageUrl={city.imageUrl}
            propertyCount={city.propertyCount}
          />
        ))}
      </div>
    </section>
  );
}

interface CityCardProps {
  name: string;
  imageUrl: string;
  propertyCount: number;
}

function CityCard({ name, imageUrl, propertyCount }: CityCardProps) {
  return (
    <Link
      href={`/search?city=${encodeURIComponent(name)}`}
      className="block h-full"
    >
      <div className="relative rounded-lg overflow-hidden h-full min-h-[240px] group">
        {/* Background Image */}
        <div className="absolute inset-0">
          <Image src={imageUrl} alt={name} fill className="object-cover" />
        </div>

        {/* Gradient Overlay */}
        <div className="absolute inset-0 bg-gradient-to-t from-black/70 to-transparent"></div>

        {/* City Name and Property Count */}
        <div className="absolute bottom-0 left-0 p-4 w-full">
          <h3 className="text-xl font-bold text-white">{name}</h3>
          <p className="text-sm text-white/80">{propertyCount} properties</p>
        </div>

        {/* Hover Overlay */}
        <div className="absolute inset-0 bg-black/40 opacity-0 group-hover:opacity-100 transition-opacity duration-300 flex items-center justify-center">
          <div className="text-white flex items-center space-x-2">
            <span className="font-medium">View Homes</span>
            <svg
              width="16"
              height="16"
              viewBox="0 0 16 16"
              fill="none"
              xmlns="http://www.w3.org/2000/svg"
            >
              <path
                d="M6 12L10 8L6 4"
                stroke="white"
                strokeWidth="2"
                strokeLinecap="round"
                strokeLinejoin="round"
              />
            </svg>
          </div>
        </div>
      </div>
    </Link>
  );
}



================================================
FILE: components/sections/FeaturedPropertiesSection.tsx
================================================
"use client";

import Link from "next/link";
import { Button } from "@/components/ui/button";
import { FeaturedPropertyTabs } from "@/components/property/FeaturedPropertyTabs";
import { PropertyStatistics } from "@/components/property/PropertyStatistics";
import { PropertyListing } from "@/types/property";

interface FeaturedPropertiesSectionProps {
  rentProperties: PropertyListing[];
  buyProperties: PropertyListing[];
  totalProperties: number;
}

export function FeaturedPropertiesSection({
  rentProperties,
  buyProperties,
  totalProperties,
}: FeaturedPropertiesSectionProps) {
  return (
    <section className="container mx-auto px-4 mb-16">
      <div className="mb-8">
        <h2 className="text-3xl font-bold mb-4">Featured Properties</h2>
        <div className="flex justify-between items-center">
          <p className="text-lg text-muted-foreground">
            Discover our handpicked selection of properties in Vietnam
          </p>
          <Link href="/properties">
            <Button variant="outline">View All Properties</Button>
          </Link>
        </div>
      </div>

      {/* Property Tabs */}
      <FeaturedPropertyTabs
        rentProperties={rentProperties}
        buyProperties={buyProperties}
      />

      {/* Property Statistics */}
      <PropertyStatistics totalProperties={totalProperties} />
    </section>
  );
}



================================================
FILE: components/sections/FeatureHighlightsSection.tsx
================================================
"use client";

import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Home, Search, MapPin } from "lucide-react";
import Link from "next/link";

interface FeatureHighlight {
  icon: React.ElementType;
  title: string;
  description: string;
  ctaText: string;
  ctaLink: string;
}

const features: FeatureHighlight[] = [
  {
    icon: Home,
    title: "Find Your Home",
    description:
      "With extensive listings and detailed information, find the perfect house or apartment.",
    ctaText: "Search Homes",
    ctaLink: "/search", // Adjust link as needed
  },
  {
    icon: Search,
    title: "Advanced Search",
    description:
      "Use powerful filters and custom searches to narrow down your options quickly and easily.",
    ctaText: "Refine Search",
    ctaLink: "/search", // Adjust link as needed
  },
  {
    icon: MapPin,
    title: "Explore Locations",
    description:
      "Discover neighborhoods with local insights, amenities, and points of interest.",
    ctaText: "Learn More",
    ctaLink: "#", // Placeholder link, adjust as needed
  },
];

export function FeatureHighlightsSection() {
  return (
    <section className="py-16 bg-zinc-50 dark:bg-zinc-900">
      <div className="container mx-auto px-4">
        <h2 className="text-3xl md:text-4xl font-bold text-center mb-12 text-zinc-900 dark:text-white">
          See How We Can Help
        </h2>
        <div className="grid grid-cols-1 md:grid-cols-3 gap-8">
          {features.map((feature, index) => (
            <Card
              key={index}
              className="text-center bg-white dark:bg-zinc-800 shadow-md hover:shadow-lg transition-shadow duration-300"
            >
              <CardHeader className="items-center">
                <feature.icon className="h-12 w-12 text-primary mb-4" />
                <CardTitle className="text-xl font-semibold text-zinc-900 dark:text-white">
                  {feature.title}
                </CardTitle>
              </CardHeader>
              <CardContent>
                <p className="text-zinc-600 dark:text-zinc-300 mb-6">
                  {feature.description}
                </p>
                <Button asChild variant="default">
                  <Link href={feature.ctaLink}>{feature.ctaText}</Link>
                </Button>
              </CardContent>
            </Card>
          ))}
        </div>
      </div>
    </section>
  );
}



================================================
FILE: components/sections/HeroSection.tsx
================================================
"use client";

import Image from "next/image";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Search } from "lucide-react";
import { FormEvent, useState } from "react";
import { useRouter } from "next/navigation";

export function HeroSection() {
  const [searchText, setSearchText] = useState("");
  const [activeTab, setActiveTab] = useState<"buy" | "rent">("buy");
  const router = useRouter();

  const handleSearch = (e: FormEvent) => {
    e.preventDefault();
    if (searchText.trim()) {
      router.push(
        `/search?searchText=${encodeURIComponent(searchText.trim())}&type=${activeTab}`,
      );
    }
  };

  return (
    <section className="relative w-full min-h-[600px] rounded-lg overflow-hidden mb-16">
      {/* Background Image */}
      <div className="absolute inset-0 bg-zinc-900">
        {/* We'll use a placeholder image for now */}
        <div className="absolute inset-0 bg-gradient-to-b from-black/50 to-transparent z-10"></div>
        <div className="absolute inset-0 flex items-center justify-center">
          <div className="w-full h-full relative">
            <Image
              src="https://images.unsplash.com/photo-1560448204-603b3fc33ddc?q=80&w=2070&auto=format&fit=crop"
              alt="Property in Vietnam"
              fill
              className="object-cover"
              priority
            />
          </div>
        </div>
      </div>

      {/* Content */}
      <div className="relative z-20 container mx-auto px-4 py-16 flex flex-col items-center justify-center min-h-[600px] text-center">
        <h1 className="text-4xl md:text-5xl lg:text-6xl font-bold text-white mb-12 max-w-3xl leading-tight drop-shadow-md">
          Discover a place
          <br />
          you&apos;ll love to live
        </h1>

        {/* Search Box Container */}
        <div className="bg-white rounded-lg shadow-lg w-full max-w-2xl">
          {/* Toggle Buttons */}
          <div className="flex border-b border-gray-200">
            <button
              onClick={() => setActiveTab("buy")}
              className={`flex-1 py-4 text-lg font-medium transition-colors ${
                activeTab === "buy"
                  ? "text-[#007882] border-b-2 border-[#007882]"
                  : "text-[#2A2A33] hover:text-[#007882]"
              }`}
            >
              Buy
            </button>
            <button
              onClick={() => setActiveTab("rent")}
              className={`flex-1 py-4 text-lg font-medium transition-colors ${
                activeTab === "rent"
                  ? "text-[#007882] border-b-2 border-[#007882]"
                  : "text-[#2A2A33] hover:text-[#007882]"
              }`}
            >
              Rent
            </button>
          </div>

          {/* Search Bar */}
          <form onSubmit={handleSearch} className="p-4">
            <div className="relative flex items-center">
              <Input
                type="text"
                name="searchText"
                value={searchText}
                onChange={(e) => setSearchText(e.target.value)}
                placeholder="Enter a location"
                className="w-full h-14 pl-4 pr-16 text-lg rounded-lg border-2 border-gray-200 focus:border-[#007882] focus:ring-[#007882] placeholder:text-gray-500"
                aria-label="Search Location"
              />
              <Button
                type="submit"
                size="icon"
                className="absolute right-2 top-2 h-10 w-10 rounded-lg bg-[#E95C33] hover:bg-[#D14A21] text-white"
                aria-label="Submit Search"
              >
                <Search className="h-5 w-5" />
              </Button>
            </div>
          </form>
        </div>
      </div>
    </section>
  );
}



================================================
FILE: components/sections/KoreanExpatriatesSection.tsx
================================================
"use client";

import Link from "next/link";
import { Button } from "@/components/ui/button";

export function KoreanExpatriatesSection() {
  return (
    <section className="bg-muted py-12 px-4 rounded-lg mb-16">
      <div className="container mx-auto">
        <h2 className="text-2xl font-semibold mb-4 text-center">
          For Korean Expatriates in Vietnam
        </h2>
        <p className="text-muted-foreground mb-6 text-center max-w-2xl mx-auto">
          Our platform specializes in properties near Korean communities,
          international schools, and Korean amenities
        </p>
        <div className="flex justify-center">
          <Link href="/search">
            <Button size="lg">Start Your Search</Button>
          </Link>
        </div>
      </div>
    </section>
  );
}



================================================
FILE: components/ui/button.tsx
================================================
import * as React from "react";
import { Slot } from "@radix-ui/react-slot";
import { cva, type VariantProps } from "class-variance-authority";

import { cn } from "@/lib/utils";

const buttonVariants = cva(
  "inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50",
  {
    variants: {
      variant: {
        default:
          "bg-primary text-primary-foreground shadow hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground shadow-sm hover:bg-destructive/90",
        outline:
          "border border-input bg-background shadow-sm hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground shadow-sm hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-9 px-4 py-2",
        sm: "h-8 rounded-md px-3 text-xs",
        lg: "h-10 rounded-md px-8",
        icon: "h-9 w-9",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  },
);

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean;
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button";
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    );
  },
);
Button.displayName = "Button";

export { Button, buttonVariants };



================================================
FILE: components/ui/card.tsx
================================================
import * as React from "react";

import { cn } from "@/lib/utils";

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "rounded-xl border bg-card text-card-foreground shadow",
      className,
    )}
    {...props}
  />
));
Card.displayName = "Card";

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
));
CardHeader.displayName = "CardHeader";

const CardTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h3
    ref={ref}
    className={cn("font-semibold leading-none tracking-tight", className)}
    {...props}
  />
));
CardTitle.displayName = "CardTitle";

const CardDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <p
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
));
CardDescription.displayName = "CardDescription";

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
));
CardContent.displayName = "CardContent";

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
));
CardFooter.displayName = "CardFooter";

export {
  Card,
  CardHeader,
  CardFooter,
  CardTitle,
  CardDescription,
  CardContent,
};



================================================
FILE: components/ui/carousel.tsx
================================================
"use client";

import * as React from "react";
import useEmblaCarousel, {
  type UseEmblaCarouselType,
} from "embla-carousel-react";
import { ArrowLeft, ArrowRight } from "lucide-react";

import { cn } from "@/lib/utils";
import { Button } from "@/components/ui/button";

type CarouselApi = UseEmblaCarouselType[1];
type UseCarouselParameters = Parameters<typeof useEmblaCarousel>;
type CarouselOptions = UseCarouselParameters[0];
type CarouselPlugin = UseCarouselParameters[1];

type CarouselProps = {
  opts?: CarouselOptions;
  plugins?: CarouselPlugin;
  orientation?: "horizontal" | "vertical";
  setApi?: (api: CarouselApi) => void;
};

type CarouselContextProps = {
  carouselRef: ReturnType<typeof useEmblaCarousel>[0];
  api: ReturnType<typeof useEmblaCarousel>[1];
  scrollPrev: () => void;
  scrollNext: () => void;
  canScrollPrev: boolean;
  canScrollNext: boolean;
} & CarouselProps;

const CarouselContext = React.createContext<CarouselContextProps | null>(null);

function useCarousel() {
  const context = React.useContext(CarouselContext);

  if (!context) {
    throw new Error("useCarousel must be used within a <Carousel />");
  }

  return context;
}

const Carousel = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & CarouselProps
>(
  (
    {
      orientation = "horizontal",
      opts,
      setApi,
      plugins,
      className,
      children,
      ...props
    },
    ref,
  ) => {
    const [carouselRef, api] = useEmblaCarousel(
      {
        ...opts,
        axis: orientation === "horizontal" ? "x" : "y",
      },
      plugins,
    );
    const [canScrollPrev, setCanScrollPrev] = React.useState(false);
    const [canScrollNext, setCanScrollNext] = React.useState(false);

    const onSelect = React.useCallback((api: CarouselApi) => {
      if (!api) {
        return;
      }

      setCanScrollPrev(api.canScrollPrev());
      setCanScrollNext(api.canScrollNext());
    }, []);

    const scrollPrev = React.useCallback(() => {
      api?.scrollPrev();
    }, [api]);

    const scrollNext = React.useCallback(() => {
      api?.scrollNext();
    }, [api]);

    const handleKeyDown = React.useCallback(
      (event: React.KeyboardEvent<HTMLDivElement>) => {
        if (event.key === "ArrowLeft") {
          event.preventDefault();
          scrollPrev();
        } else if (event.key === "ArrowRight") {
          event.preventDefault();
          scrollNext();
        }
      },
      [scrollPrev, scrollNext],
    );

    React.useEffect(() => {
      if (!api || !setApi) {
        return;
      }

      setApi(api);
    }, [api, setApi]);

    React.useEffect(() => {
      if (!api) {
        return;
      }

      onSelect(api);
      api.on("reInit", onSelect);
      api.on("select", onSelect);

      return () => {
        api?.off("select", onSelect);
      };
    }, [api, onSelect]);

    return (
      <CarouselContext.Provider
        value={{
          carouselRef,
          api: api,
          opts,
          orientation:
            orientation || (opts?.axis === "y" ? "vertical" : "horizontal"),
          scrollPrev,
          scrollNext,
          canScrollPrev,
          canScrollNext,
        }}
      >
        <div
          ref={ref}
          onKeyDownCapture={handleKeyDown}
          className={cn("relative", className)}
          role="region"
          aria-roledescription="carousel"
          {...props}
        >
          {children}
        </div>
      </CarouselContext.Provider>
    );
  },
);
Carousel.displayName = "Carousel";

const CarouselContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const { carouselRef, orientation } = useCarousel();

  return (
    <div ref={carouselRef} className="overflow-hidden">
      <div
        ref={ref}
        className={cn(
          "flex",
          orientation === "horizontal" ? "-ml-4" : "-mt-4 flex-col",
          className,
        )}
        {...props}
      />
    </div>
  );
});
CarouselContent.displayName = "CarouselContent";

const CarouselItem = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const { orientation } = useCarousel();

  return (
    <div
      ref={ref}
      role="group"
      aria-roledescription="slide"
      className={cn(
        "min-w-0 shrink-0 grow-0 basis-full",
        orientation === "horizontal" ? "pl-4" : "pt-4",
        className,
      )}
      {...props}
    />
  );
});
CarouselItem.displayName = "CarouselItem";

const CarouselPrevious = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<typeof Button>
>(({ className, variant = "outline", size = "icon", ...props }, ref) => {
  const { orientation, scrollPrev, canScrollPrev } = useCarousel();

  return (
    <Button
      ref={ref}
      variant={variant}
      size={size}
      className={cn(
        "absolute h-8 w-8 rounded-full",
        orientation === "horizontal"
          ? "-left-12 top-1/2 -translate-y-1/2"
          : "-top-12 left-1/2 -translate-x-1/2 rotate-90",
        className,
      )}
      disabled={!canScrollPrev}
      onClick={scrollPrev}
      {...props}
    >
      <ArrowLeft className="h-4 w-4" />
      <span className="sr-only">Previous slide</span>
    </Button>
  );
});
CarouselPrevious.displayName = "CarouselPrevious";

const CarouselNext = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<typeof Button>
>(({ className, variant = "outline", size = "icon", ...props }, ref) => {
  const { orientation, scrollNext, canScrollNext } = useCarousel();

  return (
    <Button
      ref={ref}
      variant={variant}
      size={size}
      className={cn(
        "absolute h-8 w-8 rounded-full",
        orientation === "horizontal"
          ? "-right-12 top-1/2 -translate-y-1/2"
          : "-bottom-12 left-1/2 -translate-x-1/2 rotate-90",
        className,
      )}
      disabled={!canScrollNext}
      onClick={scrollNext}
      {...props}
    >
      <ArrowRight className="h-4 w-4" />
      <span className="sr-only">Next slide</span>
    </Button>
  );
});
CarouselNext.displayName = "CarouselNext";

export {
  type CarouselApi,
  Carousel,
  CarouselContent,
  CarouselItem,
  CarouselPrevious,
  CarouselNext,
};



================================================
FILE: components/ui/checkbox.tsx
================================================
"use client";

import * as React from "react";
import * as CheckboxPrimitive from "@radix-ui/react-checkbox";
import { Check } from "lucide-react";

import { cn } from "@/lib/utils";

const Checkbox = React.forwardRef<
  React.ElementRef<typeof CheckboxPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>
>(({ className, ...props }, ref) => (
  <CheckboxPrimitive.Root
    ref={ref}
    className={cn(
      "peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground",
      className,
    )}
    {...props}
  >
    <CheckboxPrimitive.Indicator
      className={cn("flex items-center justify-center text-current")}
    >
      <Check className="h-4 w-4" />
    </CheckboxPrimitive.Indicator>
  </CheckboxPrimitive.Root>
));
Checkbox.displayName = CheckboxPrimitive.Root.displayName;

export { Checkbox };



================================================
FILE: components/ui/dialog.tsx
================================================
"use client";

import * as React from "react";
import * as DialogPrimitive from "@radix-ui/react-dialog";
import { X } from "lucide-react";

import { cn } from "@/lib/utils"; // Assuming utils file exists

const Dialog = DialogPrimitive.Root;

const DialogTrigger = DialogPrimitive.Trigger;

const DialogPortal = DialogPrimitive.Portal;

const DialogClose = DialogPrimitive.Close;

const DialogOverlay = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Overlay
    ref={ref}
    className={cn(
      "fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className,
    )}
    {...props}
  />
));
DialogOverlay.displayName = DialogPrimitive.Overlay.displayName;

const DialogContent = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DialogPortal>
    <DialogOverlay />
    <DialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className,
      )}
      {...props}
    >
      {children}
      <DialogPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </DialogPrimitive.Close>
    </DialogPrimitive.Content>
  </DialogPortal>
));
DialogContent.displayName = DialogPrimitive.Content.displayName;

const DialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-1.5 text-center sm:text-left",
      className,
    )}
    {...props}
  />
);
DialogHeader.displayName = "DialogHeader";

const DialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className,
    )}
    {...props}
  />
);
DialogFooter.displayName = "DialogFooter";

const DialogTitle = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className,
    )}
    {...props}
  />
));
DialogTitle.displayName = DialogPrimitive.Title.displayName;

const DialogDescription = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
));
DialogDescription.displayName = DialogPrimitive.Description.displayName;

export {
  Dialog,
  DialogPortal,
  DialogOverlay,
  DialogClose,
  DialogTrigger,
  DialogContent,
  DialogHeader,
  DialogFooter,
  DialogTitle,
  DialogDescription,
};



================================================
FILE: components/ui/dropdown-menu.tsx
================================================
"use client";

import * as React from "react";
import * as DropdownMenuPrimitive from "@radix-ui/react-dropdown-menu";
import { CheckIcon, ChevronRightIcon, CircleIcon } from "lucide-react";

import { cn } from "@/lib/utils";

function DropdownMenu({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Root>) {
  return <DropdownMenuPrimitive.Root data-slot="dropdown-menu" {...props} />;
}

function DropdownMenuPortal({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Portal>) {
  return (
    <DropdownMenuPrimitive.Portal data-slot="dropdown-menu-portal" {...props} />
  );
}

function DropdownMenuTrigger({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Trigger>) {
  return (
    <DropdownMenuPrimitive.Trigger
      data-slot="dropdown-menu-trigger"
      {...props}
    />
  );
}

function DropdownMenuContent({
  className,
  sideOffset = 4,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Content>) {
  return (
    <DropdownMenuPrimitive.Portal>
      <DropdownMenuPrimitive.Content
        data-slot="dropdown-menu-content"
        sideOffset={sideOffset}
        className={cn(
          "bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 max-h-(--radix-dropdown-menu-content-available-height) min-w-[8rem] origin-(--radix-dropdown-menu-content-transform-origin) overflow-x-hidden overflow-y-auto rounded-md border p-1 shadow-md",
          className,
        )}
        {...props}
      />
    </DropdownMenuPrimitive.Portal>
  );
}

function DropdownMenuGroup({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Group>) {
  return (
    <DropdownMenuPrimitive.Group data-slot="dropdown-menu-group" {...props} />
  );
}

function DropdownMenuItem({
  className,
  inset,
  variant = "default",
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Item> & {
  inset?: boolean;
  variant?: "default" | "destructive";
}) {
  return (
    <DropdownMenuPrimitive.Item
      data-slot="dropdown-menu-item"
      data-inset={inset}
      data-variant={variant}
      className={cn(
        "focus:bg-accent focus:text-accent-foreground data-[variant=destructive]:text-destructive data-[variant=destructive]:focus:bg-destructive/10 dark:data-[variant=destructive]:focus:bg-destructive/20 data-[variant=destructive]:focus:text-destructive data-[variant=destructive]:*:[svg]:!text-destructive [&_svg:not([class*='text-'])]:text-muted-foreground relative flex cursor-default items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 data-[inset]:pl-8 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className,
      )}
      {...props}
    />
  );
}

function DropdownMenuCheckboxItem({
  className,
  children,
  checked,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.CheckboxItem>) {
  return (
    <DropdownMenuPrimitive.CheckboxItem
      data-slot="dropdown-menu-checkbox-item"
      className={cn(
        "focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-sm py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className,
      )}
      checked={checked}
      {...props}
    >
      <span className="pointer-events-none absolute left-2 flex size-3.5 items-center justify-center">
        <DropdownMenuPrimitive.ItemIndicator>
          <CheckIcon className="size-4" />
        </DropdownMenuPrimitive.ItemIndicator>
      </span>
      {children}
    </DropdownMenuPrimitive.CheckboxItem>
  );
}

function DropdownMenuRadioGroup({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.RadioGroup>) {
  return (
    <DropdownMenuPrimitive.RadioGroup
      data-slot="dropdown-menu-radio-group"
      {...props}
    />
  );
}

function DropdownMenuRadioItem({
  className,
  children,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.RadioItem>) {
  return (
    <DropdownMenuPrimitive.RadioItem
      data-slot="dropdown-menu-radio-item"
      className={cn(
        "focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-sm py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className,
      )}
      {...props}
    >
      <span className="pointer-events-none absolute left-2 flex size-3.5 items-center justify-center">
        <DropdownMenuPrimitive.ItemIndicator>
          <CircleIcon className="size-2 fill-current" />
        </DropdownMenuPrimitive.ItemIndicator>
      </span>
      {children}
    </DropdownMenuPrimitive.RadioItem>
  );
}

function DropdownMenuLabel({
  className,
  inset,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Label> & {
  inset?: boolean;
}) {
  return (
    <DropdownMenuPrimitive.Label
      data-slot="dropdown-menu-label"
      data-inset={inset}
      className={cn(
        "px-2 py-1.5 text-sm font-medium data-[inset]:pl-8",
        className,
      )}
      {...props}
    />
  );
}

function DropdownMenuSeparator({
  className,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Separator>) {
  return (
    <DropdownMenuPrimitive.Separator
      data-slot="dropdown-menu-separator"
      className={cn("bg-border -mx-1 my-1 h-px", className)}
      {...props}
    />
  );
}

function DropdownMenuShortcut({
  className,
  ...props
}: React.ComponentProps<"span">) {
  return (
    <span
      data-slot="dropdown-menu-shortcut"
      className={cn(
        "text-muted-foreground ml-auto text-xs tracking-widest",
        className,
      )}
      {...props}
    />
  );
}

function DropdownMenuSub({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Sub>) {
  return <DropdownMenuPrimitive.Sub data-slot="dropdown-menu-sub" {...props} />;
}

function DropdownMenuSubTrigger({
  className,
  inset,
  children,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.SubTrigger> & {
  inset?: boolean;
}) {
  return (
    <DropdownMenuPrimitive.SubTrigger
      data-slot="dropdown-menu-sub-trigger"
      data-inset={inset}
      className={cn(
        "focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground flex cursor-default items-center rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[inset]:pl-8",
        className,
      )}
      {...props}
    >
      {children}
      <ChevronRightIcon className="ml-auto size-4" />
    </DropdownMenuPrimitive.SubTrigger>
  );
}

function DropdownMenuSubContent({
  className,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.SubContent>) {
  return (
    <DropdownMenuPrimitive.SubContent
      data-slot="dropdown-menu-sub-content"
      className={cn(
        "bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 min-w-[8rem] origin-(--radix-dropdown-menu-content-transform-origin) overflow-hidden rounded-md border p-1 shadow-lg",
        className,
      )}
      {...props}
    />
  );
}

export {
  DropdownMenu,
  DropdownMenuPortal,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuGroup,
  DropdownMenuLabel,
  DropdownMenuItem,
  DropdownMenuCheckboxItem,
  DropdownMenuRadioGroup,
  DropdownMenuRadioItem,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuSub,
  DropdownMenuSubTrigger,
  DropdownMenuSubContent,
};



================================================
FILE: components/ui/input.tsx
================================================
import * as React from "react";

import { cn } from "@/lib/utils";

const Input = React.forwardRef<
  HTMLInputElement,
  React.InputHTMLAttributes<HTMLInputElement>
>(({ className, type, ...props }, ref) => {
  return (
    <input
      type={type}
      className={cn(
        "flex h-9 w-full rounded-md border border-input bg-background px-3 py-1 text-sm shadow-sm transition-colors file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50",
        className,
      )}
      ref={ref}
      {...props}
    />
  );
});
Input.displayName = "Input";

export { Input };



================================================
FILE: components/ui/label.tsx
================================================
"use client";

import * as React from "react";
import * as LabelPrimitive from "@radix-ui/react-label";
import { cva, type VariantProps } from "class-variance-authority";

import { cn } from "@/lib/utils";

const labelVariants = cva(
  "text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70",
);

const Label = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &
    VariantProps<typeof labelVariants>
>(({ className, ...props }, ref) => (
  <LabelPrimitive.Root
    ref={ref}
    className={cn(labelVariants(), className)}
    {...props}
  />
));
Label.displayName = LabelPrimitive.Root.displayName;

export { Label };



================================================
FILE: components/ui/select.tsx
================================================
"use client";

import * as React from "react";
import * as SelectPrimitive from "@radix-ui/react-select";
import { CheckIcon, ChevronDownIcon, ChevronUpIcon } from "lucide-react";

import { cn } from "@/lib/utils";

function Select({
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Root>) {
  return <SelectPrimitive.Root data-slot="select" {...props} />;
}

function SelectGroup({
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Group>) {
  return <SelectPrimitive.Group data-slot="select-group" {...props} />;
}

function SelectValue({
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Value>) {
  return <SelectPrimitive.Value data-slot="select-value" {...props} />;
}

function SelectTrigger({
  className,
  size = "default",
  children,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Trigger> & {
  size?: "sm" | "default";
}) {
  return (
    <SelectPrimitive.Trigger
      data-slot="select-trigger"
      data-size={size}
      className={cn(
        "border-input data-[placeholder]:text-muted-foreground [&_svg:not([class*='text-'])]:text-muted-foreground focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive dark:bg-input/30 dark:hover:bg-input/50 flex w-fit items-center justify-between gap-2 rounded-md border bg-transparent px-3 py-2 text-sm whitespace-nowrap shadow-xs transition-[color,box-shadow] outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50 data-[size=default]:h-9 data-[size=sm]:h-8 *:data-[slot=select-value]:line-clamp-1 *:data-[slot=select-value]:flex *:data-[slot=select-value]:items-center *:data-[slot=select-value]:gap-2 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className,
      )}
      {...props}
    >
      {children}
      <SelectPrimitive.Icon asChild>
        <ChevronDownIcon className="size-4 opacity-50" />
      </SelectPrimitive.Icon>
    </SelectPrimitive.Trigger>
  );
}

function SelectContent({
  className,
  children,
  position = "popper",
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Content>) {
  return (
    <SelectPrimitive.Portal>
      <SelectPrimitive.Content
        data-slot="select-content"
        className={cn(
          "bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 relative z-50 max-h-(--radix-select-content-available-height) min-w-[8rem] origin-(--radix-select-content-transform-origin) overflow-x-hidden overflow-y-auto rounded-md border shadow-md",
          position === "popper" &&
            "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
          className,
        )}
        position={position}
        {...props}
      >
        <SelectScrollUpButton />
        <SelectPrimitive.Viewport
          className={cn(
            "p-1",
            position === "popper" &&
              "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)] scroll-my-1",
          )}
        >
          {children}
        </SelectPrimitive.Viewport>
        <SelectScrollDownButton />
      </SelectPrimitive.Content>
    </SelectPrimitive.Portal>
  );
}

function SelectLabel({
  className,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Label>) {
  return (
    <SelectPrimitive.Label
      data-slot="select-label"
      className={cn("text-muted-foreground px-2 py-1.5 text-xs", className)}
      {...props}
    />
  );
}

function SelectItem({
  className,
  children,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Item>) {
  return (
    <SelectPrimitive.Item
      data-slot="select-item"
      className={cn(
        "focus:bg-accent focus:text-accent-foreground [&_svg:not([class*='text-'])]:text-muted-foreground relative flex w-full cursor-default items-center gap-2 rounded-sm py-1.5 pr-8 pl-2 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4 *:[span]:last:flex *:[span]:last:items-center *:[span]:last:gap-2",
        className,
      )}
      {...props}
    >
      <span className="absolute right-2 flex size-3.5 items-center justify-center">
        <SelectPrimitive.ItemIndicator>
          <CheckIcon className="size-4" />
        </SelectPrimitive.ItemIndicator>
      </span>
      <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
    </SelectPrimitive.Item>
  );
}

function SelectSeparator({
  className,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Separator>) {
  return (
    <SelectPrimitive.Separator
      data-slot="select-separator"
      className={cn("bg-border pointer-events-none -mx-1 my-1 h-px", className)}
      {...props}
    />
  );
}

function SelectScrollUpButton({
  className,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.ScrollUpButton>) {
  return (
    <SelectPrimitive.ScrollUpButton
      data-slot="select-scroll-up-button"
      className={cn(
        "flex cursor-default items-center justify-center py-1",
        className,
      )}
      {...props}
    >
      <ChevronUpIcon className="size-4" />
    </SelectPrimitive.ScrollUpButton>
  );
}

function SelectScrollDownButton({
  className,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.ScrollDownButton>) {
  return (
    <SelectPrimitive.ScrollDownButton
      data-slot="select-scroll-down-button"
      className={cn(
        "flex cursor-default items-center justify-center py-1",
        className,
      )}
      {...props}
    >
      <ChevronDownIcon className="size-4" />
    </SelectPrimitive.ScrollDownButton>
  );
}

export {
  Select,
  SelectContent,
  SelectGroup,
  SelectItem,
  SelectLabel,
  SelectScrollDownButton,
  SelectScrollUpButton,
  SelectSeparator,
  SelectTrigger,
  SelectValue,
};



================================================
FILE: components/ui/separator.tsx
================================================
"use client";

import * as React from "react";
import * as SeparatorPrimitive from "@radix-ui/react-separator";

import { cn } from "@/lib/utils";

function Separator({
  className,
  orientation = "horizontal",
  decorative = true,
  ...props
}: React.ComponentProps<typeof SeparatorPrimitive.Root>) {
  return (
    <SeparatorPrimitive.Root
      data-slot="separator-root"
      decorative={decorative}
      orientation={orientation}
      className={cn(
        "bg-border shrink-0 data-[orientation=horizontal]:h-px data-[orientation=horizontal]:w-full data-[orientation=vertical]:h-full data-[orientation=vertical]:w-px",
        className,
      )}
      {...props}
    />
  );
}

export { Separator };



================================================
FILE: components/ui/sonner.tsx
================================================
"use client";

import { useTheme } from "next-themes";
import { Toaster as Sonner, ToasterProps } from "sonner";

const Toaster = ({ ...props }: ToasterProps) => {
  const { theme = "system" } = useTheme();

  return (
    <Sonner
      theme={theme as ToasterProps["theme"]}
      className="toaster group"
      style={
        {
          "--normal-bg": "var(--popover)",
          "--normal-text": "var(--popover-foreground)",
          "--normal-border": "var(--border)",
        } as React.CSSProperties
      }
      {...props}
    />
  );
};

export { Toaster };



================================================
FILE: components/ui/textarea.tsx
================================================
import * as React from "react";

import { cn } from "@/lib/utils";

function Textarea({ className, ...props }: React.ComponentProps<"textarea">) {
  return (
    <textarea
      data-slot="textarea"
      className={cn(
        "border-input placeholder:text-muted-foreground focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive dark:bg-input/30 flex field-sizing-content min-h-16 w-full rounded-md border bg-transparent px-3 py-2 text-base shadow-xs transition-[color,box-shadow] outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
        className,
      )}
      {...props}
    />
  );
}

export { Textarea };



================================================
FILE: lib/utils.ts
================================================
import { clsx, type ClassValue } from "clsx";
import { twMerge } from "tailwind-merge";

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs));
}



================================================
FILE: lib/data/property.ts
================================================
import "server-only";
import { createClient } from "@/lib/supabase/server";
import { createAnonClient } from "@/lib/supabase/server-anon";
import { PropertyListing, PropertyType, PropertyImage } from "@/types/property";
import { unstable_cache } from "next/cache";
import { PostgrestError, SupabaseClient } from "@supabase/supabase-js";

// Define a type for the processed image object, extending the base PropertyImage
type ProcessedPropertyImage = PropertyImage & { publicUrl: string | null };

// Define the return type for processed properties, including the processed images array
type ProcessedPropertyListing = Omit<PropertyListing, "property_images"> & {
  primary_image?: string | null;
  property_images?: ProcessedPropertyImage[]; // Use processed images here
};

export interface PropertySearchParams {
  searchText?: string;
  minPrice?: number;
  maxPrice?: number;
  propertyType?: PropertyType;
  minBedrooms?: number;
  minBathrooms?: number;
  lat?: number;
  lng?: number;
  radiusMeters?: number;
  limit?: number;
  offset?: number;
}

export interface PropertySearchResult {
  data: ProcessedPropertyListing[]; // Use processed type
  total: number;
  hasMore: boolean;
}

// Helper function to process images and add public URLs + primary image
function processPropertyImages(
  property: PropertyListing,
  images: PropertyImage[], // Pass fetched images separately
  supabase: SupabaseClient, // Pass Supabase client instance
): ProcessedPropertyListing {
  const imagesWithPublicUrls = (images || []).map(
    (img): ProcessedPropertyImage => {
      let storagePath = img.storage_path; // Use storage_path from type
      if (!storagePath) return { ...img, publicUrl: null };

      // Ensure the path passed to getPublicUrl doesn't include the bucket name if storage_path already has it.
      const bucketName = "platform";
      if (storagePath.startsWith(`${bucketName}/`)) {
        storagePath = storagePath.substring(bucketName.length + 1);
      } else if (storagePath.startsWith(`/${bucketName}/`)) {
        // Handle cases where it might start with /platform/
        storagePath = storagePath.substring(bucketName.length + 2);
      }

      const { data: publicUrlData } = supabase.storage
        .from(bucketName) // Use bucket name variable
        .getPublicUrl(storagePath); // Use the potentially modified storagePath
      return {
        ...img,
        publicUrl: publicUrlData?.publicUrl || null,
      };
    },
  );

  const primaryImage =
    imagesWithPublicUrls.find((img) => img.is_primary)?.publicUrl ||
    imagesWithPublicUrls[0]?.publicUrl ||
    "/assets/images/property-placeholder.jpg"; // Fallback

  // Return property data with processed images and primary image URL
  return {
    ...property,
    property_images: imagesWithPublicUrls, // Assign processed images array
    primary_image: primaryImage,
  };
}

// Cache the property listings for 1 minute
const getCachedPropertyListings = unstable_cache(
  async (params: PropertySearchParams = {}): Promise<PropertySearchResult> => {
    const supabase = await createAnonClient();
    const {
      searchText,
      minPrice,
      maxPrice,
      propertyType,
      minBedrooms,
      minBathrooms,
      lat,
      lng,
      radiusMeters,
      limit = 10,
      offset = 0,
    } = params;

    let propertyData: PropertyListing[] = [];
    let totalCount = 0;
    let fetchError: PostgrestError | null = null;

    // --- Fetch Main Property Data ---
    if (lat !== undefined && lng !== undefined) {
      // RPC Call - Assuming it returns basic property data
      const {
        data: rpcData,
        error: rpcError,
        count,
      } = await supabase
        .rpc("search_properties", {
          search_text: searchText || null,
          min_price: minPrice || null,
          max_price: maxPrice || null,
          property_type_filter: propertyType || null,
          min_bedrooms: minBedrooms || null,
          min_bathrooms: minBathrooms || null,
          lat,
          lng,
          radius_meters: radiusMeters || 5000,
        })
        .range(offset, offset + limit - 1)
        .order("distance_meters", { ascending: true });

      fetchError = rpcError;
      propertyData = (rpcData || []) as PropertyListing[];
      totalCount = count || 0;
    } else {
      // Regular Query - Fetch property data
      let query = supabase.from("property_listings").select(`*`);

      // Apply filters
      if (searchText) {
        query = query.or(
          `title.ilike.%${searchText}%,description.ilike.%${searchText}%`,
        );
      }
      if (minPrice !== undefined) {
        query = query.gte("price", minPrice);
      }
      if (maxPrice !== undefined) {
        query = query.lte("price", maxPrice);
      }
      if (propertyType) {
        query = query.eq("property_type", propertyType);
      }
      if (minBedrooms !== undefined) {
        query = query.gte("bedrooms", minBedrooms);
      }
      if (minBathrooms !== undefined) {
        query = query.gte("bathrooms", minBathrooms);
      }

      // Fetch data
      const { data, error: dataError } = await query
        .range(offset, offset + limit - 1)
        .order("created_at", { ascending: false });

      fetchError = dataError;
      propertyData = (data || []) as PropertyListing[];

      // Fetch count separately
      if (!fetchError) {
        let countQuery = supabase
          .from("property_listings")
          .select("*", { count: "exact", head: true });
        // Re-apply filters for accurate count
        if (searchText) {
          countQuery = countQuery.or(
            `title.ilike.%${searchText}%,description.ilike.%${searchText}%`,
          );
        }
        if (minPrice !== undefined) {
          countQuery = countQuery.gte("price", minPrice);
        }
        if (maxPrice !== undefined) {
          countQuery = countQuery.lte("price", maxPrice);
        }
        if (propertyType) {
          countQuery = countQuery.eq("property_type", propertyType);
        }
        if (minBedrooms !== undefined) {
          countQuery = countQuery.gte("bedrooms", minBedrooms);
        }
        if (minBathrooms !== undefined) {
          countQuery = countQuery.gte("bathrooms", minBathrooms);
        }
        const { count, error: countError } = await countQuery;
        if (countError) {
          console.error("Error fetching count:", countError);
        } else {
          totalCount = count || 0;
        }
      }
    }

    if (fetchError) {
      console.error("Error fetching property data:", fetchError);
      throw fetchError;
    }

    // --- Fetch Images Separately ---
    const propertyIds = propertyData
      .map((p) => p.id)
      .filter((id) => id !== undefined) as string[];
    let allImages: PropertyImage[] = [];
    if (propertyIds.length > 0) {
      const { data: imageData, error: imageError } = await supabase
        .from("property_images")
        .select("*")
        .in("property_id", propertyIds)
        .order("display_order", { ascending: true });

      if (imageError) {
        console.error("Error fetching property images:", imageError);
      } else {
        allImages = (imageData || []) as PropertyImage[];
      }
    }

    // --- Process and Combine Data ---
    const processedData = propertyData.map((property) => {
      const relatedImages = allImages.filter(
        (img) => img.property_id === property.id,
      );
      return processPropertyImages(property, relatedImages, supabase);
    });

    return {
      data: processedData,
      total: totalCount,
      hasMore: totalCount > offset + limit,
    };
  },
  // Corrected cache key: Static base key array. Args (params) are automatically included by Next.js.
  [`property-listings`],
  {
    tags: ["property-listings"], // Static tag for general revalidation
    revalidate: 60,
  },
);

// Public function that uses the cached version
export async function getPropertyListings(
  params: PropertySearchParams = {},
): Promise<PropertySearchResult> {
  return getCachedPropertyListings(params);
}

// Cache property details for 5 minutes
const getCachedPropertyById = unstable_cache(
  async (id: string): Promise<ProcessedPropertyListing | null> => {
    const supabase = await createAnonClient();

    // Fetch property data
    const { data: propertyData, error: propertyError } = await supabase
      .from("property_listings")
      .select(`*`) // Select only from property_listings
      .eq("id", id)
      .single();

    if (propertyError) {
      if (propertyError.code === "PGRST116") {
        return null;
      }
      console.error(`Error fetching property ${id}:`, propertyError);
      throw propertyError;
    }
    if (!propertyData) {
      // console.log(`[getCachedPropertyById] Property not found for ID: ${id}`); // Removed log
      return null;
    }
    // console.log(`[getCachedPropertyById] Fetched property data for ID ${id}:`, JSON.stringify(propertyData, null, 2)); // Removed log

    // Fetch images separately
    const { data: imageData, error: imageError } = await supabase
      .from("property_images")
      .select("*")
      .eq("property_id", id)
      .order("display_order", { ascending: true });

    if (imageError) {
      console.error(`Error fetching images for property ${id}:`, imageError);
    }
    // console.log(`[getCachedPropertyById] Fetched image data for ID ${id}:`, JSON.stringify(imageData, null, 2)); // Removed log

    // Process images
    const processedData = processPropertyImages(
      propertyData as PropertyListing,
      (imageData || []) as PropertyImage[],
      supabase,
    );
    // console.log(`[getCachedPropertyById] Processed data for ID ${id}:`, JSON.stringify(processedData, null, 2)); // Removed log

    return processedData;
  },
  // Corrected cache key: Base key array. Args (id) are automatically included.
  [`property-by-id`], // Static base key
  {
    // Corrected tags: Static array of strings. Dynamic invalidation relies on args.
    tags: [`property-details`],
    revalidate: 300,
  },
);

// Public function to get property by ID
export async function getPropertyById(
  id: string,
): Promise<ProcessedPropertyListing | null> {
  return getCachedPropertyById(id);
}

// Get similar properties - simplified, returns basic data
export async function getSimilarProperties(
  property: PropertyListing,
  limit = 3,
): Promise<PropertyListing[]> {
  const supabase = await createAnonClient();

  let query = supabase
    .from("property_listings")
    .select("*") // Select basic fields
    .neq("id", property.id)
    .eq("property_type", property.property_type);

  const minPrice = property.price * 0.7;
  const maxPrice = property.price * 1.3;
  query = query.gte("price", minPrice).lte("price", maxPrice);

  if (property.bedrooms) {
    query = query.or(
      `bedrooms.eq.${property.bedrooms},bedrooms.eq.${property.bedrooms - 1},bedrooms.eq.${property.bedrooms + 1}`,
    );
  }
  query = query.limit(limit);

  const { data, error } = await query;
  if (error) throw error;
  return data || [];
}

// CRUD Operations
export async function createProperty(
  property: Omit<
    PropertyListing,
    "id" | "created_at" | "property_images" | "primary_image"
  >,
): Promise<PropertyListing> {
  const supabase = await createClient();
  const { data, error } = await supabase
    .from("property_listings")
    .insert(property)
    .select()
    .single();
  if (error) throw error;
  return data as PropertyListing;
}

export async function updateProperty(
  id: string,
  updates: Partial<PropertyListing>,
): Promise<PropertyListing> {
  const supabase = await createClient();
  // Exclude processed fields explicitly before update
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  const { property_images, primary_image, ...validUpdates } = updates;
  // Use the validUpdates object which doesn't contain the excluded fields
  const { data, error } = await supabase
    .from("property_listings")
    .update(validUpdates)
    .eq("id", id)
    .select()
    .single();
  if (error) throw error;
  return data as PropertyListing;
}

export async function deleteProperty(id: string): Promise<boolean> {
  const supabase = await createClient();
  // TODO: Consider deleting related images from storage and property_images table first
  const { error } = await supabase
    .from("property_listings")
    .delete()
    .eq("id", id);
  if (error) throw error;
  return true;
}

// Fetches and processes images for a specific property ID
export async function getPropertyImages(
  propertyId: string,
): Promise<ProcessedPropertyImage[]> {
  const supabase = await createAnonClient();
  const { data, error } = await supabase
    .from("property_images")
    .select("*")
    .eq("property_id", propertyId)
    .order("display_order");

  if (error) {
    console.error("Error fetching property images:", error);
    return [];
  }

  const imagesWithPublicUrls = (data || []).map(
    (img: PropertyImage): ProcessedPropertyImage => {
      const imagePath = img.storage_path;
      if (!imagePath) return { ...img, publicUrl: null };
      const { data: publicUrlData } = supabase.storage
        .from("platform")
        .getPublicUrl(imagePath);
      return { ...img, publicUrl: publicUrlData?.publicUrl || null };
    },
  );

  return imagesWithPublicUrls;
}

// Add a new image record
export async function addPropertyImage(
  propertyId: string,
  imageData: Omit<
    PropertyImage,
    "id" | "created_at" | "updated_at" | "url" | "publicUrl"
  >,
): Promise<{ data: PropertyImage | null; error: PostgrestError | null }> {
  const supabase = await createClient();
  return await supabase
    .from("property_images")
    .insert(imageData)
    .select()
    .single();
}

// Update display order
export async function updatePropertyImageOrder(
  imageId: string,
  newOrder: number,
): Promise<{ data: PropertyImage | null; error: PostgrestError | null }> {
  const supabase = await createClient();
  return await supabase
    .from("property_images")
    .update({ display_order: newOrder })
    .eq("id", imageId)
    .select()
    .single();
}

// Delete image record
export async function deletePropertyImage(
  imageId: string,
): Promise<{ data: PropertyImage | null; error: PostgrestError | null }> {
  const supabase = await createClient();
  // TODO: Add logic to delete from storage bucket using img.storage_path before deleting DB record
  return await supabase
    .from("property_images")
    .delete()
    .eq("id", imageId)
    .select()
    .single();
}



================================================
FILE: lib/supabase/client.ts
================================================
import { createBrowserClient } from "@supabase/ssr";

export function createClient() {
  return createBrowserClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
  );
}



================================================
FILE: lib/supabase/server-anon.ts
================================================
import "server-only";
import { createClient as createSupabaseClient } from "@supabase/supabase-js";

// This client doesn't use cookies and is suitable for use in cached functions
export async function createAnonClient() {
  return createSupabaseClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
  );
}



================================================
FILE: lib/supabase/server-api.ts
================================================
import "server-only";
import { createClient as createSupabaseClient } from "@supabase/supabase-js";

// This client is for API routes that don't need user authentication
export async function createApiClient() {
  return createSupabaseClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
  );
}



================================================
FILE: lib/supabase/server.ts
================================================
import "server-only";
import { createServerClient } from "@supabase/ssr";
import { cookies } from "next/headers";

export async function createClient() {
  const cookieStore = await cookies();

  return createServerClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
    {
      cookies: {
        get(name: string) {
          return cookieStore.get(name)?.value;
        },
        set(name: string, value: string, options?: Record<string, unknown>) {
          cookieStore.set(name, value, options);
        },
      },
    },
  );
}



================================================
FILE: lib/validation/property.ts
================================================
import {
  PropertyListing,
  ValidationResult,
  PropertySearchParams,
} from "@/types/property";

/**
 * Validates a property listing for the Vietnamese market
 * @param property The property listing to validate
 * @returns Validation result with errors if any
 */
export function validatePropertyListing(
  property: PropertyListing,
): ValidationResult {
  const errors: string[] = [];

  // Required fields
  if (!property.title) errors.push("Title is required");
  if (!property.description) errors.push("Description is required");

  // Price validation
  if (property.price === undefined || property.price === null) {
    errors.push("Price is required");
  } else if (property.price <= 0) {
    errors.push("Price must be a positive number");
  }

  // Property type validation
  if (!property.property_type) {
    errors.push("Property type is required");
  } else if (!["월세", "매매"].includes(property.property_type)) {
    errors.push(
      "Property type must be either 월세 (monthly rent) or 매매 (purchase)",
    );
  }

  // Bedrooms and bathrooms validation
  if (property.bedrooms === undefined || property.bedrooms === null) {
    errors.push("Number of bedrooms is required");
  } else if (property.bedrooms < 0) {
    errors.push("Number of bedrooms cannot be negative");
  }

  if (property.bathrooms === undefined || property.bathrooms === null) {
    errors.push("Number of bathrooms is required");
  } else if (property.bathrooms < 0) {
    errors.push("Number of bathrooms cannot be negative");
  }

  // Square footage validation
  if (
    property.square_footage === undefined ||
    property.square_footage === null
  ) {
    errors.push("Square footage is required");
  } else if (property.square_footage <= 0) {
    errors.push("Square footage must be a positive number");
  }

  // Location validation
  if (!property.location) {
    errors.push("Location is required");
  } else {
    // Check if location is in the format 'POINT(longitude latitude)'
    const pointRegex = /^POINT\((\d+\.\d+) (\d+\.\d+)\)$/;
    const match = property.location.match(pointRegex);

    if (!match) {
      errors.push('Location must be in the format "POINT(longitude latitude)"');
    } else {
      const longitude = parseFloat(match[1]);
      const latitude = parseFloat(match[2]);

      // Vietnam longitude range: approximately 102° to 110° E
      // Vietnam latitude range: approximately 8° to 24° N
      if (longitude < 102 || longitude > 110) {
        errors.push(
          "Longitude must be within Vietnam (approximately 102° to 110° E)",
        );
      }

      if (latitude < 8 || latitude > 24) {
        errors.push(
          "Latitude must be within Vietnam (approximately 8° to 24° N)",
        );
      }
    }
  }

  // Address validation
  if (!property.address) errors.push("Address is required");

  // Features validation
  if (!property.features) {
    errors.push("Features object is required");
  }

  return {
    valid: errors.length === 0,
    errors,
  };
}

/**
 * Validates search parameters for property listings
 * @param params The search parameters to validate
 * @returns Validation result with errors if any
 */
export function validateSearchParams(
  params: PropertySearchParams,
): ValidationResult {
  const errors: string[] = [];

  // Price range validation
  if (params.minPrice !== undefined && params.minPrice < 0) {
    errors.push("Minimum price cannot be negative");
  }

  if (params.maxPrice !== undefined && params.maxPrice < 0) {
    errors.push("Maximum price cannot be negative");
  }

  if (
    params.minPrice !== undefined &&
    params.maxPrice !== undefined &&
    params.minPrice > params.maxPrice
  ) {
    errors.push("Minimum price cannot be greater than maximum price");
  }

  // Property type validation
  if (
    params.propertyType !== undefined &&
    !["월세", "매매"].includes(params.propertyType)
  ) {
    errors.push(
      "Property type must be either 월세 (monthly rent) or 매매 (purchase)",
    );
  }

  // Bedrooms and bathrooms validation
  if (params.minBedrooms !== undefined && params.minBedrooms < 0) {
    errors.push("Minimum bedrooms cannot be negative");
  }

  if (params.minBathrooms !== undefined && params.minBathrooms < 0) {
    errors.push("Minimum bathrooms cannot be negative");
  }

  // Location validation
  if (
    (params.lat !== undefined && params.lng === undefined) ||
    (params.lat === undefined && params.lng !== undefined)
  ) {
    errors.push(
      "Both latitude and longitude must be provided for location-based search",
    );
  }

  if (params.radiusMeters !== undefined && params.radiusMeters <= 0) {
    errors.push("Radius must be a positive number");
  }

  // Pagination validation
  if (params.limit !== undefined && params.limit <= 0) {
    errors.push("Limit must be a positive number");
  }

  if (params.offset !== undefined && params.offset < 0) {
    errors.push("Offset cannot be negative");
  }

  return {
    valid: errors.length === 0,
    errors,
  };
}



================================================
FILE: lib/validation/request-info.ts
================================================
import { z } from "zod";

export const RequestInfoSchema = z.object({
  name: z.string().min(2, "Name is required"),
  phone: z.string().optional(),
  email: z.string().email("Invalid email"),
  message: z.string().min(10, "Message is required"),
});

export type RequestInfo = z.infer<typeof RequestInfoSchema>;



================================================
FILE: public/manifest.webmanifest
================================================
{
  "name": "Property Platform",
  "short_name": "PropPlatform",
  "description": "Find your dream property in Vietnam",
  "start_url": "/",
  "display": "standalone",
  "background_color": "#ffffff",
  "theme_color": "#18181b",
  "icons": [
    {
      "src": "/icons/icon-192x192.png",
      "sizes": "192x192",
      "type": "image/png",
      "purpose": "any maskable"
    },
    {
      "src": "/icons/icon-512x512.png",
      "sizes": "512x512",
      "type": "image/png",
      "purpose": "any maskable"
    }
  ]
}



================================================
FILE: supabase/migrations/20240320000001_create_property_images.sql
================================================
-- Migration: Create property_images table
-- Description: Adds support for multiple images per property listing
-- with proper ordering and metadata

-- Create the property_images table
create table if not exists public.property_images (
    id uuid primary key default gen_random_uuid(),
    property_id uuid not null references public.property_listings(id) on delete cascade,
    url text not null,
    alt_text text,
    "order" integer not null default 0,
    created_at timestamp with time zone default timezone('utc'::text, now()) not null,
    updated_at timestamp with time zone default timezone('utc'::text, now()) not null,
    created_by uuid references auth.users(id) on delete set null,
    -- Add a unique constraint to ensure image order is unique per property
    unique(property_id, "order")
);

-- Enable RLS
alter table public.property_images enable row level security;

-- Create indexes
create index property_images_property_id_idx on public.property_images(property_id);
create index property_images_order_idx on public.property_images("order");

-- Add updated_at trigger
create trigger set_updated_at
    before update on public.property_images
    for each row
    execute function public.set_updated_at();

-- Create RLS policies

-- Allow anyone to view property images
create policy "Property images are viewable by everyone."
    on public.property_images
    for select
    to authenticated, anon
    using (true);

-- Allow authenticated users to upload images to their own properties
create policy "Users can upload images to their own properties."
    on public.property_images
    for insert
    to authenticated
    with check (
        auth.uid() = (
            select created_by
            from public.property_listings
            where id = property_id
        )
    );

-- Allow users to update their own property images
create policy "Users can update their own property images."
    on public.property_images
    for update
    to authenticated
    using (
        auth.uid() = (
            select created_by
            from public.property_listings
            where id = property_id
        )
    )
    with check (
        auth.uid() = (
            select created_by
            from public.property_listings
            where id = property_id
        )
    );

-- Allow users to delete their own property images
create policy "Users can delete their own property images."
    on public.property_images
    for delete
    to authenticated
    using (
        auth.uid() = (
            select created_by
            from public.property_listings
            where id = property_id
        )
    );



================================================
FILE: supabase/migrations/20250425061530_fix_property_images_fk.sql
================================================
-- Migration: Fix foreign key constraint on property_images table
-- Description: Updates the foreign key on property_images.property_id to correctly reference property_listings(id) instead of properties(id).

-- Step 1: Drop the existing incorrect foreign key constraint
-- NOTE: Replace 'property_images_property_id_fkey' if your constraint has a different name!
ALTER TABLE public.property_images
DROP CONSTRAINT IF EXISTS property_images_property_id_fkey;

-- Step 2: Add the correct foreign key constraint referencing property_listings
ALTER TABLE public.property_images
ADD CONSTRAINT property_images_property_id_fkey
FOREIGN KEY (property_id)
REFERENCES public.property_listings(id)
ON DELETE CASCADE; -- Keep ON DELETE CASCADE if that was the original intent



================================================
FILE: types/property.ts
================================================
/**
 * Property types available in the Vietnamese market for Korean expatriates
 * Note: No '전세' (jeonse/lease) option as this system doesn't exist in Vietnam
 */
export type PropertyType = "월세" | "매매"; // Monthly rent or Purchase

/**
 * Vietnamese cities with significant Korean expatriate populations
 */
export type VietnamCity =
  | "Ho Chi Minh City"
  | "Hanoi"
  | "Da Nang"
  | "Nha Trang"
  | "Vung Tau"
  | "Hai Phong";

/**
 * Represents a single image associated with a property, matching the DB schema.
 * Includes a dynamically added field for the public URL after processing.
 */
export interface PropertyImage {
  id: string;
  property_id: string;
  url?: string | null; // Original URL column from schema (might be unused)
  storage_path: string; // Path/key in Supabase Storage bucket (Confirmed from schema)
  alt_text: string | null;
  display_order?: number; // Use schema column name
  is_primary?: boolean; // Use schema column name
  created_at: string;
  updated_at: string;
  created_by: string | null;
  publicUrl?: string | null; // Dynamically added field for processed URL
}

/**
 * Property listing interface that matches the database schema
 * Based on the columns in the property_listings table
 * Designed for Vietnamese properties targeting Korean expatriates
 */
export interface PropertyListing {
  id?: string;
  title: string;
  description: string;
  price: number; // In USD
  property_type: PropertyType;
  bedrooms: number;
  bathrooms: number;
  square_footage: number;
  location: any; // Type for PostGIS location data might need refinement
  address: string;
  features: PropertyFeatures; // Consider defining this more strictly if possible
  created_at?: string;
  updated_at?: string;
  created_by?: string; // User ID of creator
  // This field holds the image data fetched from the DB, potentially processed later
  property_images?: PropertyImage[]; // Use the correct field name matching the DB relation
  // This field will be added dynamically after processing images
  primary_image?: string | null;
}

/**
 * Features available in Vietnamese properties
 * Includes standard amenities and features specifically relevant to Korean expatriates
 */
export interface PropertyFeatures {
  // Standard amenities
  parking?: boolean;
  airConditioning?: boolean;
  elevator?: boolean;
  balcony?: boolean;
  security?: boolean;
  pool?: boolean;
  gym?: boolean;
  furnished?: boolean;

  // Korean expatriate specific features
  koreanCommunity?: boolean; // Proximity to Korean community
  koreanRestaurants?: boolean; // Proximity to Korean restaurants
  internationalSchool?: boolean; // Proximity to international schools
  koreanSchool?: boolean; // Proximity to Korean schools
  koreanSupermarket?: boolean; // Proximity to Korean supermarkets

  // Allow other potential features, but avoid 'any' if possible
  [key: string]: boolean | undefined; // Changed 'any' to 'boolean | undefined'
}

/**
 * Search parameters for property listings
 */
export interface PropertySearchParams {
  searchText?: string;
  minPrice?: number;
  maxPrice?: number;
  propertyType?: PropertyType;
  minBedrooms?: number;
  minBathrooms?: number;
  city?: VietnamCity;
  district?: string;
  features?: Partial<PropertyFeatures>;
  lat?: number;
  lng?: number;
  radiusMeters?: number;
  limit?: number;
  offset?: number;
}

/**
 * Validation result for property listings
 */
export interface ValidationResult {
  valid: boolean;
  errors: string[];
}



================================================
FILE: types/supabase.ts
================================================
import { PropertyType } from "./property";

export interface PropertyListing {
  id: string;
  title: string;
  description: string | null;
  price: number;
  property_type: PropertyType;
  bedrooms: number | null;
  bathrooms: number | null;
  square_footage: number | null;
  location: any; // Geography type
  address: string;
  features: Record<string, any>;
  created_by: string | null;
  created_at: string;
  updated_at: string;
}

export interface Database {
  public: {
    Tables: {
      property_listings: {
        Row: PropertyListing;
        Insert: Omit<PropertyListing, "id" | "created_at" | "updated_at">;
        Update: Partial<
          Omit<PropertyListing, "id" | "created_at" | "updated_at">
        >;
      };
    };
    Functions: {
      find_properties_within_radius: (
        lat: number,
        lng: number,
        radius_meters: number,
      ) => PropertyListing[];
      get_properties_with_distance: (
        lat: number,
        lng: number,
      ) => (PropertyListing & { distance_meters: number })[];
      search_properties: (
        search_text?: string | null,
        min_price?: number | null,
        max_price?: number | null,
        property_type_filter?: PropertyType | null,
        min_bedrooms?: number | null,
        min_bathrooms?: number | null,
        lat?: number | null,
        lng?: number | null,
        radius_meters?: number | null,
      ) => (PropertyListing & { distance_meters: number | null })[];
    };
  };
}



================================================
FILE: .cursor/rules/code-format-sql.mdc
================================================
---
description: 
globs: **/*.sql
alwaysApply: false
---
# Postgres SQL Style Guide

## General

- Use lowercase for SQL reserved words to maintain consistency and readability.
- Employ consistent, descriptive identifiers for tables, columns, and other database objects.
- Use white space and indentation to enhance the readability of your code.
- Store dates in ISO 8601 format (`yyyy-mm-ddThh:mm:ss.sssss`).
- Include comments for complex logic, using '/* ... */' for block comments and '--' for line comments.

## Naming Conventions

- Avoid SQL reserved words and ensure names are unique and under 63 characters.
- Use snake_case for tables and columns.
- Prefer plurals for table names
- Prefer singular names for columns.

## Tables

- Avoid prefixes like 'tbl_' and ensure no table name matches any of its column names.
- Always add an `id` column of type `identity generated always` unless otherwise specified.
- Create all tables in the `public` schema unless otherwise specified.
- Always add the schema to SQL queries for clarity.
- Always add a comment to describe what the table does. The comment can be up to 1024 characters.

## Columns

- Use singular names and avoid generic names like 'id'.
- For references to foreign tables, use the singular of the table name with the `_id` suffix. For example `user_id` to reference the `users` table
- Always use lowercase except in cases involving acronyms or when readability would be enhanced by an exception.

#### Examples:

```sql
create table books (
  id bigint generated always as identity primary key,
  title text not null,
  author_id bigint references authors (id)
);
comment on table books is 'A list of all the books in the library.';
```


## Queries

- When the query is shorter keep it on just a few lines. As it gets larger start adding newlines for readability
- Add spaces for readability.

Smaller queries:


```sql
select *
from employees
where end_date is null;

update employees
set end_date = '2023-12-31'
where employee_id = 1001;
```

Larger queries:

```sql
select
  first_name,
  last_name
from
  employees
where
  start_date between '2021-01-01' and '2021-12-31'
and
  status = 'employed';
```


### Joins and Subqueries

- Format joins and subqueries for clarity, aligning them with related SQL clauses.
- Prefer full table names when referencing tables. This helps for readability.

```sql
select
  employees.employee_name,
  departments.department_name
from
  employees
join
  departments on employees.department_id = departments.department_id
where
  employees.start_date > '2022-01-01';
```

## Aliases

- Use meaningful aliases that reflect the data or transformation applied, and always include the 'as' keyword for clarity.

```sql
select count(*) as total_employees
from employees
where end_date is null;
```


## Complex queries and CTEs

- If a query is extremely complex, prefer a CTE.
- Make sure the CTE is clear and linear. Prefer readability over performance.
- Add comments to each block.

```sql
with department_employees as (
  -- Get all employees and their departments
  select
    employees.department_id,
    employees.first_name,
    employees.last_name,
    departments.department_name
  from
    employees
  join
    departments on employees.department_id = departments.department_id
),
employee_counts as (
  -- Count how many employees in each department
  select
    department_name,
    count(*) as num_employees
  from
    department_employees
  group by
    department_name
)
select
  department_name,
  num_employees
from
  employee_counts
order by
  department_name;
```


================================================
FILE: .cursor/rules/dababase-functions.mdc
================================================
---
description: 
globs: **/*.sql
alwaysApply: false
---
# Database: Create functions

You're a Supabase Postgres expert in writing database functions. Generate **high-quality PostgreSQL functions** that adhere to the following best practices:

## General Guidelines

1. **Default to `SECURITY INVOKER`:**

   - Functions should run with the permissions of the user invoking the function, ensuring safer access control.
   - Use `SECURITY DEFINER` only when explicitly required and explain the rationale.

2. **Set the `search_path` Configuration Parameter:**

   - Always set `search_path` to an empty string (`set search_path = '';`).
   - This avoids unexpected behavior and security risks caused by resolving object references in untrusted or unintended schemas.
   - Use fully qualified names (e.g., `schema_name.table_name`) for all database objects referenced within the function.

3. **Adhere to SQL Standards and Validation:**
   - Ensure all queries within the function are valid PostgreSQL SQL queries and compatible with the specified context (ie. Supabase).

## Best Practices

1. **Minimize Side Effects:**

   - Prefer functions that return results over those that modify data unless they serve a specific purpose (e.g., triggers).

2. **Use Explicit Typing:**

   - Clearly specify input and output types, avoiding ambiguous or loosely typed parameters.

3. **Default to Immutable or Stable Functions:**

   - Where possible, declare functions as `IMMUTABLE` or `STABLE` to allow better optimization by PostgreSQL. Use `VOLATILE` only if the function modifies data or has side effects.

4. **Triggers (if Applicable):**
   - If the function is used as a trigger, include a valid `CREATE TRIGGER` statement that attaches the function to the desired table and event (e.g., `BEFORE INSERT`).

## Example Templates

### Simple Function with `SECURITY INVOKER`

```sql
create or replace function my_schema.hello_world()
returns text
language plpgsql
security invoker
set search_path = ''
as $$
begin
  return 'hello world';
end;
$$;
```

### Function with Parameters and Fully Qualified Object Names

```sql
create or replace function public.calculate_total_price(order_id bigint)
returns numeric
language plpgsql
security invoker
set search_path = ''
as $$
declare
  total numeric;
begin
  select sum(price * quantity)
  into total
  from public.order_items
  where order_id = calculate_total_price.order_id;

  return total;
end;
$$;
```

### Function as a Trigger

```sql
create or replace function my_schema.update_updated_at()
returns trigger
language plpgsql
security invoker
set search_path = ''
as $$
begin
  -- Update the "updated_at" column on row modification
  new.updated_at := now();
  return new;
end;
$$;

create trigger update_updated_at_trigger
before update on my_schema.my_table
for each row
execute function my_schema.update_updated_at();
```

### Function with Error Handling

```sql
create or replace function my_schema.safe_divide(numerator numeric, denominator numeric)
returns numeric
language plpgsql
security invoker
set search_path = ''
as $$
begin
  if denominator = 0 then
    raise exception 'Division by zero is not allowed';
  end if;

  return numerator / denominator;
end;
$$;
```

### Immutable Function for Better Optimization

```sql
create or replace function my_schema.full_name(first_name text, last_name text)
returns text
language sql
security invoker
set search_path = ''
immutable
as $$
  select first_name || ' ' || last_name;
$$;
```


================================================
FILE: .cursor/rules/database-create-migration.mdc
================================================
---
description: 
globs: supabase/migrations/**/*.sql
alwaysApply: false
---
# Database: Create migration

You are a Postgres Expert who loves creating secure database schemas.

This project uses the migrations provided by the Supabase CLI.

## Creating a migration file

Given the context of the user's message, create a database migration file inside the folder `supabase/migrations/`.

The file MUST following this naming convention:

The file MUST be named in the format `YYYYMMDDHHmmss_short_description.sql` with proper casing for months, minutes, and seconds in UTC time:

1. `YYYY` - Four digits for the year (e.g., `2024`).
2. `MM` - Two digits for the month (01 to 12).
3. `DD` - Two digits for the day of the month (01 to 31).
4. `HH` - Two digits for the hour in 24-hour format (00 to 23).
5. `mm` - Two digits for the minute (00 to 59).
6. `ss` - Two digits for the second (00 to 59).
7. Add an appropriate description for the migration.

For example:

```
20240906123045_create_profiles.sql
```


## SQL Guidelines

Write Postgres-compatible SQL code for Supabase migration files that:

- Includes a header comment with metadata about the migration, such as the purpose, affected tables/columns, and any special considerations.
- Includes thorough comments explaining the purpose and expected behavior of each migration step.
- Write all SQL in lowercase.
- Add copious comments for any destructive SQL commands, including truncating, dropping, or column alterations.
- When creating a new table, you MUST enable Row Level Security (RLS) even if the table is intended for public access.
- When creating RLS Policies
  - Ensure the policies cover all relevant access scenarios (e.g. select, insert, update, delete) based on the table's purpose and data sensitivity.
  - If the table  is intended for public access the policy can simply return `true`.
  - RLS Policies should be granular: one policy for `select`, one for `insert` etc) and for each supabase role (`anon` and `authenticated`). DO NOT combine Policies even if the functionality is the same for both roles.
  - Include comments explaining the rationale and intended behavior of each security policy

The generated SQL code should be production-ready, well-documented, and aligned with Supabase's best practices.


================================================
FILE: .cursor/rules/database-rls-policies.mdc
================================================
---
description: 
globs: **/*.sql
alwaysApply: false
---
# Database: Create RLS policies

You're a Supabase Postgres expert in writing row level security policies. Your purpose is to generate a policy with the constraints given by the user. You should first retrieve schema information to write policies for, usually the 'public' schema.

The output should use the following instructions:

- The generated SQL must be valid SQL.
- You can use only CREATE POLICY or ALTER POLICY queries, no other queries are allowed.
- Always use double apostrophe in SQL strings (eg. 'Night''s watch')
- You can add short explanations to your messages.
- The result should be a valid markdown. The SQL code should be wrapped in ``` (including sql language tag).
- Always use "auth.uid()" instead of "current_user".
- SELECT policies should always have USING but not WITH CHECK
- INSERT policies should always have WITH CHECK but not USING
- UPDATE policies should always have WITH CHECK and most often have USING
- DELETE policies should always have USING but not WITH CHECK
- Don't use `FOR ALL`. Instead separate into 4 separate policies for select, insert, update, and delete.
- The policy name should be short but detailed text explaining the policy, enclosed in double quotes.
- Always put explanations as separate text. Never use inline SQL comments.
- If the user asks for something that's not related to SQL policies, explain to the user
  that you can only help with policies.
- Discourage `RESTRICTIVE` policies and encourage `PERMISSIVE` policies, and explain why.

The output should look like this:

```sql
CREATE POLICY "My descriptive policy." ON books FOR INSERT to authenticated USING ( (select auth.uid()) = author_id ) WITH ( true );
```

Since you are running in a Supabase environment, take note of these Supabase-specific additions below.

## Authenticated and unauthenticated roles

Supabase maps every request to one of the roles:

- `anon`: an unauthenticated request (the user is not logged in)
- `authenticated`: an authenticated request (the user is logged in)

These are actually [Postgres Roles](mdc:docs/guides/database/postgres/roles). You can use these roles within your Policies using the `TO` clause:

```sql
create policy "Profiles are viewable by everyone"
on profiles
for select
to authenticated, anon
using ( true );

-- OR

create policy "Public profiles are viewable only by authenticated users"
on profiles
for select
to authenticated
using ( true );
```

Note that `for ...` must be added after the table but before the roles. `to ...` must be added after `for ...`:

### Incorrect

```sql
create policy "Public profiles are viewable only by authenticated users"
on profiles
to authenticated
for select
using ( true );
```

### Correct

```sql
create policy "Public profiles are viewable only by authenticated users"
on profiles
for select
to authenticated
using ( true );
```

## Multiple operations

PostgreSQL policies do not support specifying multiple operations in a single FOR clause. You need to create separate policies for each operation.

### Incorrect

```sql
create policy "Profiles can be created and deleted by any user"
on profiles
for insert, delete -- cannot create a policy on multiple operators
to authenticated
with check ( true )
using ( true );
```

### Correct

```sql
create policy "Profiles can be created by any user"
on profiles
for insert
to authenticated
with check ( true );

create policy "Profiles can be deleted by any user"
on profiles
for delete
to authenticated
using ( true );
```

## Helper functions

Supabase provides some helper functions that make it easier to write Policies.

### `auth.uid()`

Returns the ID of the user making the request.

### `auth.jwt()`

Returns the JWT of the user making the request. Anything that you store in the user's `raw_app_meta_data` column or the `raw_user_meta_data` column will be accessible using this function. It's important to know the distinction between these two:

- `raw_user_meta_data` - can be updated by the authenticated user using the `supabase.auth.update()` function. It is not a good place to store authorization data.
- `raw_app_meta_data` - cannot be updated by the user, so it's a good place to store authorization data.

The `auth.jwt()` function is extremely versatile. For example, if you store some team data inside `app_metadata`, you can use it to determine whether a particular user belongs to a team. For example, if this was an array of IDs:

```sql
create policy "User is in team"
on my_table
to authenticated
using ( team_id in (select auth.jwt() -> 'app_metadata' -> 'teams'));
```

### MFA

The `auth.jwt()` function can be used to check for [Multi-Factor Authentication](mdc:docs/guides/auth/auth-mfa#enforce-rules-for-mfa-logins). For example, you could restrict a user from updating their profile unless they have at least 2 levels of authentication (Assurance Level 2):

```sql
create policy "Restrict updates."
on profiles
as restrictive
for update
to authenticated using (
  (select auth.jwt()->>'aal') = 'aal2'
);
```

## RLS performance recommendations

Every authorization system has an impact on performance. While row level security is powerful, the performance impact is important to keep in mind. This is especially true for queries that scan every row in a table - like many `select` operations, including those using limit, offset, and ordering.

Based on a series of [tests](mdc:https:/github.com/GaryAustin1/RLS-Performance), we have a few recommendations for RLS:

### Add indexes

Make sure you've added [indexes](mdc:docs/guides/database/postgres/indexes) on any columns used within the Policies which are not already indexed (or primary keys). For a Policy like this:

```sql
create policy "Users can access their own records" on test_table
to authenticated
using ( (select auth.uid()) = user_id );
```

You can add an index like:

```sql
create index userid
on test_table
using btree (user_id);
```

### Call functions with `select`

You can use `select` statement to improve policies that use functions. For example, instead of this:

```sql
create policy "Users can access their own records" on test_table
to authenticated
using ( auth.uid() = user_id );
```

You can do:

```sql
create policy "Users can access their own records" on test_table
to authenticated
using ( (select auth.uid()) = user_id );
```

This method works well for JWT functions like `auth.uid()` and `auth.jwt()` as well as `security definer` Functions. Wrapping the function causes an `initPlan` to be run by the Postgres optimizer, which allows it to "cache" the results per-statement, rather than calling the function on each row.

Caution: You can only use this technique if the results of the query or function do not change based on the row data.

### Minimize joins

You can often rewrite your Policies to avoid joins between the source and the target table. Instead, try to organize your policy to fetch all the relevant data from the target table into an array or set, then you can use an `IN` or `ANY` operation in your filter.

For example, this is an example of a slow policy which joins the source `test_table` to the target `team_user`:

```sql
create policy "Users can access records belonging to their teams" on test_table
to authenticated
using (
  (select auth.uid()) in (
    select user_id
    from team_user
    where team_user.team_id = team_id -- joins to the source "test_table.team_id"
  )
);
```

We can rewrite this to avoid this join, and instead select the filter criteria into a set:

```sql
create policy "Users can access records belonging to their teams" on test_table
to authenticated
using (
  team_id in (
    select team_id
    from team_user
    where user_id = (select auth.uid()) -- no join
  )
);
```

### Specify roles in your policies

Always use the Role of inside your policies, specified by the `TO` operator. For example, instead of this query:

```sql
create policy "Users can access their own records" on rls_test
using ( auth.uid() = user_id );
```

Use:

```sql
create policy "Users can access their own records" on rls_test
to authenticated
using ( (select auth.uid()) = user_id );
```

This prevents the policy `( (select auth.uid()) = user_id )` from running for any `anon` users, since the execution stops at the `to authenticated` step.



================================================
FILE: .cursor/rules/edge-functions.mdc
================================================
---
description: 
globs: supabase/functions/**/*.ts
alwaysApply: false
---

# Writing Supabase Edge Functions

You're an expert in writing TypeScript and Deno JavaScript runtime. Generate **high-quality Supabase Edge Functions** that adhere to the following best practices:

## Guidelines

1. Try to use Web APIs and Deno’s core APIs instead of external dependencies (eg: use fetch instead of Axios, use WebSockets API instead of node-ws)
2. If you are reusing utility methods between Edge Functions, add them to `supabase/functions/_shared` and import using a relative path. Do NOT have cross dependencies between Edge Functions.
3. Do NOT use bare specifiers when importing dependecnies. If you need to use an external dependency, make sure it's prefixed with either `npm:` or `jsr:`. For example, `@supabase/supabase-js` should be written as `npm:@supabase/supabase-js`.
4. For external imports, always define a version. For example, `npm:@express` should be written as `npm:express@4.18.2`.
5. For external dependencies, importing via `npm:` and `jsr:` is preferred. Minimize the use of imports from @`deno.land/x` , `esm.sh` and @`unpkg.com` . If you have a package from one of those CDNs, you can replace the CDN hostname with `npm:` specifier.
6. You can also use Node built-in APIs. You will need to import them using `node:` specifier. For example, to import Node process: `import process from "node:process". Use Node APIs when you find gaps in Deno APIs.
7. Do NOT use `import { serve } from "https://deno.land/std@0.168.0/http/server.ts"`. Instead use the built-in `Deno.serve`.
8. Following environment variables (ie. secrets) are pre-populated in both local and hosted Supabase environments. Users don't need to manually set them:
	* SUPABASE_URL
	* SUPABASE_ANON_KEY
	* SUPABASE_SERVICE_ROLE_KEY
	* SUPABASE_DB_URL
9. To set other environment variables (ie. secrets) users can put them in a env file and run the `supabase secrets set --env-file path/to/env-file`
10. A single Edge Function can handle multiple routes. It is recommended to use a library like Express or Hono to handle the routes as it's easier for developer to understand and maintain. Each route must be prefixed with `/function-name` so they are routed correctly.
11. File write operations are ONLY permitted on `/tmp` directory. You can use either Deno or Node File APIs.
12. Use `EdgeRuntime.waitUntil(promise)` static method to run long-running tasks in the background without blocking response to a request. Do NOT assume it is available in the request / execution context.

## Example Templates

### Simple Hello World Function

```tsx
interface reqPayload {
	name: string;
}

console.info('server started');

Deno.serve(async (req: Request) => {
	const { name }: reqPayload = await req.json();
	const data = {
		message: `Hello ${name} from foo!`,
	};

	return new Response(
		JSON.stringify(data),
		{ headers: { 'Content-Type': 'application/json', 'Connection': 'keep-alive' }}
		);
});

```

### Example Function using Node built-in API

```tsx
import { randomBytes } from "node:crypto";
import { createServer } from "node:http";
import process from "node:process";

const generateRandomString = (length) => {
    const buffer = randomBytes(length);
    return buffer.toString('hex');
};

const randomString = generateRandomString(10);
console.log(randomString);

const server = createServer((req, res) => {
    const message = `Hello`;
    res.end(message);
});

server.listen(9999);
```

### Using npm packages in Functions

```tsx
import express from "npm:express@4.18.2";

const app = express();

app.get(/(.*)/, (req, res) => {
    res.send("Welcome to Supabase");
});

app.listen(8000);

```

### Generate embeddings using built-in @Supabase.ai API

```tsx
const model = new Supabase.ai.Session('gte-small');

Deno.serve(async (req: Request) => {
	const params = new URL(req.url).searchParams;
	const input = params.get('text');
	const output = await model.run(input, { mean_pool: true, normalize: true });
	return new Response(
		JSON.stringify(
			output,
		),
		{
			headers: {
				'Content-Type': 'application/json',
				'Connection': 'keep-alive',
			},
		},
	);
});

```


================================================
FILE: .cursor/rules/nextjs-project-structre.mdc
================================================
---
description: Next.js project structure guide
globs: 
alwaysApply: false
---
**Subject: Next.js Project Structure Rules (v3 - API Routes Focused, No Server Actions)**

**Objective:** Structure the Next.js project using the App Router, prioritizing feature co-location where appropriate, while centralizing core data and business logic in a type-safe, server-only Data Access Layer (DAL). **Mutations initiated from the client MUST be handled via API Routes (`route.ts`).**

**Core Principles:**

1.  **App Router Foundation:** The `app/` directory is the primary location for routing, layouts, and UI components.
2.  **Feature/Domain Organization:** Group related files (UI, client logic) by feature or domain rather than solely by file type.
3.  **Co-location:** Place components, hooks, or utilities *specific* to a single feature alongside that feature's route files using private folders (`_components`, `_lib`, etc.).
4.  **Centralized Data Access Layer (DAL):** Abstract *all* direct data source interactions (database queries, external API calls) into a dedicated, server-only DAL (`lib/data/`).
5.  **`server-only` Enforcement:** Strictly use the `import 'server-only';` directive in the DAL and any other sensitive server-side logic files to prevent accidental client-side usage.
6.  **API Route Strategy:** Use `app/api/` for *all* data fetching (needed by client components) and mutation endpoints. Keep handlers thin and rely on the DAL for core logic.
7.  **Server Components:** Leverage Server Components to fetch data directly via the DAL for UI rendering when a public API endpoint isn't required for *that specific page render*.
8.  **Shared Globals:** Use root-level `components/` and `lib/` for *truly* application-wide, generic UI elements and utilities/types/config, respectively.
9.  **TypeScript:** Use TypeScript (`.ts`/`.tsx`) for all files.

**Project Structure Rules:**

1.  **Root Directory:** Standard project files (`package.json`, `next.config.js`, `tsconfig.json`, `.env.local`, `drizzle.config.ts` etc.).
2.  **`app/` Directory (Core):**
    *   **MUST** contain all UI routes and API routes (`route.ts`).
    *   **Route Groups (`(folderName)/`)**: **SHOULD** be used to organize sections of the application (e.g., `(marketing)`, `(app)`, `(admin)`) without affecting URL paths. Use them to apply specific layouts, loading/error boundaries.
    *   **Feature/Route Folders (e.g., `app/(app)/settings/`):**
        *   **MUST** contain standard route files: `page.tsx`, `layout.tsx` (if needed), `loading.tsx`, `error.tsx`.
        *   **`_components/`**: **SHOULD** contain React components used *only* within this specific feature/route segment. Mark as private (`_`) to prevent routing. Client components initiating mutations **MUST** call API routes (e.g., using `fetch`).
        *   **`_lib/` | `_hooks/` | `_utils/`**: **SHOULD** contain client-side hooks or utility functions used *only* within this specific feature/route segment. Mark as private (`_`).
3.  **API Routes (`app/api/...`):**
    *   **MUST** be used for all data fetching required by Client Components and *all* mutation operations (create, update, delete) initiated from the client.
    *   **RECOMMENDED:** Consolidate endpoints under `app/api/`.
    *   **Organization:** Structure sub-folders within `app/api/` by resource or feature (e.g., `app/api/users/`, `app/api/webhooks/stripe/`).
    *   **Route Handlers (`route.ts`)**:
        *   **MUST** use `route.ts` (or `.js`).
        *   **MUST** export named async functions for HTTP methods (`GET`, `POST`, `PUT`, `PATCH`, `DELETE`, etc.).
        *   **MUST** use standard Web `Request`/`Response` APIs (or `NextRequest`/`NextResponse` for extensions).
        *   **MUST** keep logic minimal: handle HTTP concerns (parsing, validation, status codes, headers).
        *   **MUST** call functions from the Data Access Layer (DAL) for all data fetching and mutations.
        *   **Dynamic Routes:** **MUST** use `[paramName]` folders; access params via the second argument `({ params })`.
    *   **Use Cases:** Data fetching for Client Components, handling all form submissions/mutations from the client, building public APIs, proxying backends, handling webhooks, custom auth flows.
4.  **Shared UI Components (`components/` or `src/components/`):**
    *   **Purpose:** For generic, reusable UI components (design system primitives, global layout atoms) used across *multiple unrelated features*.
    *   **Organization:** Subdivide logically (e.g., `components/ui/`, `components/layout/`).
    *   **MUST NOT** contain feature-specific UI logic.
5.  **Data Access Layer (DAL) (`lib/data/` or `src/lib/data/`):**
    *   **Purpose:** The *single source of truth* for interacting with databases or external data APIs.
    *   **MUST** abstract all data fetching and mutation logic.
    *   **Organization:** Group by data resource/domain (e.g., `lib/data/users.ts`, `lib/data/products.ts`).
    *   **`server-only`:** **MUST** include `import 'server-only';` at the top of *every* file in this directory.
    *   **Called By:** Server Components, API Route Handlers.
6.  **Shared Library (`lib/` or `src/lib/`):**
    *   **Purpose:** Global utilities, type definitions, constants, configuration loaders, DB client initialization (`lib/db.ts`).
    *   **`lib/utils.ts`**: General helper functions usable on client and server.
    *   **`lib/types.ts`**: Shared TypeScript types/interfaces.
    *   **`lib/config.ts`**: Application configuration constants/logic.
    *   **`lib/db.ts`**: Database client instantiation (e.g., Drizzle/Prisma client). Mark `server-only` if it contains secrets or should never run client-side.
7.  **Shared API/Middleware Logic (`lib/middleware/` or `lib/api-helpers/`):**
    *   **Purpose:** Reusable functions specifically for wrapping API Route Handlers (e.g., HOFs for authentication `withAuth`, request/response validation wrappers, logging).
    *   **MUST** be distinct from Next.js Middleware (`middleware.ts` at the root).
8.  **Next.js Middleware (`middleware.ts`):**
    *   Located at the root (or `src/`).
    *   **Purpose:** Edge-based request interception for tasks like authentication redirects, path rewriting, setting request headers *before* hitting the route handler or page.
9.  **Configuration Files:**
    *   `.env.local`: **MUST** store secrets and environment-specific variables.
    *   `next.config.js`, `tsconfig.json`, `drizzle.config.ts`, `package.json`: Standard configurations.
10. **Testing (`tests/`):**
    *   **SHOULD** contain integration and end-to-end tests. Unit tests can be co-located with the code they test using `*.test.ts` naming convention if preferred.

**Example Structure (Revised - No `actions.ts`):**

```
.
├── app/
│   ├── (app)/                 # Main authenticated application section
│   │   ├── settings/
│   │   │   ├── _components/
│   │   │   │   └── SettingsForm.tsx  # This form would fetch('/api/settings', { method: 'POST', ... })
│   │   │   └── page.tsx
│   │   ├── dashboard/
│   │   │   └── page.tsx
│   │   └── layout.tsx            # Layout for the authenticated app section
│   ├── (marketing)/           # Public marketing pages
│   │   ├── page.tsx            # Homepage
│   │   └── layout.tsx            # Layout for marketing pages
│   └── api/                   # Centralized API routes
│       ├── users/
│       │   ├── route.ts        # Handles GET /api/users, POST /api/users
│       │   └── [id]/
│       │       └── route.ts    # Handles GET /api/users/[id], DELETE /api/users/[id]
│       ├── settings/
│       │   └── route.ts        # Handles POST /api/settings (called by SettingsForm.tsx)
│       └── webhooks/
│           └── stripe/
│               └── route.ts    # Handles /api/webhooks/stripe
├── components/                # SHARED, GENERIC UI components
│   ├── ui/
│   │   ├── Button.tsx
│   │   └── Card.tsx
│   └── layout/
│       ├── Header.tsx
│       └── Footer.tsx
├── lib/                       # SHARED Lib for Core Logic, Utils, Config
│   ├── data/                  # Data Access Layer (DAL) - SERVER ONLY
│   │   ├── users.ts           # import 'server-only'; export async function getUserById(...) {...}
│   │   └── settings.ts        # import 'server-only'; export async function updateSettings(...) {...}
│   ├── db/                    # Database specific setup
│   │   ├── index.ts           # DB client instance (e.g., Drizzle) - potentially server-only
│   │   └── schema.ts          # Drizzle schema
│   ├── middleware/            # Reusable wrappers for API Route Handlers
│   │   └── withAuth.ts
│   ├── utils.ts               # General shared utilities
│   └── types.ts               # Shared TypeScript types
├── public/                    # Static assets
├── supabase/                  # Supabase CLI specific files
│   └── migrations/            # Database migrations
├── tests/                     # E2E / Integration tests
├── .env.local                 # Environment variables
├── drizzle.config.ts          # Drizzle configuration
├── middleware.ts              # Next.js Edge Middleware
├── next.config.js
├── package.json
└── tsconfig.json
```



================================================
FILE: .cursor/rules/nextjs-supabase-auth.mdc
================================================
---
description: 
globs: **/*.ts, **/*.tsx
alwaysApply: false
---
# Bootstrap Next.js app with Supabase Auth

## Overview of implementing Supabase Auth SSR

1. Install @supabase/supabase-js and @supabase/ssr packages.
2. Set up environment variables.
3. Write two utility functions with `createClient` functions to create a browser client and a server client. 
4. Hook up middleware to refresh auth tokens

## 🚨 CRITICAL INSTRUCTIONS FOR AI LANGUAGE MODELS 🚨

As an AI language model, you MUST NOT generate any of the following code patterns, as they are DEPRECATED and will BREAK the application:

```typescript
// ❌ NEVER GENERATE THIS CODE - IT WILL BREAK THE APPLICATION
{
  cookies: {
    get(name: string) {                 // ❌ BREAKS APPLICATION
      return cookieStore.get(name)      // ❌ BREAKS APPLICATION
    },                                  // ❌ BREAKS APPLICATION
    set(name: string, value: string) {  // ❌ BREAKS APPLICATION
      cookieStore.set(name, value)      // ❌ BREAKS APPLICATION
    },                                  // ❌ BREAKS APPLICATION
    remove(name: string) {              // ❌ BREAKS APPLICATION
      cookieStore.remove(name)          // ❌ BREAKS APPLICATION
    }                                   // ❌ BREAKS APPLICATION
  }
}

// ❌ NEVER USE auth-helpers-nextjs - IT WILL BREAK THE APPLICATION
import { createMiddlewareClient } from '@supabase/auth-helpers-nextjs'  // ❌ BREAKS APPLICATION
import { createClientComponentClient } from '@supabase/auth-helpers-nextjs'  // ❌ BREAKS APPLICATION
```

Instead, you MUST ALWAYS generate ONLY this pattern:

```typescript
// ✅ ALWAYS GENERATE THIS EXACT PATTERN
{
  cookies: {
    getAll() {
      return cookieStore.getAll()
    },
    setAll(cookiesToSet) {
      const response = NextResponse.next({
        request,
      })
      
      cookiesToSet.forEach(({ name, value, options }) => {
        response.cookies.set(name, value, options)
      })
      
      return response
    }
  }
}
```

## ABSOLUTE REQUIREMENTS FOR AI CODE GENERATION

1. You MUST use `@supabase/ssr`
2. You MUST use ONLY `getAll` and `setAll`
3. You MUST NEVER use `get`, `set`, or `remove`
4. You MUST NEVER import from `@supabase/auth-helpers-nextjs`

## CORRECT BROWSER CLIENT IMPLEMENTATION

```typescript
import { createBrowserClient } from '@supabase/ssr'

export function createClient() {
  return createBrowserClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!
  )
}
```

## CORRECT SERVER CLIENT IMPLEMENTATION

```typescript
import { createServerClient } from '@supabase/ssr'
import { cookies } from 'next/headers'

export async function createClient() {
  const cookieStore = await cookies()

  return createServerClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
    {
      cookies: {
        getAll() {
          return cookieStore.getAll()
        },
        setAll(cookiesToSet) {
          try {
            cookiesToSet.forEach(({ name, value, options }) =>
              cookieStore.set(name, value, options)
            )
          } catch {
            // The `setAll` method was called from a Server Component.
            // This can be ignored if you have middleware refreshing
            // user sessions.
          }
        },
      },
    }
  )
}
```

## CORRECT MIDDLEWARE IMPLEMENTATION

```typescript
import { createServerClient } from '@supabase/ssr'
import { NextResponse, type NextRequest } from 'next/server'

export async function middleware(request: NextRequest) {
    let supabaseResponse = NextResponse.next({
    request,
  })

  const supabase = createServerClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
    {
      cookies: {
        getAll() {
          return request.cookies.getAll()
        },
        setAll(cookiesToSet) {
          cookiesToSet.forEach(({ name, value, options }) => request.cookies.set(name, value))
          supabaseResponse = NextResponse.next({
            request,
          })
          cookiesToSet.forEach(({ name, value, options }) =>
            supabaseResponse.cookies.set(name, value, options)
          )
        },
      },
    }
  )

  // Do not run code between createServerClient and
  // supabase.auth.getUser(). A simple mistake could make it very hard to debug
  // issues with users being randomly logged out.

  // IMPORTANT: DO NOT REMOVE auth.getUser()

  const {
    data: { user },
  } = await supabase.auth.getUser()

  if (
    !user &&
    !request.nextUrl.pathname.startsWith('/login') &&
    !request.nextUrl.pathname.startsWith('/auth')
  ) {
    // no user, potentially respond by redirecting the user to the login page
    const url = request.nextUrl.clone()
    url.pathname = '/login'
    return NextResponse.redirect(url)
  }

  // IMPORTANT: You *must* return the supabaseResponse object as it is.
  // If you're creating a new response object with NextResponse.next() make sure to:
  // 1. Pass the request in it, like so:
  //    const myNewResponse = NextResponse.next({ request })
  // 2. Copy over the cookies, like so:
  //    myNewResponse.cookies.setAll(supabaseResponse.cookies.getAll())
  // 3. Change the myNewResponse object to fit your needs, but avoid changing
  //    the cookies!
  // 4. Finally:
  //    return myNewResponse
  // If this is not done, you may be causing the browser and server to go out
  // of sync and terminate the user's session prematurely!

  return supabaseResponse
}

export const config = {
  matcher: [
    /*
     * Match all request paths except for the ones starting with:
     * - _next/static (static files)
     * - _next/image (image optimization files)
     * - favicon.ico (favicon file)
     * Feel free to modify this pattern to include more paths.
     */
    '/((?!_next/static|_next/image|favicon.ico|.*\\.(?:svg|png|jpg|jpeg|gif|webp)$).*)',
  ],
}
```

## AI MODEL VERIFICATION STEPS

Before generating any code, you MUST verify:

1. Are you using ONLY `getAll` and `setAll`? If not, STOP and FIX.
2. Are you importing from `@supabase/ssr`? If not, STOP and FIX.
3. Do you see ANY instance of `get`, `set`, or `remove`? If yes, STOP and FIX.
4. Are you importing from `auth-helpers-nextjs`? If yes, STOP and FIX.

## CONSEQUENCES OF INCORRECT IMPLEMENTATION

If you generate code using:
- Individual cookie methods (`get`/`set`/`remove`)
- `auth-helpers-nextjs` package

The implementation will:
1. Break in production
2. Fail to maintain session state
3. Cause authentication loops
4. Result in security vulnerabilities

## AI MODEL RESPONSE TEMPLATE

When asked about Supabase Auth SSR implementation, you MUST:
1. ONLY use code from this guide
2. NEVER suggest deprecated approaches
3. ALWAYS use the exact cookie handling shown above
4. VERIFY your response against the patterns shown here

Remember: There are NO EXCEPTIONS to these rules.


================================================
FILE: .cursor/rules/tailwindcss.mdc
================================================
---
description: 
globs: **/*.{js,ts,jsx,tsx,mdx,css}
alwaysApply: false
---
# Tailwind CSS v4.1 Guide

This guide covers the core concepts and updates for Tailwind CSS v4.1, focusing on the transition from v3.x and the new features introduced in v4.0 and v4.1.

## Core v4.0 Changes

- **CSS-first configuration**: Configuration is primarily done in CSS using the `@theme` directive instead of `tailwind.config.js`.
  ```css
  @import "tailwindcss";

  @theme {
    --font-display: "Satoshi", "sans-serif";
    --breakpoint-3xl: 1920px;
    --color-avocado-500: oklch(0.84 0.18 117.33);
    --ease-fluid: cubic-bezier(0.3, 0, 0, 1);
  }
  ```
- Legacy `tailwind.config.js` files can still be imported using `@config`:
  ```css
  @import "tailwindcss";
  @config "../../tailwind.config.js";
  ```
- **CSS import syntax**: Use `@import "tailwindcss";` instead of the old `@tailwind` directives (`@tailwind base; @tailwind components; @tailwind utilities;`).
- **Package changes**:
  - PostCSS plugin: `@tailwindcss/postcss` (was `tailwindcss`)
  - CLI: `@tailwindcss/cli`
  - Vite plugin: `@tailwindcss/vite`
  - `postcss-import` and `autoprefixer` are no longer needed.
- **Native CSS cascade layers**: Uses real CSS `@layer` for better compatibility and predictability.

## Theme Configuration (v4.0+)

- **CSS theme variables**: All design tokens are CSS variables (e.g., `--color-blue-500`, `--font-sans`). Access with `var(--color-blue-500)`.
- **Simplified theme**: Many utilities (e.g., `grid-cols-12`, `z-40`, `opacity-70`, data attributes) work without explicit theme configuration.
- **Dynamic spacing scale**: Derived from `--spacing` (default `0.25rem`). Any multiple works (e.g., `mt-21`).
- **Overriding theme**: Override namespaces (`--font-*: initial;`) or the entire theme (`--*: initial;`).

## New Features in v4.0

- **Container query support**: Built-in, no plugin needed.
- **3D transforms**: `transform-3d`, `rotate-x-*`, `rotate-y-*`, `rotate-z-*`, `scale-z-*`, `translate-z-*`, `perspective-*`, `backface-visible/hidden`.
- **Gradient enhancements**: `bg-linear-45`, `bg-linear-to-r/oklch`, `bg-linear-to-r/srgb`, `bg-conic`, `bg-radial-[at_25%_25%]`.
- **Shadow enhancements**: `inset-shadow-*` and `inset-ring-*`.
- **New CSS property utilities**: `field-sizing-content`, `scheme-light/dark`, `font-stretch-*`.

## New Variants in v4.0

- **Composable variants**: Chain variants (e.g., `group-has-data-potato:opacity-100`).
- **New variants**: `starting`, `not-*`, `inert`, `nth-*`, `in-*`, `open`, `**`.

## Tailwind CSS v4.1 Updates

This section highlights the key features and improvements introduced in Tailwind CSS v4.1.

### `text-shadow-*` Utilities
- Added utilities for applying text shadows (`text-shadow-2xs` to `text-shadow-lg`).
- Supports color customization using `text-shadow-<color>` (e.g., `text-shadow-blue-500`).
- Supports opacity modification using a slash modifier (e.g., `text-shadow-lg/50`).
  ```html
  <p class="text-shadow-md text-shadow-blue-500/50">Text with shadow</p>
  ```

### `mask-*` Utilities
- Introduced composable utilities for element masking using images and gradients (`mask-image`, `mask-mode`, `mask-repeat`, `mask-position`, `mask-clip`, `mask-origin`, `mask-size`, `mask-type`).
- Specific utilities for linear (`mask-linear-*`, `mask-t-from-*`, `mask-r-to-*`, etc.), radial (`mask-radial-*`), and conic (`mask-conic-*`) gradient masks.
  ```html
  <!-- Example: Bottom fade + radial mask -->
  <div class="mask-b-from-50% mask-radial-[50%_90%] mask-radial-from-80% ..."></div>
  ```

### Improved Browser Compatibility
- Enhanced fallbacks for older browsers (like Safari 15):
  - `oklab` colors now render correctly.
  - Features depending on `@property` (shadows, transforms, gradients) work better.
  - Colors with opacity modifiers have inlined fallbacks.
  - Gradients with specific interpolation methods fall back gracefully.
- Note: v4 is still designed for modern browsers (Safari 16.4+), but usability in older ones is improved.

### `overflow-wrap` Utilities
- Control text wrapping with `wrap-normal`, `wrap-break-word`, and `wrap-anywhere`.
- `wrap-break-word`: Breaks long words only if they don't fit.
- `wrap-anywhere`: Allows breaks anywhere, useful in flex containers to prevent overflow without `min-width: 0`.
  ```html
  <p class="wrap-anywhere">pneumonoultramicroscopicsilicovolcanoconiosis</p>
  ```

### Colored `drop-shadow` Support
- Added color support to `drop-shadow` utilities using `drop-shadow-<color>`.
- Opacity modifiers are also supported (e.g., `drop-shadow-xl drop-shadow-indigo-500/50`).
  ```html
  <svg class="fill-indigo-500 drop-shadow-xl drop-shadow-indigo-500/50 ..."></svg>
  ```

### Input Device Targeting (`pointer-*`, `any-pointer-*`)
- `pointer-fine`: Targets precise pointing devices (mouse, trackpad).
- `pointer-coarse`: Targets low-precision devices (touchscreen).
- `any-pointer-*`: Checks if *any* available input device matches (e.g., laptop with touchscreen + mouse).
  ```html
  <button class="p-2 pointer-coarse:p-4">Larger on Touch</button>
  ```

### Last Baseline Alignment
- Align flex or grid items to the baseline of the *last* line of text.
- `items-baseline-last`: Applies to all items in the container.
- `self-baseline-last`: Applies to a single item.

### `safe` Alignment Utilities
- Prevent centered content from overflowing in both directions in constrained flex/grid containers.
- Automatically switches alignment to `start` when overflow occurs.
- Examples: `justify-center-safe`, `items-center-safe`, `content-center-safe`, `self-center-safe`.
  ```html
  <ul class="flex justify-center-safe gap-2 ...">...</ul>
  ```

### `@source not` Directive
- Exclude specific directories or files from Tailwind's class scanning process. Useful for ignoring large, irrelevant folders (e.g., `node_modules` if not automatically ignored, legacy code).
  ```css
  @import "tailwindcss";
  @source not "./src/components/legacy/**/*.js";
  ```

### `@source inline(...)` Directive
- Explicitly include specific class names that might not be present in scanned files (replaces v3 `safelist`).
- Supports brace expansion for generating multiple classes/variants efficiently.
- Can be combined with `not` to prevent specific classes from being generated even if detected.
  ```css
  @import "tailwindcss";
  @source inline("underline"); /* Ensure .underline is generated */
  @source inline("{focus:,hover:,}text-red-{500,600,700}"); /* Generate focus/hover variants for specific red text colors */
  @source not inline("container"); /* Prevent .container generation */
  ```

### Other New Variants
- `details-content`: Targets the content container generated by a `<details>` element.
- `inverted-colors`: Applies styles when the OS high contrast "Invert Colors" mode is enabled.
- `noscript`: Applies styles when JavaScript is disabled in the browser.
- `user-valid` / `user-invalid`: Apply form validation styles based on `:user-valid` and `:user-invalid` pseudo-classes, which typically trigger only after user interaction.

## Custom Extensions (v4.0+)

- **Custom utilities**:
  ```css
  @utility tab-4 {
    tab-size: 4;
  }
  ```
- **Custom variants**:
  ```css
  @variant pointer-coarse (@media (pointer: coarse));
  @variant theme-midnight (&:where([data-theme="midnight"] *));
  ```
- **Plugins**:
  ```css
  @plugin "@tailwindcss/typography";
  ```

## Breaking Changes (v4.0)

- **Removed deprecated utilities**: `bg-opacity-*`, `text-opacity-*`, `border-opacity-*`, `divide-opacity-*`. Use the `/` modifier instead (e.g., `bg-black/50`).
- **Renamed utilities**: `shadow-sm` → `shadow-xs`, `drop-shadow-sm` → `drop-shadow-xs`, `blur-sm` → `blur-xs`, `rounded-sm` → `rounded-xs`, `outline-none` → `outline-hidden`.
- **Default style changes**: Adjustments to default border color, ring width, and hover styles.
- **Syntax changes**: CSS variables in arbitrary values require `var()`, stacked variants apply left-to-right.

## Advanced Configuration (v4.0+)

- **Using a prefix**: `@import "tailwindcss" prefix(tw);`
- **Source detection**:
  - `@source "../node_modules/@my-company/ui-lib";` (Include paths)
  - `@source not "./src/legacy";` (Exclude paths - v4.1)
  - `@source inline("...");` (Safelist utilities - v4.1, replaces v3 `safelist`)
- **Legacy config files**: `@config "../../tailwind.config.js";`
- **Dark mode configuration**:
  ```css
  @import "tailwindcss";
  /* Example: Class-based dark mode */
  @variant dark (&:where(.dark *));
  ```
- **Container customization**:
  ```css
  @utility container {
    /* Example: Centered container with padding */
    margin-inline: auto;
    padding-inline: 2rem;
    max-width: theme(var(--breakpoint-lg)); /* Example using theme variable */
  }





