---
description: Define DB state; system auto-generates versioned migrations. Covers creation, updates, deployment, dependencies, rollbacks, & limitations for developers
globs:
alwaysApply: false
---
**Declarative database schemas**

Manage your database schemas in one place and generate versioned migrations.

**Overview**
Declarative schemas offer a developer-friendly way to maintain schema migrations. Traditionally, migrations are imperative, which can scatter related information. With declarative schemas, you define the desired database state, and instructions are generated.

**Schema migrations**
Schema migrations are SQL DDL statements, versioned in `supabase/migrations` for consistency between local and remote environments.

**Declaring your schema**

1.  **Create your first schema file**
    Create a SQL file in `supabase/schemas` defining an `employees` table.

    `supabase/schemas/employees.sql`

    ```sql
    create table "employees" (
      "id" integer not null,
      "name" text
    );
    ```

    Ensure your local database is stopped before diffing.

2.  **Generate a migration file**
    Generate a migration by diffing against your declared schema.

    ```bash
    supabase db diff -f create_employees_table
    ```

3.  **Start local DB & apply migrations**
    Start the local database, then apply the migration to see changes in the local Dashboard.

    ```bash
    supabase start && supabase migration up
    ```

**Updating your schema**

1.  **Stop the local database**
    Stop the local dev environment before updating schema files.

    ```bash
    supabase stop
    ```

2.  **Add a new column**
    Edit `supabase/schemas/employees.sql` to add a column to the `employees` table.

    `supabase/schemas/employees.sql`

    ```sql
    create table "employees" (
      "id" integer not null,
      "name" text,
      "age" smallint not null
    );
    ```

    For entities like views and enums, append new columns to avoid messy diffs, as they expect a specific column order.

3.  **Generate a new migration**
    Diff existing migrations against your declared schema.

    ```bash
    supabase db diff -f add_age
    ```

4.  **Review the generated migration**
    Verify the migration contains a single incremental change.

    `supabase/migrations/<timestamp>_add_age.sql`

    ```sql
    alter table "public"."employees" add column "age" smallint not null;
    ```

5.  **Apply the pending migration**
    Start the DB locally and apply the pending migration.

    ```bash
    supabase start && supabase migration up
    ```

**Deploying your schema changes**

1.  **Log in to Supabase CLI**

    ```bash
    supabase login
    ```

2.  **Link your remote project**
    Follow prompts to link your remote project.

    ```bash
    supabase link
    ```

3.  **Deploy database changes**
    Push changes to the remote database.
    ```bash
    supabase db push
    ```

**Managing dependencies**
For advanced entities like views and functions (verbose with plain migrations due to full recreation on change), declarative schemas allow in-place edits for easier review.

`supabase/schemas/employees.sql`

```sql
create table "employees" (
  "id" integer not null,
  "name" text,
  "age" smallint not null
);
create view "profiles" as
  select id, name from "employees";
create function "get_age"(employee_id integer) RETURNS smallint
  LANGUAGE "sql"
AS $$
  select age
  from employees
  where id = employee_id;
$$;
```

Schema files run in lexicographic order by default. Order is crucial for foreign keys (parent table first). E.g., your `supabase` directory:

```
.
└── supabase/
    ├── schemas/
    │   ├── employees.sql
    │   └── managers.sql
    └── migrations/
        ├── 20241004112233_create_employees_table.sql
        ├── 20241005112233_add_employee_age.sql
        └── 20241006112233_add_managers_table.sql
```

Default order is fine for small projects. For larger ones, control schema application order in `config.toml`. Glob patterns are evaluated, deduplicated, and sorted. E.g., to ensure `employees.sql` runs first:

`supabase/config.toml`

```toml
[db.migrations]
schema_paths = [
  "./schemas/employees.sql",
  "./schemas/*.sql",
]
```

**Pulling in your production schema**
For existing projects, pull your production schema:

```bash
supabase db dump > supabase/schemas/prod.sql
```

Then, break it into smaller files and generate migrations, all at once or incrementally.

**Rolling back a schema change**
During development, to keep new schema changes in one migration file, roll back by resetting your local DB to a previous version:

```bash
supabase db reset --version 20241005112233
```

Post-reset, edit the schema and regenerate a migration. Don't reset versions deployed to production.

To roll back a deployed migration, first revert schema file changes, then generate a new migration with the 'down' changes. This keeps production migrations rolling forward.
Down migrations generate destructive SQL. Review carefully to prevent data loss.

**Known caveats**
The `migra` diff tool tracks most DB changes but can fail in edge cases. For the entities below, use versioned migrations instead:

- **Data Manipulation Language (DML)**
  - DML (insert, update, delete, etc.) not captured by schema diff.
- **View Ownership**
  - View owner and grants
  - Security invoker on views
  - Materialized views
  - Doesn't recreate views on column type alteration
- **RLS Policies**
  - `ALTER POLICY` statements
  - Column privileges
- **Other Entities**
  - Schema privileges (each schema diffed separately)
  - Comments
  - Partitions
  - `ALTER PUBLICATION ... ADD TABLE ...`
  - `CREATE DOMAIN` statements ignored
  - `GRANT` statements duplicated from default privileges

---
